// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.25.1
// source: WAProto.proto

package waproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ADVEncryptionType int32

const (
	ADVEncryptionType_E2EE   ADVEncryptionType = 0
	ADVEncryptionType_HOSTED ADVEncryptionType = 1
)

// Enum value maps for ADVEncryptionType.
var (
	ADVEncryptionType_name = map[int32]string{
		0: "E2EE",
		1: "HOSTED",
	}
	ADVEncryptionType_value = map[string]int32{
		"E2EE":   0,
		"HOSTED": 1,
	}
)

func (x ADVEncryptionType) Enum() *ADVEncryptionType {
	p := new(ADVEncryptionType)
	*p = x
	return p
}

func (x ADVEncryptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ADVEncryptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[0].Descriptor()
}

func (ADVEncryptionType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[0]
}

func (x ADVEncryptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ADVEncryptionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ADVEncryptionType(num)
	return nil
}

// Deprecated: Use ADVEncryptionType.Descriptor instead.
func (ADVEncryptionType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{0}
}

type KeepType int32

const (
	KeepType_UNKNOWN           KeepType = 0
	KeepType_KEEP_FOR_ALL      KeepType = 1
	KeepType_UNDO_KEEP_FOR_ALL KeepType = 2
)

// Enum value maps for KeepType.
var (
	KeepType_name = map[int32]string{
		0: "UNKNOWN",
		1: "KEEP_FOR_ALL",
		2: "UNDO_KEEP_FOR_ALL",
	}
	KeepType_value = map[string]int32{
		"UNKNOWN":           0,
		"KEEP_FOR_ALL":      1,
		"UNDO_KEEP_FOR_ALL": 2,
	}
)

func (x KeepType) Enum() *KeepType {
	p := new(KeepType)
	*p = x
	return p
}

func (x KeepType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeepType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[1].Descriptor()
}

func (KeepType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[1]
}

func (x KeepType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KeepType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KeepType(num)
	return nil
}

// Deprecated: Use KeepType.Descriptor instead.
func (KeepType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{1}
}

type MediaVisibility int32

const (
	MediaVisibility_DEFAULT MediaVisibility = 0
	MediaVisibility_OFF     MediaVisibility = 1
	MediaVisibility_ON      MediaVisibility = 2
)

// Enum value maps for MediaVisibility.
var (
	MediaVisibility_name = map[int32]string{
		0: "DEFAULT",
		1: "OFF",
		2: "ON",
	}
	MediaVisibility_value = map[string]int32{
		"DEFAULT": 0,
		"OFF":     1,
		"ON":      2,
	}
)

func (x MediaVisibility) Enum() *MediaVisibility {
	p := new(MediaVisibility)
	*p = x
	return p
}

func (x MediaVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[2].Descriptor()
}

func (MediaVisibility) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[2]
}

func (x MediaVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MediaVisibility) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MediaVisibility(num)
	return nil
}

// Deprecated: Use MediaVisibility.Descriptor instead.
func (MediaVisibility) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{2}
}

type BizAccountLinkInfo_AccountType int32

const (
	BizAccountLinkInfo_ENTERPRISE BizAccountLinkInfo_AccountType = 0
)

// Enum value maps for BizAccountLinkInfo_AccountType.
var (
	BizAccountLinkInfo_AccountType_name = map[int32]string{
		0: "ENTERPRISE",
	}
	BizAccountLinkInfo_AccountType_value = map[string]int32{
		"ENTERPRISE": 0,
	}
)

func (x BizAccountLinkInfo_AccountType) Enum() *BizAccountLinkInfo_AccountType {
	p := new(BizAccountLinkInfo_AccountType)
	*p = x
	return p
}

func (x BizAccountLinkInfo_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BizAccountLinkInfo_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[3].Descriptor()
}

func (BizAccountLinkInfo_AccountType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[3]
}

func (x BizAccountLinkInfo_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BizAccountLinkInfo_AccountType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BizAccountLinkInfo_AccountType(num)
	return nil
}

// Deprecated: Use BizAccountLinkInfo_AccountType.Descriptor instead.
func (BizAccountLinkInfo_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{8, 0}
}

type BizAccountLinkInfo_HostStorageType int32

const (
	BizAccountLinkInfo_ON_PREMISE BizAccountLinkInfo_HostStorageType = 0
	BizAccountLinkInfo_FACEBOOK   BizAccountLinkInfo_HostStorageType = 1
)

// Enum value maps for BizAccountLinkInfo_HostStorageType.
var (
	BizAccountLinkInfo_HostStorageType_name = map[int32]string{
		0: "ON_PREMISE",
		1: "FACEBOOK",
	}
	BizAccountLinkInfo_HostStorageType_value = map[string]int32{
		"ON_PREMISE": 0,
		"FACEBOOK":   1,
	}
)

func (x BizAccountLinkInfo_HostStorageType) Enum() *BizAccountLinkInfo_HostStorageType {
	p := new(BizAccountLinkInfo_HostStorageType)
	*p = x
	return p
}

func (x BizAccountLinkInfo_HostStorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BizAccountLinkInfo_HostStorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[4].Descriptor()
}

func (BizAccountLinkInfo_HostStorageType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[4]
}

func (x BizAccountLinkInfo_HostStorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BizAccountLinkInfo_HostStorageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BizAccountLinkInfo_HostStorageType(num)
	return nil
}

// Deprecated: Use BizAccountLinkInfo_HostStorageType.Descriptor instead.
func (BizAccountLinkInfo_HostStorageType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{8, 1}
}

type BizIdentityInfo_ActualActorsType int32

const (
	BizIdentityInfo_SELF BizIdentityInfo_ActualActorsType = 0
	BizIdentityInfo_BSP  BizIdentityInfo_ActualActorsType = 1
)

// Enum value maps for BizIdentityInfo_ActualActorsType.
var (
	BizIdentityInfo_ActualActorsType_name = map[int32]string{
		0: "SELF",
		1: "BSP",
	}
	BizIdentityInfo_ActualActorsType_value = map[string]int32{
		"SELF": 0,
		"BSP":  1,
	}
)

func (x BizIdentityInfo_ActualActorsType) Enum() *BizIdentityInfo_ActualActorsType {
	p := new(BizIdentityInfo_ActualActorsType)
	*p = x
	return p
}

func (x BizIdentityInfo_ActualActorsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BizIdentityInfo_ActualActorsType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[5].Descriptor()
}

func (BizIdentityInfo_ActualActorsType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[5]
}

func (x BizIdentityInfo_ActualActorsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BizIdentityInfo_ActualActorsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BizIdentityInfo_ActualActorsType(num)
	return nil
}

// Deprecated: Use BizIdentityInfo_ActualActorsType.Descriptor instead.
func (BizIdentityInfo_ActualActorsType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{10, 0}
}

type BizIdentityInfo_HostStorageType int32

const (
	BizIdentityInfo_ON_PREMISE BizIdentityInfo_HostStorageType = 0
	BizIdentityInfo_FACEBOOK   BizIdentityInfo_HostStorageType = 1
)

// Enum value maps for BizIdentityInfo_HostStorageType.
var (
	BizIdentityInfo_HostStorageType_name = map[int32]string{
		0: "ON_PREMISE",
		1: "FACEBOOK",
	}
	BizIdentityInfo_HostStorageType_value = map[string]int32{
		"ON_PREMISE": 0,
		"FACEBOOK":   1,
	}
)

func (x BizIdentityInfo_HostStorageType) Enum() *BizIdentityInfo_HostStorageType {
	p := new(BizIdentityInfo_HostStorageType)
	*p = x
	return p
}

func (x BizIdentityInfo_HostStorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BizIdentityInfo_HostStorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[6].Descriptor()
}

func (BizIdentityInfo_HostStorageType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[6]
}

func (x BizIdentityInfo_HostStorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BizIdentityInfo_HostStorageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BizIdentityInfo_HostStorageType(num)
	return nil
}

// Deprecated: Use BizIdentityInfo_HostStorageType.Descriptor instead.
func (BizIdentityInfo_HostStorageType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{10, 1}
}

type BizIdentityInfo_VerifiedLevelValue int32

const (
	BizIdentityInfo_UNKNOWN BizIdentityInfo_VerifiedLevelValue = 0
	BizIdentityInfo_LOW     BizIdentityInfo_VerifiedLevelValue = 1
	BizIdentityInfo_HIGH    BizIdentityInfo_VerifiedLevelValue = 2
)

// Enum value maps for BizIdentityInfo_VerifiedLevelValue.
var (
	BizIdentityInfo_VerifiedLevelValue_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOW",
		2: "HIGH",
	}
	BizIdentityInfo_VerifiedLevelValue_value = map[string]int32{
		"UNKNOWN": 0,
		"LOW":     1,
		"HIGH":    2,
	}
)

func (x BizIdentityInfo_VerifiedLevelValue) Enum() *BizIdentityInfo_VerifiedLevelValue {
	p := new(BizIdentityInfo_VerifiedLevelValue)
	*p = x
	return p
}

func (x BizIdentityInfo_VerifiedLevelValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BizIdentityInfo_VerifiedLevelValue) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[7].Descriptor()
}

func (BizIdentityInfo_VerifiedLevelValue) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[7]
}

func (x BizIdentityInfo_VerifiedLevelValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BizIdentityInfo_VerifiedLevelValue) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BizIdentityInfo_VerifiedLevelValue(num)
	return nil
}

// Deprecated: Use BizIdentityInfo_VerifiedLevelValue.Descriptor instead.
func (BizIdentityInfo_VerifiedLevelValue) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{10, 2}
}

type BotPluginMetadata_PluginType int32

const (
	BotPluginMetadata_REELS  BotPluginMetadata_PluginType = 1
	BotPluginMetadata_SEARCH BotPluginMetadata_PluginType = 2
)

// Enum value maps for BotPluginMetadata_PluginType.
var (
	BotPluginMetadata_PluginType_name = map[int32]string{
		1: "REELS",
		2: "SEARCH",
	}
	BotPluginMetadata_PluginType_value = map[string]int32{
		"REELS":  1,
		"SEARCH": 2,
	}
)

func (x BotPluginMetadata_PluginType) Enum() *BotPluginMetadata_PluginType {
	p := new(BotPluginMetadata_PluginType)
	*p = x
	return p
}

func (x BotPluginMetadata_PluginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotPluginMetadata_PluginType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[8].Descriptor()
}

func (BotPluginMetadata_PluginType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[8]
}

func (x BotPluginMetadata_PluginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BotPluginMetadata_PluginType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BotPluginMetadata_PluginType(num)
	return nil
}

// Deprecated: Use BotPluginMetadata_PluginType.Descriptor instead.
func (BotPluginMetadata_PluginType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{13, 0}
}

type BotPluginMetadata_SearchProvider int32

const (
	BotPluginMetadata_BING   BotPluginMetadata_SearchProvider = 1
	BotPluginMetadata_GOOGLE BotPluginMetadata_SearchProvider = 2
)

// Enum value maps for BotPluginMetadata_SearchProvider.
var (
	BotPluginMetadata_SearchProvider_name = map[int32]string{
		1: "BING",
		2: "GOOGLE",
	}
	BotPluginMetadata_SearchProvider_value = map[string]int32{
		"BING":   1,
		"GOOGLE": 2,
	}
)

func (x BotPluginMetadata_SearchProvider) Enum() *BotPluginMetadata_SearchProvider {
	p := new(BotPluginMetadata_SearchProvider)
	*p = x
	return p
}

func (x BotPluginMetadata_SearchProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotPluginMetadata_SearchProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[9].Descriptor()
}

func (BotPluginMetadata_SearchProvider) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[9]
}

func (x BotPluginMetadata_SearchProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BotPluginMetadata_SearchProvider) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BotPluginMetadata_SearchProvider(num)
	return nil
}

// Deprecated: Use BotPluginMetadata_SearchProvider.Descriptor instead.
func (BotPluginMetadata_SearchProvider) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{13, 1}
}

type CallLogRecord_CallResult int32

const (
	CallLogRecord_CONNECTED         CallLogRecord_CallResult = 0
	CallLogRecord_REJECTED          CallLogRecord_CallResult = 1
	CallLogRecord_CANCELLED         CallLogRecord_CallResult = 2
	CallLogRecord_ACCEPTEDELSEWHERE CallLogRecord_CallResult = 3
	CallLogRecord_MISSED            CallLogRecord_CallResult = 4
	CallLogRecord_INVALID           CallLogRecord_CallResult = 5
	CallLogRecord_UNAVAILABLE       CallLogRecord_CallResult = 6
	CallLogRecord_UPCOMING          CallLogRecord_CallResult = 7
	CallLogRecord_FAILED            CallLogRecord_CallResult = 8
	CallLogRecord_ABANDONED         CallLogRecord_CallResult = 9
	CallLogRecord_ONGOING           CallLogRecord_CallResult = 10
)

// Enum value maps for CallLogRecord_CallResult.
var (
	CallLogRecord_CallResult_name = map[int32]string{
		0:  "CONNECTED",
		1:  "REJECTED",
		2:  "CANCELLED",
		3:  "ACCEPTEDELSEWHERE",
		4:  "MISSED",
		5:  "INVALID",
		6:  "UNAVAILABLE",
		7:  "UPCOMING",
		8:  "FAILED",
		9:  "ABANDONED",
		10: "ONGOING",
	}
	CallLogRecord_CallResult_value = map[string]int32{
		"CONNECTED":         0,
		"REJECTED":          1,
		"CANCELLED":         2,
		"ACCEPTEDELSEWHERE": 3,
		"MISSED":            4,
		"INVALID":           5,
		"UNAVAILABLE":       6,
		"UPCOMING":          7,
		"FAILED":            8,
		"ABANDONED":         9,
		"ONGOING":           10,
	}
)

func (x CallLogRecord_CallResult) Enum() *CallLogRecord_CallResult {
	p := new(CallLogRecord_CallResult)
	*p = x
	return p
}

func (x CallLogRecord_CallResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallLogRecord_CallResult) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[10].Descriptor()
}

func (CallLogRecord_CallResult) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[10]
}

func (x CallLogRecord_CallResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CallLogRecord_CallResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CallLogRecord_CallResult(num)
	return nil
}

// Deprecated: Use CallLogRecord_CallResult.Descriptor instead.
func (CallLogRecord_CallResult) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{15, 0}
}

type CallLogRecord_CallType int32

const (
	CallLogRecord_REGULAR        CallLogRecord_CallType = 0
	CallLogRecord_SCHEDULED_CALL CallLogRecord_CallType = 1
	CallLogRecord_VOICE_CHAT     CallLogRecord_CallType = 2
)

// Enum value maps for CallLogRecord_CallType.
var (
	CallLogRecord_CallType_name = map[int32]string{
		0: "REGULAR",
		1: "SCHEDULED_CALL",
		2: "VOICE_CHAT",
	}
	CallLogRecord_CallType_value = map[string]int32{
		"REGULAR":        0,
		"SCHEDULED_CALL": 1,
		"VOICE_CHAT":     2,
	}
)

func (x CallLogRecord_CallType) Enum() *CallLogRecord_CallType {
	p := new(CallLogRecord_CallType)
	*p = x
	return p
}

func (x CallLogRecord_CallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallLogRecord_CallType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[11].Descriptor()
}

func (CallLogRecord_CallType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[11]
}

func (x CallLogRecord_CallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CallLogRecord_CallType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CallLogRecord_CallType(num)
	return nil
}

// Deprecated: Use CallLogRecord_CallType.Descriptor instead.
func (CallLogRecord_CallType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{15, 1}
}

type CallLogRecord_SilenceReason int32

const (
	CallLogRecord_NONE        CallLogRecord_SilenceReason = 0
	CallLogRecord_SCHEDULED   CallLogRecord_SilenceReason = 1
	CallLogRecord_PRIVACY     CallLogRecord_SilenceReason = 2
	CallLogRecord_LIGHTWEIGHT CallLogRecord_SilenceReason = 3
)

// Enum value maps for CallLogRecord_SilenceReason.
var (
	CallLogRecord_SilenceReason_name = map[int32]string{
		0: "NONE",
		1: "SCHEDULED",
		2: "PRIVACY",
		3: "LIGHTWEIGHT",
	}
	CallLogRecord_SilenceReason_value = map[string]int32{
		"NONE":        0,
		"SCHEDULED":   1,
		"PRIVACY":     2,
		"LIGHTWEIGHT": 3,
	}
)

func (x CallLogRecord_SilenceReason) Enum() *CallLogRecord_SilenceReason {
	p := new(CallLogRecord_SilenceReason)
	*p = x
	return p
}

func (x CallLogRecord_SilenceReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallLogRecord_SilenceReason) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[12].Descriptor()
}

func (CallLogRecord_SilenceReason) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[12]
}

func (x CallLogRecord_SilenceReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CallLogRecord_SilenceReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CallLogRecord_SilenceReason(num)
	return nil
}

// Deprecated: Use CallLogRecord_SilenceReason.Descriptor instead.
func (CallLogRecord_SilenceReason) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{15, 2}
}

type ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType int32

const (
	ChatRowOpaqueData_DraftMessage_CtwaContextData_NONE  ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType = 0
	ChatRowOpaqueData_DraftMessage_CtwaContextData_IMAGE ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType = 1
	ChatRowOpaqueData_DraftMessage_CtwaContextData_VIDEO ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType = 2
)

// Enum value maps for ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType.
var (
	ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType_name = map[int32]string{
		0: "NONE",
		1: "IMAGE",
		2: "VIDEO",
	}
	ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType_value = map[string]int32{
		"NONE":  0,
		"IMAGE": 1,
		"VIDEO": 2,
	}
)

func (x ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType) Enum() *ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType {
	p := new(ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType)
	*p = x
	return p
}

func (x ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[13].Descriptor()
}

func (ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[13]
}

func (x ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType(num)
	return nil
}

// Deprecated: Use ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType.Descriptor instead.
func (ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{17, 0, 0, 0}
}

type ClientPayload_ConnectReason int32

const (
	ClientPayload_PUSH            ClientPayload_ConnectReason = 0
	ClientPayload_USER_ACTIVATED  ClientPayload_ConnectReason = 1
	ClientPayload_SCHEDULED       ClientPayload_ConnectReason = 2
	ClientPayload_ERROR_RECONNECT ClientPayload_ConnectReason = 3
	ClientPayload_NETWORK_SWITCH  ClientPayload_ConnectReason = 4
	ClientPayload_PING_RECONNECT  ClientPayload_ConnectReason = 5
	ClientPayload_UNKNOWN         ClientPayload_ConnectReason = 6
)

// Enum value maps for ClientPayload_ConnectReason.
var (
	ClientPayload_ConnectReason_name = map[int32]string{
		0: "PUSH",
		1: "USER_ACTIVATED",
		2: "SCHEDULED",
		3: "ERROR_RECONNECT",
		4: "NETWORK_SWITCH",
		5: "PING_RECONNECT",
		6: "UNKNOWN",
	}
	ClientPayload_ConnectReason_value = map[string]int32{
		"PUSH":            0,
		"USER_ACTIVATED":  1,
		"SCHEDULED":       2,
		"ERROR_RECONNECT": 3,
		"NETWORK_SWITCH":  4,
		"PING_RECONNECT":  5,
		"UNKNOWN":         6,
	}
)

func (x ClientPayload_ConnectReason) Enum() *ClientPayload_ConnectReason {
	p := new(ClientPayload_ConnectReason)
	*p = x
	return p
}

func (x ClientPayload_ConnectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPayload_ConnectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[14].Descriptor()
}

func (ClientPayload_ConnectReason) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[14]
}

func (x ClientPayload_ConnectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientPayload_ConnectReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientPayload_ConnectReason(num)
	return nil
}

// Deprecated: Use ClientPayload_ConnectReason.Descriptor instead.
func (ClientPayload_ConnectReason) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 0}
}

type ClientPayload_ConnectType int32

const (
	ClientPayload_CELLULAR_UNKNOWN ClientPayload_ConnectType = 0
	ClientPayload_WIFI_UNKNOWN     ClientPayload_ConnectType = 1
	ClientPayload_CELLULAR_EDGE    ClientPayload_ConnectType = 100
	ClientPayload_CELLULAR_IDEN    ClientPayload_ConnectType = 101
	ClientPayload_CELLULAR_UMTS    ClientPayload_ConnectType = 102
	ClientPayload_CELLULAR_EVDO    ClientPayload_ConnectType = 103
	ClientPayload_CELLULAR_GPRS    ClientPayload_ConnectType = 104
	ClientPayload_CELLULAR_HSDPA   ClientPayload_ConnectType = 105
	ClientPayload_CELLULAR_HSUPA   ClientPayload_ConnectType = 106
	ClientPayload_CELLULAR_HSPA    ClientPayload_ConnectType = 107
	ClientPayload_CELLULAR_CDMA    ClientPayload_ConnectType = 108
	ClientPayload_CELLULAR_1XRTT   ClientPayload_ConnectType = 109
	ClientPayload_CELLULAR_EHRPD   ClientPayload_ConnectType = 110
	ClientPayload_CELLULAR_LTE     ClientPayload_ConnectType = 111
	ClientPayload_CELLULAR_HSPAP   ClientPayload_ConnectType = 112
)

// Enum value maps for ClientPayload_ConnectType.
var (
	ClientPayload_ConnectType_name = map[int32]string{
		0:   "CELLULAR_UNKNOWN",
		1:   "WIFI_UNKNOWN",
		100: "CELLULAR_EDGE",
		101: "CELLULAR_IDEN",
		102: "CELLULAR_UMTS",
		103: "CELLULAR_EVDO",
		104: "CELLULAR_GPRS",
		105: "CELLULAR_HSDPA",
		106: "CELLULAR_HSUPA",
		107: "CELLULAR_HSPA",
		108: "CELLULAR_CDMA",
		109: "CELLULAR_1XRTT",
		110: "CELLULAR_EHRPD",
		111: "CELLULAR_LTE",
		112: "CELLULAR_HSPAP",
	}
	ClientPayload_ConnectType_value = map[string]int32{
		"CELLULAR_UNKNOWN": 0,
		"WIFI_UNKNOWN":     1,
		"CELLULAR_EDGE":    100,
		"CELLULAR_IDEN":    101,
		"CELLULAR_UMTS":    102,
		"CELLULAR_EVDO":    103,
		"CELLULAR_GPRS":    104,
		"CELLULAR_HSDPA":   105,
		"CELLULAR_HSUPA":   106,
		"CELLULAR_HSPA":    107,
		"CELLULAR_CDMA":    108,
		"CELLULAR_1XRTT":   109,
		"CELLULAR_EHRPD":   110,
		"CELLULAR_LTE":     111,
		"CELLULAR_HSPAP":   112,
	}
)

func (x ClientPayload_ConnectType) Enum() *ClientPayload_ConnectType {
	p := new(ClientPayload_ConnectType)
	*p = x
	return p
}

func (x ClientPayload_ConnectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPayload_ConnectType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[15].Descriptor()
}

func (ClientPayload_ConnectType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[15]
}

func (x ClientPayload_ConnectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientPayload_ConnectType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientPayload_ConnectType(num)
	return nil
}

// Deprecated: Use ClientPayload_ConnectType.Descriptor instead.
func (ClientPayload_ConnectType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 1}
}

type ClientPayload_IOSAppExtension int32

const (
	ClientPayload_SHARE_EXTENSION   ClientPayload_IOSAppExtension = 0
	ClientPayload_SERVICE_EXTENSION ClientPayload_IOSAppExtension = 1
	ClientPayload_INTENTS_EXTENSION ClientPayload_IOSAppExtension = 2
)

// Enum value maps for ClientPayload_IOSAppExtension.
var (
	ClientPayload_IOSAppExtension_name = map[int32]string{
		0: "SHARE_EXTENSION",
		1: "SERVICE_EXTENSION",
		2: "INTENTS_EXTENSION",
	}
	ClientPayload_IOSAppExtension_value = map[string]int32{
		"SHARE_EXTENSION":   0,
		"SERVICE_EXTENSION": 1,
		"INTENTS_EXTENSION": 2,
	}
)

func (x ClientPayload_IOSAppExtension) Enum() *ClientPayload_IOSAppExtension {
	p := new(ClientPayload_IOSAppExtension)
	*p = x
	return p
}

func (x ClientPayload_IOSAppExtension) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPayload_IOSAppExtension) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[16].Descriptor()
}

func (ClientPayload_IOSAppExtension) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[16]
}

func (x ClientPayload_IOSAppExtension) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientPayload_IOSAppExtension) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientPayload_IOSAppExtension(num)
	return nil
}

// Deprecated: Use ClientPayload_IOSAppExtension.Descriptor instead.
func (ClientPayload_IOSAppExtension) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 2}
}

type ClientPayload_Product int32

const (
	ClientPayload_WHATSAPP     ClientPayload_Product = 0
	ClientPayload_MESSENGER    ClientPayload_Product = 1
	ClientPayload_INTEROP      ClientPayload_Product = 2
	ClientPayload_INTEROP_MSGR ClientPayload_Product = 3
)

// Enum value maps for ClientPayload_Product.
var (
	ClientPayload_Product_name = map[int32]string{
		0: "WHATSAPP",
		1: "MESSENGER",
		2: "INTEROP",
		3: "INTEROP_MSGR",
	}
	ClientPayload_Product_value = map[string]int32{
		"WHATSAPP":     0,
		"MESSENGER":    1,
		"INTEROP":      2,
		"INTEROP_MSGR": 3,
	}
)

func (x ClientPayload_Product) Enum() *ClientPayload_Product {
	p := new(ClientPayload_Product)
	*p = x
	return p
}

func (x ClientPayload_Product) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPayload_Product) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[17].Descriptor()
}

func (ClientPayload_Product) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[17]
}

func (x ClientPayload_Product) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientPayload_Product) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientPayload_Product(num)
	return nil
}

// Deprecated: Use ClientPayload_Product.Descriptor instead.
func (ClientPayload_Product) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 3}
}

type ClientPayload_DNSSource_DNSResolutionMethod int32

const (
	ClientPayload_DNSSource_SYSTEM    ClientPayload_DNSSource_DNSResolutionMethod = 0
	ClientPayload_DNSSource_GOOGLE    ClientPayload_DNSSource_DNSResolutionMethod = 1
	ClientPayload_DNSSource_HARDCODED ClientPayload_DNSSource_DNSResolutionMethod = 2
	ClientPayload_DNSSource_OVERRIDE  ClientPayload_DNSSource_DNSResolutionMethod = 3
	ClientPayload_DNSSource_FALLBACK  ClientPayload_DNSSource_DNSResolutionMethod = 4
)

// Enum value maps for ClientPayload_DNSSource_DNSResolutionMethod.
var (
	ClientPayload_DNSSource_DNSResolutionMethod_name = map[int32]string{
		0: "SYSTEM",
		1: "GOOGLE",
		2: "HARDCODED",
		3: "OVERRIDE",
		4: "FALLBACK",
	}
	ClientPayload_DNSSource_DNSResolutionMethod_value = map[string]int32{
		"SYSTEM":    0,
		"GOOGLE":    1,
		"HARDCODED": 2,
		"OVERRIDE":  3,
		"FALLBACK":  4,
	}
)

func (x ClientPayload_DNSSource_DNSResolutionMethod) Enum() *ClientPayload_DNSSource_DNSResolutionMethod {
	p := new(ClientPayload_DNSSource_DNSResolutionMethod)
	*p = x
	return p
}

func (x ClientPayload_DNSSource_DNSResolutionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPayload_DNSSource_DNSResolutionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[18].Descriptor()
}

func (ClientPayload_DNSSource_DNSResolutionMethod) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[18]
}

func (x ClientPayload_DNSSource_DNSResolutionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientPayload_DNSSource_DNSResolutionMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientPayload_DNSSource_DNSResolutionMethod(num)
	return nil
}

// Deprecated: Use ClientPayload_DNSSource_DNSResolutionMethod.Descriptor instead.
func (ClientPayload_DNSSource_DNSResolutionMethod) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 0, 0}
}

type ClientPayload_UserAgent_DeviceType int32

const (
	ClientPayload_UserAgent_PHONE    ClientPayload_UserAgent_DeviceType = 0
	ClientPayload_UserAgent_TABLET   ClientPayload_UserAgent_DeviceType = 1
	ClientPayload_UserAgent_DESKTOP  ClientPayload_UserAgent_DeviceType = 2
	ClientPayload_UserAgent_WEARABLE ClientPayload_UserAgent_DeviceType = 3
	ClientPayload_UserAgent_VR       ClientPayload_UserAgent_DeviceType = 4
)

// Enum value maps for ClientPayload_UserAgent_DeviceType.
var (
	ClientPayload_UserAgent_DeviceType_name = map[int32]string{
		0: "PHONE",
		1: "TABLET",
		2: "DESKTOP",
		3: "WEARABLE",
		4: "VR",
	}
	ClientPayload_UserAgent_DeviceType_value = map[string]int32{
		"PHONE":    0,
		"TABLET":   1,
		"DESKTOP":  2,
		"WEARABLE": 3,
		"VR":       4,
	}
)

func (x ClientPayload_UserAgent_DeviceType) Enum() *ClientPayload_UserAgent_DeviceType {
	p := new(ClientPayload_UserAgent_DeviceType)
	*p = x
	return p
}

func (x ClientPayload_UserAgent_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPayload_UserAgent_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[19].Descriptor()
}

func (ClientPayload_UserAgent_DeviceType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[19]
}

func (x ClientPayload_UserAgent_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientPayload_UserAgent_DeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientPayload_UserAgent_DeviceType(num)
	return nil
}

// Deprecated: Use ClientPayload_UserAgent_DeviceType.Descriptor instead.
func (ClientPayload_UserAgent_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 3, 0}
}

type ClientPayload_UserAgent_Platform int32

const (
	ClientPayload_UserAgent_ANDROID        ClientPayload_UserAgent_Platform = 0
	ClientPayload_UserAgent_IOS            ClientPayload_UserAgent_Platform = 1
	ClientPayload_UserAgent_WINDOWS_PHONE  ClientPayload_UserAgent_Platform = 2
	ClientPayload_UserAgent_BLACKBERRY     ClientPayload_UserAgent_Platform = 3
	ClientPayload_UserAgent_BLACKBERRYX    ClientPayload_UserAgent_Platform = 4
	ClientPayload_UserAgent_S40            ClientPayload_UserAgent_Platform = 5
	ClientPayload_UserAgent_S60            ClientPayload_UserAgent_Platform = 6
	ClientPayload_UserAgent_PYTHON_CLIENT  ClientPayload_UserAgent_Platform = 7
	ClientPayload_UserAgent_TIZEN          ClientPayload_UserAgent_Platform = 8
	ClientPayload_UserAgent_ENTERPRISE     ClientPayload_UserAgent_Platform = 9
	ClientPayload_UserAgent_SMB_ANDROID    ClientPayload_UserAgent_Platform = 10
	ClientPayload_UserAgent_KAIOS          ClientPayload_UserAgent_Platform = 11
	ClientPayload_UserAgent_SMB_IOS        ClientPayload_UserAgent_Platform = 12
	ClientPayload_UserAgent_WINDOWS        ClientPayload_UserAgent_Platform = 13
	ClientPayload_UserAgent_WEB            ClientPayload_UserAgent_Platform = 14
	ClientPayload_UserAgent_PORTAL         ClientPayload_UserAgent_Platform = 15
	ClientPayload_UserAgent_GREEN_ANDROID  ClientPayload_UserAgent_Platform = 16
	ClientPayload_UserAgent_GREEN_IPHONE   ClientPayload_UserAgent_Platform = 17
	ClientPayload_UserAgent_BLUE_ANDROID   ClientPayload_UserAgent_Platform = 18
	ClientPayload_UserAgent_BLUE_IPHONE    ClientPayload_UserAgent_Platform = 19
	ClientPayload_UserAgent_FBLITE_ANDROID ClientPayload_UserAgent_Platform = 20
	ClientPayload_UserAgent_MLITE_ANDROID  ClientPayload_UserAgent_Platform = 21
	ClientPayload_UserAgent_IGLITE_ANDROID ClientPayload_UserAgent_Platform = 22
	ClientPayload_UserAgent_PAGE           ClientPayload_UserAgent_Platform = 23
	ClientPayload_UserAgent_MACOS          ClientPayload_UserAgent_Platform = 24
	ClientPayload_UserAgent_OCULUS_MSG     ClientPayload_UserAgent_Platform = 25
	ClientPayload_UserAgent_OCULUS_CALL    ClientPayload_UserAgent_Platform = 26
	ClientPayload_UserAgent_MILAN          ClientPayload_UserAgent_Platform = 27
	ClientPayload_UserAgent_CAPI           ClientPayload_UserAgent_Platform = 28
	ClientPayload_UserAgent_WEAROS         ClientPayload_UserAgent_Platform = 29
	ClientPayload_UserAgent_ARDEVICE       ClientPayload_UserAgent_Platform = 30
	ClientPayload_UserAgent_VRDEVICE       ClientPayload_UserAgent_Platform = 31
	ClientPayload_UserAgent_BLUE_WEB       ClientPayload_UserAgent_Platform = 32
	ClientPayload_UserAgent_IPAD           ClientPayload_UserAgent_Platform = 33
	ClientPayload_UserAgent_TEST           ClientPayload_UserAgent_Platform = 34
	ClientPayload_UserAgent_SMART_GLASSES  ClientPayload_UserAgent_Platform = 35
)

// Enum value maps for ClientPayload_UserAgent_Platform.
var (
	ClientPayload_UserAgent_Platform_name = map[int32]string{
		0:  "ANDROID",
		1:  "IOS",
		2:  "WINDOWS_PHONE",
		3:  "BLACKBERRY",
		4:  "BLACKBERRYX",
		5:  "S40",
		6:  "S60",
		7:  "PYTHON_CLIENT",
		8:  "TIZEN",
		9:  "ENTERPRISE",
		10: "SMB_ANDROID",
		11: "KAIOS",
		12: "SMB_IOS",
		13: "WINDOWS",
		14: "WEB",
		15: "PORTAL",
		16: "GREEN_ANDROID",
		17: "GREEN_IPHONE",
		18: "BLUE_ANDROID",
		19: "BLUE_IPHONE",
		20: "FBLITE_ANDROID",
		21: "MLITE_ANDROID",
		22: "IGLITE_ANDROID",
		23: "PAGE",
		24: "MACOS",
		25: "OCULUS_MSG",
		26: "OCULUS_CALL",
		27: "MILAN",
		28: "CAPI",
		29: "WEAROS",
		30: "ARDEVICE",
		31: "VRDEVICE",
		32: "BLUE_WEB",
		33: "IPAD",
		34: "TEST",
		35: "SMART_GLASSES",
	}
	ClientPayload_UserAgent_Platform_value = map[string]int32{
		"ANDROID":        0,
		"IOS":            1,
		"WINDOWS_PHONE":  2,
		"BLACKBERRY":     3,
		"BLACKBERRYX":    4,
		"S40":            5,
		"S60":            6,
		"PYTHON_CLIENT":  7,
		"TIZEN":          8,
		"ENTERPRISE":     9,
		"SMB_ANDROID":    10,
		"KAIOS":          11,
		"SMB_IOS":        12,
		"WINDOWS":        13,
		"WEB":            14,
		"PORTAL":         15,
		"GREEN_ANDROID":  16,
		"GREEN_IPHONE":   17,
		"BLUE_ANDROID":   18,
		"BLUE_IPHONE":    19,
		"FBLITE_ANDROID": 20,
		"MLITE_ANDROID":  21,
		"IGLITE_ANDROID": 22,
		"PAGE":           23,
		"MACOS":          24,
		"OCULUS_MSG":     25,
		"OCULUS_CALL":    26,
		"MILAN":          27,
		"CAPI":           28,
		"WEAROS":         29,
		"ARDEVICE":       30,
		"VRDEVICE":       31,
		"BLUE_WEB":       32,
		"IPAD":           33,
		"TEST":           34,
		"SMART_GLASSES":  35,
	}
)

func (x ClientPayload_UserAgent_Platform) Enum() *ClientPayload_UserAgent_Platform {
	p := new(ClientPayload_UserAgent_Platform)
	*p = x
	return p
}

func (x ClientPayload_UserAgent_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPayload_UserAgent_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[20].Descriptor()
}

func (ClientPayload_UserAgent_Platform) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[20]
}

func (x ClientPayload_UserAgent_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientPayload_UserAgent_Platform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientPayload_UserAgent_Platform(num)
	return nil
}

// Deprecated: Use ClientPayload_UserAgent_Platform.Descriptor instead.
func (ClientPayload_UserAgent_Platform) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 3, 1}
}

type ClientPayload_UserAgent_ReleaseChannel int32

const (
	ClientPayload_UserAgent_RELEASE ClientPayload_UserAgent_ReleaseChannel = 0
	ClientPayload_UserAgent_BETA    ClientPayload_UserAgent_ReleaseChannel = 1
	ClientPayload_UserAgent_ALPHA   ClientPayload_UserAgent_ReleaseChannel = 2
	ClientPayload_UserAgent_DEBUG   ClientPayload_UserAgent_ReleaseChannel = 3
)

// Enum value maps for ClientPayload_UserAgent_ReleaseChannel.
var (
	ClientPayload_UserAgent_ReleaseChannel_name = map[int32]string{
		0: "RELEASE",
		1: "BETA",
		2: "ALPHA",
		3: "DEBUG",
	}
	ClientPayload_UserAgent_ReleaseChannel_value = map[string]int32{
		"RELEASE": 0,
		"BETA":    1,
		"ALPHA":   2,
		"DEBUG":   3,
	}
)

func (x ClientPayload_UserAgent_ReleaseChannel) Enum() *ClientPayload_UserAgent_ReleaseChannel {
	p := new(ClientPayload_UserAgent_ReleaseChannel)
	*p = x
	return p
}

func (x ClientPayload_UserAgent_ReleaseChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPayload_UserAgent_ReleaseChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[21].Descriptor()
}

func (ClientPayload_UserAgent_ReleaseChannel) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[21]
}

func (x ClientPayload_UserAgent_ReleaseChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientPayload_UserAgent_ReleaseChannel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientPayload_UserAgent_ReleaseChannel(num)
	return nil
}

// Deprecated: Use ClientPayload_UserAgent_ReleaseChannel.Descriptor instead.
func (ClientPayload_UserAgent_ReleaseChannel) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 3, 2}
}

type ClientPayload_WebInfo_WebSubPlatform int32

const (
	ClientPayload_WebInfo_WEB_BROWSER ClientPayload_WebInfo_WebSubPlatform = 0
	ClientPayload_WebInfo_APP_STORE   ClientPayload_WebInfo_WebSubPlatform = 1
	ClientPayload_WebInfo_WIN_STORE   ClientPayload_WebInfo_WebSubPlatform = 2
	ClientPayload_WebInfo_DARWIN      ClientPayload_WebInfo_WebSubPlatform = 3
	ClientPayload_WebInfo_WIN32       ClientPayload_WebInfo_WebSubPlatform = 4
)

// Enum value maps for ClientPayload_WebInfo_WebSubPlatform.
var (
	ClientPayload_WebInfo_WebSubPlatform_name = map[int32]string{
		0: "WEB_BROWSER",
		1: "APP_STORE",
		2: "WIN_STORE",
		3: "DARWIN",
		4: "WIN32",
	}
	ClientPayload_WebInfo_WebSubPlatform_value = map[string]int32{
		"WEB_BROWSER": 0,
		"APP_STORE":   1,
		"WIN_STORE":   2,
		"DARWIN":      3,
		"WIN32":       4,
	}
)

func (x ClientPayload_WebInfo_WebSubPlatform) Enum() *ClientPayload_WebInfo_WebSubPlatform {
	p := new(ClientPayload_WebInfo_WebSubPlatform)
	*p = x
	return p
}

func (x ClientPayload_WebInfo_WebSubPlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPayload_WebInfo_WebSubPlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[22].Descriptor()
}

func (ClientPayload_WebInfo_WebSubPlatform) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[22]
}

func (x ClientPayload_WebInfo_WebSubPlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientPayload_WebInfo_WebSubPlatform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientPayload_WebInfo_WebSubPlatform(num)
	return nil
}

// Deprecated: Use ClientPayload_WebInfo_WebSubPlatform.Descriptor instead.
func (ClientPayload_WebInfo_WebSubPlatform) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 4, 0}
}

type ContextInfo_AdReplyInfo_MediaType int32

const (
	ContextInfo_AdReplyInfo_NONE  ContextInfo_AdReplyInfo_MediaType = 0
	ContextInfo_AdReplyInfo_IMAGE ContextInfo_AdReplyInfo_MediaType = 1
	ContextInfo_AdReplyInfo_VIDEO ContextInfo_AdReplyInfo_MediaType = 2
)

// Enum value maps for ContextInfo_AdReplyInfo_MediaType.
var (
	ContextInfo_AdReplyInfo_MediaType_name = map[int32]string{
		0: "NONE",
		1: "IMAGE",
		2: "VIDEO",
	}
	ContextInfo_AdReplyInfo_MediaType_value = map[string]int32{
		"NONE":  0,
		"IMAGE": 1,
		"VIDEO": 2,
	}
)

func (x ContextInfo_AdReplyInfo_MediaType) Enum() *ContextInfo_AdReplyInfo_MediaType {
	p := new(ContextInfo_AdReplyInfo_MediaType)
	*p = x
	return p
}

func (x ContextInfo_AdReplyInfo_MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextInfo_AdReplyInfo_MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[23].Descriptor()
}

func (ContextInfo_AdReplyInfo_MediaType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[23]
}

func (x ContextInfo_AdReplyInfo_MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContextInfo_AdReplyInfo_MediaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContextInfo_AdReplyInfo_MediaType(num)
	return nil
}

// Deprecated: Use ContextInfo_AdReplyInfo_MediaType.Descriptor instead.
func (ContextInfo_AdReplyInfo_MediaType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{20, 0, 0}
}

type ContextInfo_ExternalAdReplyInfo_MediaType int32

const (
	ContextInfo_ExternalAdReplyInfo_NONE  ContextInfo_ExternalAdReplyInfo_MediaType = 0
	ContextInfo_ExternalAdReplyInfo_IMAGE ContextInfo_ExternalAdReplyInfo_MediaType = 1
	ContextInfo_ExternalAdReplyInfo_VIDEO ContextInfo_ExternalAdReplyInfo_MediaType = 2
)

// Enum value maps for ContextInfo_ExternalAdReplyInfo_MediaType.
var (
	ContextInfo_ExternalAdReplyInfo_MediaType_name = map[int32]string{
		0: "NONE",
		1: "IMAGE",
		2: "VIDEO",
	}
	ContextInfo_ExternalAdReplyInfo_MediaType_value = map[string]int32{
		"NONE":  0,
		"IMAGE": 1,
		"VIDEO": 2,
	}
)

func (x ContextInfo_ExternalAdReplyInfo_MediaType) Enum() *ContextInfo_ExternalAdReplyInfo_MediaType {
	p := new(ContextInfo_ExternalAdReplyInfo_MediaType)
	*p = x
	return p
}

func (x ContextInfo_ExternalAdReplyInfo_MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextInfo_ExternalAdReplyInfo_MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[24].Descriptor()
}

func (ContextInfo_ExternalAdReplyInfo_MediaType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[24]
}

func (x ContextInfo_ExternalAdReplyInfo_MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContextInfo_ExternalAdReplyInfo_MediaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContextInfo_ExternalAdReplyInfo_MediaType(num)
	return nil
}

// Deprecated: Use ContextInfo_ExternalAdReplyInfo_MediaType.Descriptor instead.
func (ContextInfo_ExternalAdReplyInfo_MediaType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{20, 3, 0}
}

type ContextInfo_ForwardedNewsletterMessageInfo_ContentType int32

const (
	ContextInfo_ForwardedNewsletterMessageInfo_UPDATE      ContextInfo_ForwardedNewsletterMessageInfo_ContentType = 1
	ContextInfo_ForwardedNewsletterMessageInfo_UPDATE_CARD ContextInfo_ForwardedNewsletterMessageInfo_ContentType = 2
	ContextInfo_ForwardedNewsletterMessageInfo_LINK_CARD   ContextInfo_ForwardedNewsletterMessageInfo_ContentType = 3
)

// Enum value maps for ContextInfo_ForwardedNewsletterMessageInfo_ContentType.
var (
	ContextInfo_ForwardedNewsletterMessageInfo_ContentType_name = map[int32]string{
		1: "UPDATE",
		2: "UPDATE_CARD",
		3: "LINK_CARD",
	}
	ContextInfo_ForwardedNewsletterMessageInfo_ContentType_value = map[string]int32{
		"UPDATE":      1,
		"UPDATE_CARD": 2,
		"LINK_CARD":   3,
	}
)

func (x ContextInfo_ForwardedNewsletterMessageInfo_ContentType) Enum() *ContextInfo_ForwardedNewsletterMessageInfo_ContentType {
	p := new(ContextInfo_ForwardedNewsletterMessageInfo_ContentType)
	*p = x
	return p
}

func (x ContextInfo_ForwardedNewsletterMessageInfo_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextInfo_ForwardedNewsletterMessageInfo_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[25].Descriptor()
}

func (ContextInfo_ForwardedNewsletterMessageInfo_ContentType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[25]
}

func (x ContextInfo_ForwardedNewsletterMessageInfo_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContextInfo_ForwardedNewsletterMessageInfo_ContentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContextInfo_ForwardedNewsletterMessageInfo_ContentType(num)
	return nil
}

// Deprecated: Use ContextInfo_ForwardedNewsletterMessageInfo_ContentType.Descriptor instead.
func (ContextInfo_ForwardedNewsletterMessageInfo_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{20, 4, 0}
}

type Conversation_EndOfHistoryTransferType int32

const (
	Conversation_COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY           Conversation_EndOfHistoryTransferType = 0
	Conversation_COMPLETE_AND_NO_MORE_MESSAGE_REMAIN_ON_PRIMARY         Conversation_EndOfHistoryTransferType = 1
	Conversation_COMPLETE_ON_DEMAND_SYNC_BUT_MORE_MSG_REMAIN_ON_PRIMARY Conversation_EndOfHistoryTransferType = 2
)

// Enum value maps for Conversation_EndOfHistoryTransferType.
var (
	Conversation_EndOfHistoryTransferType_name = map[int32]string{
		0: "COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY",
		1: "COMPLETE_AND_NO_MORE_MESSAGE_REMAIN_ON_PRIMARY",
		2: "COMPLETE_ON_DEMAND_SYNC_BUT_MORE_MSG_REMAIN_ON_PRIMARY",
	}
	Conversation_EndOfHistoryTransferType_value = map[string]int32{
		"COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY":           0,
		"COMPLETE_AND_NO_MORE_MESSAGE_REMAIN_ON_PRIMARY":         1,
		"COMPLETE_ON_DEMAND_SYNC_BUT_MORE_MSG_REMAIN_ON_PRIMARY": 2,
	}
)

func (x Conversation_EndOfHistoryTransferType) Enum() *Conversation_EndOfHistoryTransferType {
	p := new(Conversation_EndOfHistoryTransferType)
	*p = x
	return p
}

func (x Conversation_EndOfHistoryTransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Conversation_EndOfHistoryTransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[26].Descriptor()
}

func (Conversation_EndOfHistoryTransferType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[26]
}

func (x Conversation_EndOfHistoryTransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Conversation_EndOfHistoryTransferType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Conversation_EndOfHistoryTransferType(num)
	return nil
}

// Deprecated: Use Conversation_EndOfHistoryTransferType.Descriptor instead.
func (Conversation_EndOfHistoryTransferType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{21, 0}
}

type DeviceProps_PlatformType int32

const (
	DeviceProps_UNKNOWN           DeviceProps_PlatformType = 0
	DeviceProps_CHROME            DeviceProps_PlatformType = 1
	DeviceProps_FIREFOX           DeviceProps_PlatformType = 2
	DeviceProps_IE                DeviceProps_PlatformType = 3
	DeviceProps_OPERA             DeviceProps_PlatformType = 4
	DeviceProps_SAFARI            DeviceProps_PlatformType = 5
	DeviceProps_EDGE              DeviceProps_PlatformType = 6
	DeviceProps_DESKTOP           DeviceProps_PlatformType = 7
	DeviceProps_IPAD              DeviceProps_PlatformType = 8
	DeviceProps_ANDROID_TABLET    DeviceProps_PlatformType = 9
	DeviceProps_OHANA             DeviceProps_PlatformType = 10
	DeviceProps_ALOHA             DeviceProps_PlatformType = 11
	DeviceProps_CATALINA          DeviceProps_PlatformType = 12
	DeviceProps_TCL_TV            DeviceProps_PlatformType = 13
	DeviceProps_IOS_PHONE         DeviceProps_PlatformType = 14
	DeviceProps_IOS_CATALYST      DeviceProps_PlatformType = 15
	DeviceProps_ANDROID_PHONE     DeviceProps_PlatformType = 16
	DeviceProps_ANDROID_AMBIGUOUS DeviceProps_PlatformType = 17
	DeviceProps_WEAR_OS           DeviceProps_PlatformType = 18
	DeviceProps_AR_WRIST          DeviceProps_PlatformType = 19
	DeviceProps_AR_DEVICE         DeviceProps_PlatformType = 20
	DeviceProps_UWP               DeviceProps_PlatformType = 21
	DeviceProps_VR                DeviceProps_PlatformType = 22
)

// Enum value maps for DeviceProps_PlatformType.
var (
	DeviceProps_PlatformType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "CHROME",
		2:  "FIREFOX",
		3:  "IE",
		4:  "OPERA",
		5:  "SAFARI",
		6:  "EDGE",
		7:  "DESKTOP",
		8:  "IPAD",
		9:  "ANDROID_TABLET",
		10: "OHANA",
		11: "ALOHA",
		12: "CATALINA",
		13: "TCL_TV",
		14: "IOS_PHONE",
		15: "IOS_CATALYST",
		16: "ANDROID_PHONE",
		17: "ANDROID_AMBIGUOUS",
		18: "WEAR_OS",
		19: "AR_WRIST",
		20: "AR_DEVICE",
		21: "UWP",
		22: "VR",
	}
	DeviceProps_PlatformType_value = map[string]int32{
		"UNKNOWN":           0,
		"CHROME":            1,
		"FIREFOX":           2,
		"IE":                3,
		"OPERA":             4,
		"SAFARI":            5,
		"EDGE":              6,
		"DESKTOP":           7,
		"IPAD":              8,
		"ANDROID_TABLET":    9,
		"OHANA":             10,
		"ALOHA":             11,
		"CATALINA":          12,
		"TCL_TV":            13,
		"IOS_PHONE":         14,
		"IOS_CATALYST":      15,
		"ANDROID_PHONE":     16,
		"ANDROID_AMBIGUOUS": 17,
		"WEAR_OS":           18,
		"AR_WRIST":          19,
		"AR_DEVICE":         20,
		"UWP":               21,
		"VR":                22,
	}
)

func (x DeviceProps_PlatformType) Enum() *DeviceProps_PlatformType {
	p := new(DeviceProps_PlatformType)
	*p = x
	return p
}

func (x DeviceProps_PlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceProps_PlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[27].Descriptor()
}

func (DeviceProps_PlatformType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[27]
}

func (x DeviceProps_PlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceProps_PlatformType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceProps_PlatformType(num)
	return nil
}

// Deprecated: Use DeviceProps_PlatformType.Descriptor instead.
func (DeviceProps_PlatformType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{24, 0}
}

type DisappearingMode_Initiator int32

const (
	DisappearingMode_CHANGED_IN_CHAT        DisappearingMode_Initiator = 0
	DisappearingMode_INITIATED_BY_ME        DisappearingMode_Initiator = 1
	DisappearingMode_INITIATED_BY_OTHER     DisappearingMode_Initiator = 2
	DisappearingMode_BIZ_UPGRADE_FB_HOSTING DisappearingMode_Initiator = 3
)

// Enum value maps for DisappearingMode_Initiator.
var (
	DisappearingMode_Initiator_name = map[int32]string{
		0: "CHANGED_IN_CHAT",
		1: "INITIATED_BY_ME",
		2: "INITIATED_BY_OTHER",
		3: "BIZ_UPGRADE_FB_HOSTING",
	}
	DisappearingMode_Initiator_value = map[string]int32{
		"CHANGED_IN_CHAT":        0,
		"INITIATED_BY_ME":        1,
		"INITIATED_BY_OTHER":     2,
		"BIZ_UPGRADE_FB_HOSTING": 3,
	}
)

func (x DisappearingMode_Initiator) Enum() *DisappearingMode_Initiator {
	p := new(DisappearingMode_Initiator)
	*p = x
	return p
}

func (x DisappearingMode_Initiator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisappearingMode_Initiator) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[28].Descriptor()
}

func (DisappearingMode_Initiator) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[28]
}

func (x DisappearingMode_Initiator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DisappearingMode_Initiator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DisappearingMode_Initiator(num)
	return nil
}

// Deprecated: Use DisappearingMode_Initiator.Descriptor instead.
func (DisappearingMode_Initiator) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{25, 0}
}

type DisappearingMode_Trigger int32

const (
	DisappearingMode_UNKNOWN                 DisappearingMode_Trigger = 0
	DisappearingMode_CHAT_SETTING            DisappearingMode_Trigger = 1
	DisappearingMode_ACCOUNT_SETTING         DisappearingMode_Trigger = 2
	DisappearingMode_BULK_CHANGE             DisappearingMode_Trigger = 3
	DisappearingMode_BIZ_SUPPORTS_FB_HOSTING DisappearingMode_Trigger = 4
)

// Enum value maps for DisappearingMode_Trigger.
var (
	DisappearingMode_Trigger_name = map[int32]string{
		0: "UNKNOWN",
		1: "CHAT_SETTING",
		2: "ACCOUNT_SETTING",
		3: "BULK_CHANGE",
		4: "BIZ_SUPPORTS_FB_HOSTING",
	}
	DisappearingMode_Trigger_value = map[string]int32{
		"UNKNOWN":                 0,
		"CHAT_SETTING":            1,
		"ACCOUNT_SETTING":         2,
		"BULK_CHANGE":             3,
		"BIZ_SUPPORTS_FB_HOSTING": 4,
	}
)

func (x DisappearingMode_Trigger) Enum() *DisappearingMode_Trigger {
	p := new(DisappearingMode_Trigger)
	*p = x
	return p
}

func (x DisappearingMode_Trigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisappearingMode_Trigger) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[29].Descriptor()
}

func (DisappearingMode_Trigger) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[29]
}

func (x DisappearingMode_Trigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DisappearingMode_Trigger) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DisappearingMode_Trigger(num)
	return nil
}

// Deprecated: Use DisappearingMode_Trigger.Descriptor instead.
func (DisappearingMode_Trigger) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{25, 1}
}

type GroupParticipant_Rank int32

const (
	GroupParticipant_REGULAR    GroupParticipant_Rank = 0
	GroupParticipant_ADMIN      GroupParticipant_Rank = 1
	GroupParticipant_SUPERADMIN GroupParticipant_Rank = 2
)

// Enum value maps for GroupParticipant_Rank.
var (
	GroupParticipant_Rank_name = map[int32]string{
		0: "REGULAR",
		1: "ADMIN",
		2: "SUPERADMIN",
	}
	GroupParticipant_Rank_value = map[string]int32{
		"REGULAR":    0,
		"ADMIN":      1,
		"SUPERADMIN": 2,
	}
)

func (x GroupParticipant_Rank) Enum() *GroupParticipant_Rank {
	p := new(GroupParticipant_Rank)
	*p = x
	return p
}

func (x GroupParticipant_Rank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupParticipant_Rank) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[30].Descriptor()
}

func (GroupParticipant_Rank) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[30]
}

func (x GroupParticipant_Rank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupParticipant_Rank) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupParticipant_Rank(num)
	return nil
}

// Deprecated: Use GroupParticipant_Rank.Descriptor instead.
func (GroupParticipant_Rank) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{32, 0}
}

type HistorySync_BotAIWaitListState int32

const (
	HistorySync_IN_WAITLIST  HistorySync_BotAIWaitListState = 0
	HistorySync_AI_AVAILABLE HistorySync_BotAIWaitListState = 1
)

// Enum value maps for HistorySync_BotAIWaitListState.
var (
	HistorySync_BotAIWaitListState_name = map[int32]string{
		0: "IN_WAITLIST",
		1: "AI_AVAILABLE",
	}
	HistorySync_BotAIWaitListState_value = map[string]int32{
		"IN_WAITLIST":  0,
		"AI_AVAILABLE": 1,
	}
)

func (x HistorySync_BotAIWaitListState) Enum() *HistorySync_BotAIWaitListState {
	p := new(HistorySync_BotAIWaitListState)
	*p = x
	return p
}

func (x HistorySync_BotAIWaitListState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HistorySync_BotAIWaitListState) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[31].Descriptor()
}

func (HistorySync_BotAIWaitListState) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[31]
}

func (x HistorySync_BotAIWaitListState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HistorySync_BotAIWaitListState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HistorySync_BotAIWaitListState(num)
	return nil
}

// Deprecated: Use HistorySync_BotAIWaitListState.Descriptor instead.
func (HistorySync_BotAIWaitListState) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{34, 0}
}

type HistorySync_HistorySyncType int32

const (
	HistorySync_INITIAL_BOOTSTRAP HistorySync_HistorySyncType = 0
	HistorySync_INITIAL_STATUS_V3 HistorySync_HistorySyncType = 1
	HistorySync_FULL              HistorySync_HistorySyncType = 2
	HistorySync_RECENT            HistorySync_HistorySyncType = 3
	HistorySync_PUSH_NAME         HistorySync_HistorySyncType = 4
	HistorySync_NON_BLOCKING_DATA HistorySync_HistorySyncType = 5
	HistorySync_ON_DEMAND         HistorySync_HistorySyncType = 6
)

// Enum value maps for HistorySync_HistorySyncType.
var (
	HistorySync_HistorySyncType_name = map[int32]string{
		0: "INITIAL_BOOTSTRAP",
		1: "INITIAL_STATUS_V3",
		2: "FULL",
		3: "RECENT",
		4: "PUSH_NAME",
		5: "NON_BLOCKING_DATA",
		6: "ON_DEMAND",
	}
	HistorySync_HistorySyncType_value = map[string]int32{
		"INITIAL_BOOTSTRAP": 0,
		"INITIAL_STATUS_V3": 1,
		"FULL":              2,
		"RECENT":            3,
		"PUSH_NAME":         4,
		"NON_BLOCKING_DATA": 5,
		"ON_DEMAND":         6,
	}
)

func (x HistorySync_HistorySyncType) Enum() *HistorySync_HistorySyncType {
	p := new(HistorySync_HistorySyncType)
	*p = x
	return p
}

func (x HistorySync_HistorySyncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HistorySync_HistorySyncType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[32].Descriptor()
}

func (HistorySync_HistorySyncType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[32]
}

func (x HistorySync_HistorySyncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HistorySync_HistorySyncType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HistorySync_HistorySyncType(num)
	return nil
}

// Deprecated: Use HistorySync_HistorySyncType.Descriptor instead.
func (HistorySync_HistorySyncType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{34, 1}
}

type HydratedTemplateButton_HydratedURLButton_WebviewPresentationType int32

const (
	HydratedTemplateButton_HydratedURLButton_FULL    HydratedTemplateButton_HydratedURLButton_WebviewPresentationType = 1
	HydratedTemplateButton_HydratedURLButton_TALL    HydratedTemplateButton_HydratedURLButton_WebviewPresentationType = 2
	HydratedTemplateButton_HydratedURLButton_COMPACT HydratedTemplateButton_HydratedURLButton_WebviewPresentationType = 3
)

// Enum value maps for HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.
var (
	HydratedTemplateButton_HydratedURLButton_WebviewPresentationType_name = map[int32]string{
		1: "FULL",
		2: "TALL",
		3: "COMPACT",
	}
	HydratedTemplateButton_HydratedURLButton_WebviewPresentationType_value = map[string]int32{
		"FULL":    1,
		"TALL":    2,
		"COMPACT": 3,
	}
)

func (x HydratedTemplateButton_HydratedURLButton_WebviewPresentationType) Enum() *HydratedTemplateButton_HydratedURLButton_WebviewPresentationType {
	p := new(HydratedTemplateButton_HydratedURLButton_WebviewPresentationType)
	*p = x
	return p
}

func (x HydratedTemplateButton_HydratedURLButton_WebviewPresentationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HydratedTemplateButton_HydratedURLButton_WebviewPresentationType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[33].Descriptor()
}

func (HydratedTemplateButton_HydratedURLButton_WebviewPresentationType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[33]
}

func (x HydratedTemplateButton_HydratedURLButton_WebviewPresentationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HydratedTemplateButton_HydratedURLButton_WebviewPresentationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HydratedTemplateButton_HydratedURLButton_WebviewPresentationType(num)
	return nil
}

// Deprecated: Use HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.Descriptor instead.
func (HydratedTemplateButton_HydratedURLButton_WebviewPresentationType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{36, 2, 0}
}

type MediaRetryNotification_ResultType int32

const (
	MediaRetryNotification_GENERAL_ERROR    MediaRetryNotification_ResultType = 0
	MediaRetryNotification_SUCCESS          MediaRetryNotification_ResultType = 1
	MediaRetryNotification_NOT_FOUND        MediaRetryNotification_ResultType = 2
	MediaRetryNotification_DECRYPTION_ERROR MediaRetryNotification_ResultType = 3
)

// Enum value maps for MediaRetryNotification_ResultType.
var (
	MediaRetryNotification_ResultType_name = map[int32]string{
		0: "GENERAL_ERROR",
		1: "SUCCESS",
		2: "NOT_FOUND",
		3: "DECRYPTION_ERROR",
	}
	MediaRetryNotification_ResultType_value = map[string]int32{
		"GENERAL_ERROR":    0,
		"SUCCESS":          1,
		"NOT_FOUND":        2,
		"DECRYPTION_ERROR": 3,
	}
)

func (x MediaRetryNotification_ResultType) Enum() *MediaRetryNotification_ResultType {
	p := new(MediaRetryNotification_ResultType)
	*p = x
	return p
}

func (x MediaRetryNotification_ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaRetryNotification_ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[34].Descriptor()
}

func (MediaRetryNotification_ResultType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[34]
}

func (x MediaRetryNotification_ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MediaRetryNotification_ResultType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MediaRetryNotification_ResultType(num)
	return nil
}

// Deprecated: Use MediaRetryNotification_ResultType.Descriptor instead.
func (MediaRetryNotification_ResultType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{47, 0}
}

type Message_PeerDataOperationRequestType int32

const (
	Message_UPLOAD_STICKER                Message_PeerDataOperationRequestType = 0
	Message_SEND_RECENT_STICKER_BOOTSTRAP Message_PeerDataOperationRequestType = 1
	Message_GENERATE_LINK_PREVIEW         Message_PeerDataOperationRequestType = 2
	Message_HISTORY_SYNC_ON_DEMAND        Message_PeerDataOperationRequestType = 3
	Message_PLACEHOLDER_MESSAGE_RESEND    Message_PeerDataOperationRequestType = 4
)

// Enum value maps for Message_PeerDataOperationRequestType.
var (
	Message_PeerDataOperationRequestType_name = map[int32]string{
		0: "UPLOAD_STICKER",
		1: "SEND_RECENT_STICKER_BOOTSTRAP",
		2: "GENERATE_LINK_PREVIEW",
		3: "HISTORY_SYNC_ON_DEMAND",
		4: "PLACEHOLDER_MESSAGE_RESEND",
	}
	Message_PeerDataOperationRequestType_value = map[string]int32{
		"UPLOAD_STICKER":                0,
		"SEND_RECENT_STICKER_BOOTSTRAP": 1,
		"GENERATE_LINK_PREVIEW":         2,
		"HISTORY_SYNC_ON_DEMAND":        3,
		"PLACEHOLDER_MESSAGE_RESEND":    4,
	}
)

func (x Message_PeerDataOperationRequestType) Enum() *Message_PeerDataOperationRequestType {
	p := new(Message_PeerDataOperationRequestType)
	*p = x
	return p
}

func (x Message_PeerDataOperationRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_PeerDataOperationRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[35].Descriptor()
}

func (Message_PeerDataOperationRequestType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[35]
}

func (x Message_PeerDataOperationRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_PeerDataOperationRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_PeerDataOperationRequestType(num)
	return nil
}

// Deprecated: Use Message_PeerDataOperationRequestType.Descriptor instead.
func (Message_PeerDataOperationRequestType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 0}
}

type Message_BCallMessage_MediaType int32

const (
	Message_BCallMessage_UNKNOWN Message_BCallMessage_MediaType = 0
	Message_BCallMessage_AUDIO   Message_BCallMessage_MediaType = 1
	Message_BCallMessage_VIDEO   Message_BCallMessage_MediaType = 2
)

// Enum value maps for Message_BCallMessage_MediaType.
var (
	Message_BCallMessage_MediaType_name = map[int32]string{
		0: "UNKNOWN",
		1: "AUDIO",
		2: "VIDEO",
	}
	Message_BCallMessage_MediaType_value = map[string]int32{
		"UNKNOWN": 0,
		"AUDIO":   1,
		"VIDEO":   2,
	}
)

func (x Message_BCallMessage_MediaType) Enum() *Message_BCallMessage_MediaType {
	p := new(Message_BCallMessage_MediaType)
	*p = x
	return p
}

func (x Message_BCallMessage_MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_BCallMessage_MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[36].Descriptor()
}

func (Message_BCallMessage_MediaType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[36]
}

func (x Message_BCallMessage_MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_BCallMessage_MediaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_BCallMessage_MediaType(num)
	return nil
}

// Deprecated: Use Message_BCallMessage_MediaType.Descriptor instead.
func (Message_BCallMessage_MediaType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 8, 0}
}

type Message_BotFeedbackMessage_BotFeedbackKind int32

const (
	Message_BotFeedbackMessage_BOT_FEEDBACK_POSITIVE                        Message_BotFeedbackMessage_BotFeedbackKind = 0
	Message_BotFeedbackMessage_BOT_FEEDBACK_NEGATIVE_GENERIC                Message_BotFeedbackMessage_BotFeedbackKind = 1
	Message_BotFeedbackMessage_BOT_FEEDBACK_NEGATIVE_HELPFUL                Message_BotFeedbackMessage_BotFeedbackKind = 2
	Message_BotFeedbackMessage_BOT_FEEDBACK_NEGATIVE_INTERESTING            Message_BotFeedbackMessage_BotFeedbackKind = 3
	Message_BotFeedbackMessage_BOT_FEEDBACK_NEGATIVE_ACCURATE               Message_BotFeedbackMessage_BotFeedbackKind = 4
	Message_BotFeedbackMessage_BOT_FEEDBACK_NEGATIVE_SAFE                   Message_BotFeedbackMessage_BotFeedbackKind = 5
	Message_BotFeedbackMessage_BOT_FEEDBACK_NEGATIVE_OTHER                  Message_BotFeedbackMessage_BotFeedbackKind = 6
	Message_BotFeedbackMessage_BOT_FEEDBACK_NEGATIVE_REFUSED                Message_BotFeedbackMessage_BotFeedbackKind = 7
	Message_BotFeedbackMessage_BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING Message_BotFeedbackMessage_BotFeedbackKind = 8
	Message_BotFeedbackMessage_BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT   Message_BotFeedbackMessage_BotFeedbackKind = 9
)

// Enum value maps for Message_BotFeedbackMessage_BotFeedbackKind.
var (
	Message_BotFeedbackMessage_BotFeedbackKind_name = map[int32]string{
		0: "BOT_FEEDBACK_POSITIVE",
		1: "BOT_FEEDBACK_NEGATIVE_GENERIC",
		2: "BOT_FEEDBACK_NEGATIVE_HELPFUL",
		3: "BOT_FEEDBACK_NEGATIVE_INTERESTING",
		4: "BOT_FEEDBACK_NEGATIVE_ACCURATE",
		5: "BOT_FEEDBACK_NEGATIVE_SAFE",
		6: "BOT_FEEDBACK_NEGATIVE_OTHER",
		7: "BOT_FEEDBACK_NEGATIVE_REFUSED",
		8: "BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING",
		9: "BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT",
	}
	Message_BotFeedbackMessage_BotFeedbackKind_value = map[string]int32{
		"BOT_FEEDBACK_POSITIVE":                        0,
		"BOT_FEEDBACK_NEGATIVE_GENERIC":                1,
		"BOT_FEEDBACK_NEGATIVE_HELPFUL":                2,
		"BOT_FEEDBACK_NEGATIVE_INTERESTING":            3,
		"BOT_FEEDBACK_NEGATIVE_ACCURATE":               4,
		"BOT_FEEDBACK_NEGATIVE_SAFE":                   5,
		"BOT_FEEDBACK_NEGATIVE_OTHER":                  6,
		"BOT_FEEDBACK_NEGATIVE_REFUSED":                7,
		"BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING": 8,
		"BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT":   9,
	}
)

func (x Message_BotFeedbackMessage_BotFeedbackKind) Enum() *Message_BotFeedbackMessage_BotFeedbackKind {
	p := new(Message_BotFeedbackMessage_BotFeedbackKind)
	*p = x
	return p
}

func (x Message_BotFeedbackMessage_BotFeedbackKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_BotFeedbackMessage_BotFeedbackKind) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[37].Descriptor()
}

func (Message_BotFeedbackMessage_BotFeedbackKind) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[37]
}

func (x Message_BotFeedbackMessage_BotFeedbackKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_BotFeedbackMessage_BotFeedbackKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_BotFeedbackMessage_BotFeedbackKind(num)
	return nil
}

// Deprecated: Use Message_BotFeedbackMessage_BotFeedbackKind.Descriptor instead.
func (Message_BotFeedbackMessage_BotFeedbackKind) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 9, 0}
}

type Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative int32

const (
	Message_BotFeedbackMessage_BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC                Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative = 1
	Message_BotFeedbackMessage_BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL                Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative = 2
	Message_BotFeedbackMessage_BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING            Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative = 4
	Message_BotFeedbackMessage_BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE               Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative = 8
	Message_BotFeedbackMessage_BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE                   Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative = 16
	Message_BotFeedbackMessage_BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER                  Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative = 32
	Message_BotFeedbackMessage_BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED                Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative = 64
	Message_BotFeedbackMessage_BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative = 128
	Message_BotFeedbackMessage_BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT   Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative = 256
)

// Enum value maps for Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.
var (
	Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative_name = map[int32]string{
		1:   "BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC",
		2:   "BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL",
		4:   "BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING",
		8:   "BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE",
		16:  "BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE",
		32:  "BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER",
		64:  "BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED",
		128: "BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING",
		256: "BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT",
	}
	Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative_value = map[string]int32{
		"BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC":                1,
		"BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL":                2,
		"BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING":            4,
		"BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE":               8,
		"BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE":                   16,
		"BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER":                  32,
		"BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED":                64,
		"BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING": 128,
		"BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT":   256,
	}
)

func (x Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative) Enum() *Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative {
	p := new(Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative)
	*p = x
	return p
}

func (x Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[38].Descriptor()
}

func (Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[38]
}

func (x Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative(num)
	return nil
}

// Deprecated: Use Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.Descriptor instead.
func (Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 9, 1}
}

type Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive int32

const (
	Message_BotFeedbackMessage_BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive = 1
)

// Enum value maps for Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive.
var (
	Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive_name = map[int32]string{
		1: "BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC",
	}
	Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive_value = map[string]int32{
		"BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC": 1,
	}
)

func (x Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive) Enum() *Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive {
	p := new(Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive)
	*p = x
	return p
}

func (x Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[39].Descriptor()
}

func (Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[39]
}

func (x Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive(num)
	return nil
}

// Deprecated: Use Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive.Descriptor instead.
func (Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 9, 2}
}

type Message_ButtonsMessage_HeaderType int32

const (
	Message_ButtonsMessage_UNKNOWN  Message_ButtonsMessage_HeaderType = 0
	Message_ButtonsMessage_EMPTY    Message_ButtonsMessage_HeaderType = 1
	Message_ButtonsMessage_TEXT     Message_ButtonsMessage_HeaderType = 2
	Message_ButtonsMessage_DOCUMENT Message_ButtonsMessage_HeaderType = 3
	Message_ButtonsMessage_IMAGE    Message_ButtonsMessage_HeaderType = 4
	Message_ButtonsMessage_VIDEO    Message_ButtonsMessage_HeaderType = 5
	Message_ButtonsMessage_LOCATION Message_ButtonsMessage_HeaderType = 6
)

// Enum value maps for Message_ButtonsMessage_HeaderType.
var (
	Message_ButtonsMessage_HeaderType_name = map[int32]string{
		0: "UNKNOWN",
		1: "EMPTY",
		2: "TEXT",
		3: "DOCUMENT",
		4: "IMAGE",
		5: "VIDEO",
		6: "LOCATION",
	}
	Message_ButtonsMessage_HeaderType_value = map[string]int32{
		"UNKNOWN":  0,
		"EMPTY":    1,
		"TEXT":     2,
		"DOCUMENT": 3,
		"IMAGE":    4,
		"VIDEO":    5,
		"LOCATION": 6,
	}
)

func (x Message_ButtonsMessage_HeaderType) Enum() *Message_ButtonsMessage_HeaderType {
	p := new(Message_ButtonsMessage_HeaderType)
	*p = x
	return p
}

func (x Message_ButtonsMessage_HeaderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ButtonsMessage_HeaderType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[40].Descriptor()
}

func (Message_ButtonsMessage_HeaderType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[40]
}

func (x Message_ButtonsMessage_HeaderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ButtonsMessage_HeaderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ButtonsMessage_HeaderType(num)
	return nil
}

// Deprecated: Use Message_ButtonsMessage_HeaderType.Descriptor instead.
func (Message_ButtonsMessage_HeaderType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 10, 0}
}

type Message_ButtonsMessage_Button_Type int32

const (
	Message_ButtonsMessage_Button_UNKNOWN     Message_ButtonsMessage_Button_Type = 0
	Message_ButtonsMessage_Button_RESPONSE    Message_ButtonsMessage_Button_Type = 1
	Message_ButtonsMessage_Button_NATIVE_FLOW Message_ButtonsMessage_Button_Type = 2
)

// Enum value maps for Message_ButtonsMessage_Button_Type.
var (
	Message_ButtonsMessage_Button_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "RESPONSE",
		2: "NATIVE_FLOW",
	}
	Message_ButtonsMessage_Button_Type_value = map[string]int32{
		"UNKNOWN":     0,
		"RESPONSE":    1,
		"NATIVE_FLOW": 2,
	}
)

func (x Message_ButtonsMessage_Button_Type) Enum() *Message_ButtonsMessage_Button_Type {
	p := new(Message_ButtonsMessage_Button_Type)
	*p = x
	return p
}

func (x Message_ButtonsMessage_Button_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ButtonsMessage_Button_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[41].Descriptor()
}

func (Message_ButtonsMessage_Button_Type) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[41]
}

func (x Message_ButtonsMessage_Button_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ButtonsMessage_Button_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ButtonsMessage_Button_Type(num)
	return nil
}

// Deprecated: Use Message_ButtonsMessage_Button_Type.Descriptor instead.
func (Message_ButtonsMessage_Button_Type) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 10, 0, 0}
}

type Message_ButtonsResponseMessage_Type int32

const (
	Message_ButtonsResponseMessage_UNKNOWN      Message_ButtonsResponseMessage_Type = 0
	Message_ButtonsResponseMessage_DISPLAY_TEXT Message_ButtonsResponseMessage_Type = 1
)

// Enum value maps for Message_ButtonsResponseMessage_Type.
var (
	Message_ButtonsResponseMessage_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "DISPLAY_TEXT",
	}
	Message_ButtonsResponseMessage_Type_value = map[string]int32{
		"UNKNOWN":      0,
		"DISPLAY_TEXT": 1,
	}
)

func (x Message_ButtonsResponseMessage_Type) Enum() *Message_ButtonsResponseMessage_Type {
	p := new(Message_ButtonsResponseMessage_Type)
	*p = x
	return p
}

func (x Message_ButtonsResponseMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ButtonsResponseMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[42].Descriptor()
}

func (Message_ButtonsResponseMessage_Type) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[42]
}

func (x Message_ButtonsResponseMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ButtonsResponseMessage_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ButtonsResponseMessage_Type(num)
	return nil
}

// Deprecated: Use Message_ButtonsResponseMessage_Type.Descriptor instead.
func (Message_ButtonsResponseMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 11, 0}
}

type Message_CallLogMessage_CallOutcome int32

const (
	Message_CallLogMessage_CONNECTED               Message_CallLogMessage_CallOutcome = 0
	Message_CallLogMessage_MISSED                  Message_CallLogMessage_CallOutcome = 1
	Message_CallLogMessage_FAILED                  Message_CallLogMessage_CallOutcome = 2
	Message_CallLogMessage_REJECTED                Message_CallLogMessage_CallOutcome = 3
	Message_CallLogMessage_ACCEPTED_ELSEWHERE      Message_CallLogMessage_CallOutcome = 4
	Message_CallLogMessage_ONGOING                 Message_CallLogMessage_CallOutcome = 5
	Message_CallLogMessage_SILENCED_BY_DND         Message_CallLogMessage_CallOutcome = 6
	Message_CallLogMessage_SILENCED_UNKNOWN_CALLER Message_CallLogMessage_CallOutcome = 7
)

// Enum value maps for Message_CallLogMessage_CallOutcome.
var (
	Message_CallLogMessage_CallOutcome_name = map[int32]string{
		0: "CONNECTED",
		1: "MISSED",
		2: "FAILED",
		3: "REJECTED",
		4: "ACCEPTED_ELSEWHERE",
		5: "ONGOING",
		6: "SILENCED_BY_DND",
		7: "SILENCED_UNKNOWN_CALLER",
	}
	Message_CallLogMessage_CallOutcome_value = map[string]int32{
		"CONNECTED":               0,
		"MISSED":                  1,
		"FAILED":                  2,
		"REJECTED":                3,
		"ACCEPTED_ELSEWHERE":      4,
		"ONGOING":                 5,
		"SILENCED_BY_DND":         6,
		"SILENCED_UNKNOWN_CALLER": 7,
	}
)

func (x Message_CallLogMessage_CallOutcome) Enum() *Message_CallLogMessage_CallOutcome {
	p := new(Message_CallLogMessage_CallOutcome)
	*p = x
	return p
}

func (x Message_CallLogMessage_CallOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_CallLogMessage_CallOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[43].Descriptor()
}

func (Message_CallLogMessage_CallOutcome) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[43]
}

func (x Message_CallLogMessage_CallOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_CallLogMessage_CallOutcome) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_CallLogMessage_CallOutcome(num)
	return nil
}

// Deprecated: Use Message_CallLogMessage_CallOutcome.Descriptor instead.
func (Message_CallLogMessage_CallOutcome) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 13, 0}
}

type Message_CallLogMessage_CallType int32

const (
	Message_CallLogMessage_REGULAR        Message_CallLogMessage_CallType = 0
	Message_CallLogMessage_SCHEDULED_CALL Message_CallLogMessage_CallType = 1
	Message_CallLogMessage_VOICE_CHAT     Message_CallLogMessage_CallType = 2
)

// Enum value maps for Message_CallLogMessage_CallType.
var (
	Message_CallLogMessage_CallType_name = map[int32]string{
		0: "REGULAR",
		1: "SCHEDULED_CALL",
		2: "VOICE_CHAT",
	}
	Message_CallLogMessage_CallType_value = map[string]int32{
		"REGULAR":        0,
		"SCHEDULED_CALL": 1,
		"VOICE_CHAT":     2,
	}
)

func (x Message_CallLogMessage_CallType) Enum() *Message_CallLogMessage_CallType {
	p := new(Message_CallLogMessage_CallType)
	*p = x
	return p
}

func (x Message_CallLogMessage_CallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_CallLogMessage_CallType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[44].Descriptor()
}

func (Message_CallLogMessage_CallType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[44]
}

func (x Message_CallLogMessage_CallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_CallLogMessage_CallType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_CallLogMessage_CallType(num)
	return nil
}

// Deprecated: Use Message_CallLogMessage_CallType.Descriptor instead.
func (Message_CallLogMessage_CallType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 13, 1}
}

type Message_EventResponseMessage_EventResponseType int32

const (
	Message_EventResponseMessage_UNKNOWN   Message_EventResponseMessage_EventResponseType = 0
	Message_EventResponseMessage_GOING     Message_EventResponseMessage_EventResponseType = 1
	Message_EventResponseMessage_NOT_GOING Message_EventResponseMessage_EventResponseType = 2
)

// Enum value maps for Message_EventResponseMessage_EventResponseType.
var (
	Message_EventResponseMessage_EventResponseType_name = map[int32]string{
		0: "UNKNOWN",
		1: "GOING",
		2: "NOT_GOING",
	}
	Message_EventResponseMessage_EventResponseType_value = map[string]int32{
		"UNKNOWN":   0,
		"GOING":     1,
		"NOT_GOING": 2,
	}
)

func (x Message_EventResponseMessage_EventResponseType) Enum() *Message_EventResponseMessage_EventResponseType {
	p := new(Message_EventResponseMessage_EventResponseType)
	*p = x
	return p
}

func (x Message_EventResponseMessage_EventResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_EventResponseMessage_EventResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[45].Descriptor()
}

func (Message_EventResponseMessage_EventResponseType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[45]
}

func (x Message_EventResponseMessage_EventResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_EventResponseMessage_EventResponseType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_EventResponseMessage_EventResponseType(num)
	return nil
}

// Deprecated: Use Message_EventResponseMessage_EventResponseType.Descriptor instead.
func (Message_EventResponseMessage_EventResponseType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 27, 0}
}

type Message_ExtendedTextMessage_FontType int32

const (
	Message_ExtendedTextMessage_SYSTEM                Message_ExtendedTextMessage_FontType = 0
	Message_ExtendedTextMessage_SYSTEM_TEXT           Message_ExtendedTextMessage_FontType = 1
	Message_ExtendedTextMessage_FB_SCRIPT             Message_ExtendedTextMessage_FontType = 2
	Message_ExtendedTextMessage_SYSTEM_BOLD           Message_ExtendedTextMessage_FontType = 6
	Message_ExtendedTextMessage_MORNINGBREEZE_REGULAR Message_ExtendedTextMessage_FontType = 7
	Message_ExtendedTextMessage_CALISTOGA_REGULAR     Message_ExtendedTextMessage_FontType = 8
	Message_ExtendedTextMessage_EXO2_EXTRABOLD        Message_ExtendedTextMessage_FontType = 9
	Message_ExtendedTextMessage_COURIERPRIME_BOLD     Message_ExtendedTextMessage_FontType = 10
)

// Enum value maps for Message_ExtendedTextMessage_FontType.
var (
	Message_ExtendedTextMessage_FontType_name = map[int32]string{
		0:  "SYSTEM",
		1:  "SYSTEM_TEXT",
		2:  "FB_SCRIPT",
		6:  "SYSTEM_BOLD",
		7:  "MORNINGBREEZE_REGULAR",
		8:  "CALISTOGA_REGULAR",
		9:  "EXO2_EXTRABOLD",
		10: "COURIERPRIME_BOLD",
	}
	Message_ExtendedTextMessage_FontType_value = map[string]int32{
		"SYSTEM":                0,
		"SYSTEM_TEXT":           1,
		"FB_SCRIPT":             2,
		"SYSTEM_BOLD":           6,
		"MORNINGBREEZE_REGULAR": 7,
		"CALISTOGA_REGULAR":     8,
		"EXO2_EXTRABOLD":        9,
		"COURIERPRIME_BOLD":     10,
	}
)

func (x Message_ExtendedTextMessage_FontType) Enum() *Message_ExtendedTextMessage_FontType {
	p := new(Message_ExtendedTextMessage_FontType)
	*p = x
	return p
}

func (x Message_ExtendedTextMessage_FontType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ExtendedTextMessage_FontType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[46].Descriptor()
}

func (Message_ExtendedTextMessage_FontType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[46]
}

func (x Message_ExtendedTextMessage_FontType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ExtendedTextMessage_FontType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ExtendedTextMessage_FontType(num)
	return nil
}

// Deprecated: Use Message_ExtendedTextMessage_FontType.Descriptor instead.
func (Message_ExtendedTextMessage_FontType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 29, 0}
}

type Message_ExtendedTextMessage_InviteLinkGroupType int32

const (
	Message_ExtendedTextMessage_DEFAULT     Message_ExtendedTextMessage_InviteLinkGroupType = 0
	Message_ExtendedTextMessage_PARENT      Message_ExtendedTextMessage_InviteLinkGroupType = 1
	Message_ExtendedTextMessage_SUB         Message_ExtendedTextMessage_InviteLinkGroupType = 2
	Message_ExtendedTextMessage_DEFAULT_SUB Message_ExtendedTextMessage_InviteLinkGroupType = 3
)

// Enum value maps for Message_ExtendedTextMessage_InviteLinkGroupType.
var (
	Message_ExtendedTextMessage_InviteLinkGroupType_name = map[int32]string{
		0: "DEFAULT",
		1: "PARENT",
		2: "SUB",
		3: "DEFAULT_SUB",
	}
	Message_ExtendedTextMessage_InviteLinkGroupType_value = map[string]int32{
		"DEFAULT":     0,
		"PARENT":      1,
		"SUB":         2,
		"DEFAULT_SUB": 3,
	}
)

func (x Message_ExtendedTextMessage_InviteLinkGroupType) Enum() *Message_ExtendedTextMessage_InviteLinkGroupType {
	p := new(Message_ExtendedTextMessage_InviteLinkGroupType)
	*p = x
	return p
}

func (x Message_ExtendedTextMessage_InviteLinkGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ExtendedTextMessage_InviteLinkGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[47].Descriptor()
}

func (Message_ExtendedTextMessage_InviteLinkGroupType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[47]
}

func (x Message_ExtendedTextMessage_InviteLinkGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ExtendedTextMessage_InviteLinkGroupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ExtendedTextMessage_InviteLinkGroupType(num)
	return nil
}

// Deprecated: Use Message_ExtendedTextMessage_InviteLinkGroupType.Descriptor instead.
func (Message_ExtendedTextMessage_InviteLinkGroupType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 29, 1}
}

type Message_ExtendedTextMessage_PreviewType int32

const (
	Message_ExtendedTextMessage_NONE        Message_ExtendedTextMessage_PreviewType = 0
	Message_ExtendedTextMessage_VIDEO       Message_ExtendedTextMessage_PreviewType = 1
	Message_ExtendedTextMessage_PLACEHOLDER Message_ExtendedTextMessage_PreviewType = 4
	Message_ExtendedTextMessage_IMAGE       Message_ExtendedTextMessage_PreviewType = 5
)

// Enum value maps for Message_ExtendedTextMessage_PreviewType.
var (
	Message_ExtendedTextMessage_PreviewType_name = map[int32]string{
		0: "NONE",
		1: "VIDEO",
		4: "PLACEHOLDER",
		5: "IMAGE",
	}
	Message_ExtendedTextMessage_PreviewType_value = map[string]int32{
		"NONE":        0,
		"VIDEO":       1,
		"PLACEHOLDER": 4,
		"IMAGE":       5,
	}
)

func (x Message_ExtendedTextMessage_PreviewType) Enum() *Message_ExtendedTextMessage_PreviewType {
	p := new(Message_ExtendedTextMessage_PreviewType)
	*p = x
	return p
}

func (x Message_ExtendedTextMessage_PreviewType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ExtendedTextMessage_PreviewType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[48].Descriptor()
}

func (Message_ExtendedTextMessage_PreviewType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[48]
}

func (x Message_ExtendedTextMessage_PreviewType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ExtendedTextMessage_PreviewType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ExtendedTextMessage_PreviewType(num)
	return nil
}

// Deprecated: Use Message_ExtendedTextMessage_PreviewType.Descriptor instead.
func (Message_ExtendedTextMessage_PreviewType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 29, 2}
}

type Message_GroupInviteMessage_GroupType int32

const (
	Message_GroupInviteMessage_DEFAULT Message_GroupInviteMessage_GroupType = 0
	Message_GroupInviteMessage_PARENT  Message_GroupInviteMessage_GroupType = 1
)

// Enum value maps for Message_GroupInviteMessage_GroupType.
var (
	Message_GroupInviteMessage_GroupType_name = map[int32]string{
		0: "DEFAULT",
		1: "PARENT",
	}
	Message_GroupInviteMessage_GroupType_value = map[string]int32{
		"DEFAULT": 0,
		"PARENT":  1,
	}
)

func (x Message_GroupInviteMessage_GroupType) Enum() *Message_GroupInviteMessage_GroupType {
	p := new(Message_GroupInviteMessage_GroupType)
	*p = x
	return p
}

func (x Message_GroupInviteMessage_GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_GroupInviteMessage_GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[49].Descriptor()
}

func (Message_GroupInviteMessage_GroupType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[49]
}

func (x Message_GroupInviteMessage_GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_GroupInviteMessage_GroupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_GroupInviteMessage_GroupType(num)
	return nil
}

// Deprecated: Use Message_GroupInviteMessage_GroupType.Descriptor instead.
func (Message_GroupInviteMessage_GroupType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 32, 0}
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType int32

const (
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_GREGORIAN   Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType = 1
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_SOLAR_HIJRI Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType = 2
)

// Enum value maps for Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType.
var (
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType_name = map[int32]string{
		1: "GREGORIAN",
		2: "SOLAR_HIJRI",
	}
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType_value = map[string]int32{
		"GREGORIAN":   1,
		"SOLAR_HIJRI": 2,
	}
)

func (x Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType) Enum() *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType {
	p := new(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType)
	*p = x
	return p
}

func (x Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[50].Descriptor()
}

func (Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[50]
}

func (x Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType(num)
	return nil
}

// Deprecated: Use Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType.Descriptor instead.
func (Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 33, 0, 1, 0, 0}
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType int32

const (
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_MONDAY    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType = 1
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_TUESDAY   Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType = 2
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_WEDNESDAY Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType = 3
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_THURSDAY  Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType = 4
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_FRIDAY    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType = 5
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_SATURDAY  Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType = 6
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_SUNDAY    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType = 7
)

// Enum value maps for Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType.
var (
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType_name = map[int32]string{
		1: "MONDAY",
		2: "TUESDAY",
		3: "WEDNESDAY",
		4: "THURSDAY",
		5: "FRIDAY",
		6: "SATURDAY",
		7: "SUNDAY",
	}
	Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType_value = map[string]int32{
		"MONDAY":    1,
		"TUESDAY":   2,
		"WEDNESDAY": 3,
		"THURSDAY":  4,
		"FRIDAY":    5,
		"SATURDAY":  6,
		"SUNDAY":    7,
	}
)

func (x Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType) Enum() *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType {
	p := new(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType)
	*p = x
	return p
}

func (x Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[51].Descriptor()
}

func (Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[51]
}

func (x Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType(num)
	return nil
}

// Deprecated: Use Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType.Descriptor instead.
func (Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 33, 0, 1, 0, 1}
}

type Message_HistorySyncNotification_HistorySyncType int32

const (
	Message_HistorySyncNotification_INITIAL_BOOTSTRAP Message_HistorySyncNotification_HistorySyncType = 0
	Message_HistorySyncNotification_INITIAL_STATUS_V3 Message_HistorySyncNotification_HistorySyncType = 1
	Message_HistorySyncNotification_FULL              Message_HistorySyncNotification_HistorySyncType = 2
	Message_HistorySyncNotification_RECENT            Message_HistorySyncNotification_HistorySyncType = 3
	Message_HistorySyncNotification_PUSH_NAME         Message_HistorySyncNotification_HistorySyncType = 4
	Message_HistorySyncNotification_NON_BLOCKING_DATA Message_HistorySyncNotification_HistorySyncType = 5
	Message_HistorySyncNotification_ON_DEMAND         Message_HistorySyncNotification_HistorySyncType = 6
)

// Enum value maps for Message_HistorySyncNotification_HistorySyncType.
var (
	Message_HistorySyncNotification_HistorySyncType_name = map[int32]string{
		0: "INITIAL_BOOTSTRAP",
		1: "INITIAL_STATUS_V3",
		2: "FULL",
		3: "RECENT",
		4: "PUSH_NAME",
		5: "NON_BLOCKING_DATA",
		6: "ON_DEMAND",
	}
	Message_HistorySyncNotification_HistorySyncType_value = map[string]int32{
		"INITIAL_BOOTSTRAP": 0,
		"INITIAL_STATUS_V3": 1,
		"FULL":              2,
		"RECENT":            3,
		"PUSH_NAME":         4,
		"NON_BLOCKING_DATA": 5,
		"ON_DEMAND":         6,
	}
)

func (x Message_HistorySyncNotification_HistorySyncType) Enum() *Message_HistorySyncNotification_HistorySyncType {
	p := new(Message_HistorySyncNotification_HistorySyncType)
	*p = x
	return p
}

func (x Message_HistorySyncNotification_HistorySyncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_HistorySyncNotification_HistorySyncType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[52].Descriptor()
}

func (Message_HistorySyncNotification_HistorySyncType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[52]
}

func (x Message_HistorySyncNotification_HistorySyncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_HistorySyncNotification_HistorySyncType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_HistorySyncNotification_HistorySyncType(num)
	return nil
}

// Deprecated: Use Message_HistorySyncNotification_HistorySyncType.Descriptor instead.
func (Message_HistorySyncNotification_HistorySyncType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 34, 0}
}

type Message_InteractiveMessage_ShopMessage_Surface int32

const (
	Message_InteractiveMessage_ShopMessage_UNKNOWN_SURFACE Message_InteractiveMessage_ShopMessage_Surface = 0
	Message_InteractiveMessage_ShopMessage_FB              Message_InteractiveMessage_ShopMessage_Surface = 1
	Message_InteractiveMessage_ShopMessage_IG              Message_InteractiveMessage_ShopMessage_Surface = 2
	Message_InteractiveMessage_ShopMessage_WA              Message_InteractiveMessage_ShopMessage_Surface = 3
)

// Enum value maps for Message_InteractiveMessage_ShopMessage_Surface.
var (
	Message_InteractiveMessage_ShopMessage_Surface_name = map[int32]string{
		0: "UNKNOWN_SURFACE",
		1: "FB",
		2: "IG",
		3: "WA",
	}
	Message_InteractiveMessage_ShopMessage_Surface_value = map[string]int32{
		"UNKNOWN_SURFACE": 0,
		"FB":              1,
		"IG":              2,
		"WA":              3,
	}
)

func (x Message_InteractiveMessage_ShopMessage_Surface) Enum() *Message_InteractiveMessage_ShopMessage_Surface {
	p := new(Message_InteractiveMessage_ShopMessage_Surface)
	*p = x
	return p
}

func (x Message_InteractiveMessage_ShopMessage_Surface) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_InteractiveMessage_ShopMessage_Surface) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[53].Descriptor()
}

func (Message_InteractiveMessage_ShopMessage_Surface) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[53]
}

func (x Message_InteractiveMessage_ShopMessage_Surface) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_InteractiveMessage_ShopMessage_Surface) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_InteractiveMessage_ShopMessage_Surface(num)
	return nil
}

// Deprecated: Use Message_InteractiveMessage_ShopMessage_Surface.Descriptor instead.
func (Message_InteractiveMessage_ShopMessage_Surface) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 37, 6, 0}
}

type Message_InteractiveResponseMessage_Body_Format int32

const (
	Message_InteractiveResponseMessage_Body_DEFAULT      Message_InteractiveResponseMessage_Body_Format = 0
	Message_InteractiveResponseMessage_Body_EXTENSIONS_1 Message_InteractiveResponseMessage_Body_Format = 1
)

// Enum value maps for Message_InteractiveResponseMessage_Body_Format.
var (
	Message_InteractiveResponseMessage_Body_Format_name = map[int32]string{
		0: "DEFAULT",
		1: "EXTENSIONS_1",
	}
	Message_InteractiveResponseMessage_Body_Format_value = map[string]int32{
		"DEFAULT":      0,
		"EXTENSIONS_1": 1,
	}
)

func (x Message_InteractiveResponseMessage_Body_Format) Enum() *Message_InteractiveResponseMessage_Body_Format {
	p := new(Message_InteractiveResponseMessage_Body_Format)
	*p = x
	return p
}

func (x Message_InteractiveResponseMessage_Body_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_InteractiveResponseMessage_Body_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[54].Descriptor()
}

func (Message_InteractiveResponseMessage_Body_Format) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[54]
}

func (x Message_InteractiveResponseMessage_Body_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_InteractiveResponseMessage_Body_Format) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_InteractiveResponseMessage_Body_Format(num)
	return nil
}

// Deprecated: Use Message_InteractiveResponseMessage_Body_Format.Descriptor instead.
func (Message_InteractiveResponseMessage_Body_Format) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 38, 0, 0}
}

type Message_InvoiceMessage_AttachmentType int32

const (
	Message_InvoiceMessage_IMAGE Message_InvoiceMessage_AttachmentType = 0
	Message_InvoiceMessage_PDF   Message_InvoiceMessage_AttachmentType = 1
)

// Enum value maps for Message_InvoiceMessage_AttachmentType.
var (
	Message_InvoiceMessage_AttachmentType_name = map[int32]string{
		0: "IMAGE",
		1: "PDF",
	}
	Message_InvoiceMessage_AttachmentType_value = map[string]int32{
		"IMAGE": 0,
		"PDF":   1,
	}
)

func (x Message_InvoiceMessage_AttachmentType) Enum() *Message_InvoiceMessage_AttachmentType {
	p := new(Message_InvoiceMessage_AttachmentType)
	*p = x
	return p
}

func (x Message_InvoiceMessage_AttachmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_InvoiceMessage_AttachmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[55].Descriptor()
}

func (Message_InvoiceMessage_AttachmentType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[55]
}

func (x Message_InvoiceMessage_AttachmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_InvoiceMessage_AttachmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_InvoiceMessage_AttachmentType(num)
	return nil
}

// Deprecated: Use Message_InvoiceMessage_AttachmentType.Descriptor instead.
func (Message_InvoiceMessage_AttachmentType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 39, 0}
}

type Message_ListMessage_ListType int32

const (
	Message_ListMessage_UNKNOWN       Message_ListMessage_ListType = 0
	Message_ListMessage_SINGLE_SELECT Message_ListMessage_ListType = 1
	Message_ListMessage_PRODUCT_LIST  Message_ListMessage_ListType = 2
)

// Enum value maps for Message_ListMessage_ListType.
var (
	Message_ListMessage_ListType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SINGLE_SELECT",
		2: "PRODUCT_LIST",
	}
	Message_ListMessage_ListType_value = map[string]int32{
		"UNKNOWN":       0,
		"SINGLE_SELECT": 1,
		"PRODUCT_LIST":  2,
	}
)

func (x Message_ListMessage_ListType) Enum() *Message_ListMessage_ListType {
	p := new(Message_ListMessage_ListType)
	*p = x
	return p
}

func (x Message_ListMessage_ListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ListMessage_ListType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[56].Descriptor()
}

func (Message_ListMessage_ListType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[56]
}

func (x Message_ListMessage_ListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ListMessage_ListType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ListMessage_ListType(num)
	return nil
}

// Deprecated: Use Message_ListMessage_ListType.Descriptor instead.
func (Message_ListMessage_ListType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 41, 0}
}

type Message_ListResponseMessage_ListType int32

const (
	Message_ListResponseMessage_UNKNOWN       Message_ListResponseMessage_ListType = 0
	Message_ListResponseMessage_SINGLE_SELECT Message_ListResponseMessage_ListType = 1
)

// Enum value maps for Message_ListResponseMessage_ListType.
var (
	Message_ListResponseMessage_ListType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SINGLE_SELECT",
	}
	Message_ListResponseMessage_ListType_value = map[string]int32{
		"UNKNOWN":       0,
		"SINGLE_SELECT": 1,
	}
)

func (x Message_ListResponseMessage_ListType) Enum() *Message_ListResponseMessage_ListType {
	p := new(Message_ListResponseMessage_ListType)
	*p = x
	return p
}

func (x Message_ListResponseMessage_ListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ListResponseMessage_ListType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[57].Descriptor()
}

func (Message_ListResponseMessage_ListType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[57]
}

func (x Message_ListResponseMessage_ListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ListResponseMessage_ListType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ListResponseMessage_ListType(num)
	return nil
}

// Deprecated: Use Message_ListResponseMessage_ListType.Descriptor instead.
func (Message_ListResponseMessage_ListType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 42, 0}
}

type Message_OrderMessage_OrderStatus int32

const (
	Message_OrderMessage_INQUIRY  Message_OrderMessage_OrderStatus = 1
	Message_OrderMessage_ACCEPTED Message_OrderMessage_OrderStatus = 2
	Message_OrderMessage_DECLINED Message_OrderMessage_OrderStatus = 3
)

// Enum value maps for Message_OrderMessage_OrderStatus.
var (
	Message_OrderMessage_OrderStatus_name = map[int32]string{
		1: "INQUIRY",
		2: "ACCEPTED",
		3: "DECLINED",
	}
	Message_OrderMessage_OrderStatus_value = map[string]int32{
		"INQUIRY":  1,
		"ACCEPTED": 2,
		"DECLINED": 3,
	}
)

func (x Message_OrderMessage_OrderStatus) Enum() *Message_OrderMessage_OrderStatus {
	p := new(Message_OrderMessage_OrderStatus)
	*p = x
	return p
}

func (x Message_OrderMessage_OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_OrderMessage_OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[58].Descriptor()
}

func (Message_OrderMessage_OrderStatus) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[58]
}

func (x Message_OrderMessage_OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_OrderMessage_OrderStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_OrderMessage_OrderStatus(num)
	return nil
}

// Deprecated: Use Message_OrderMessage_OrderStatus.Descriptor instead.
func (Message_OrderMessage_OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 47, 0}
}

type Message_OrderMessage_OrderSurface int32

const (
	Message_OrderMessage_CATALOG Message_OrderMessage_OrderSurface = 1
)

// Enum value maps for Message_OrderMessage_OrderSurface.
var (
	Message_OrderMessage_OrderSurface_name = map[int32]string{
		1: "CATALOG",
	}
	Message_OrderMessage_OrderSurface_value = map[string]int32{
		"CATALOG": 1,
	}
)

func (x Message_OrderMessage_OrderSurface) Enum() *Message_OrderMessage_OrderSurface {
	p := new(Message_OrderMessage_OrderSurface)
	*p = x
	return p
}

func (x Message_OrderMessage_OrderSurface) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_OrderMessage_OrderSurface) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[59].Descriptor()
}

func (Message_OrderMessage_OrderSurface) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[59]
}

func (x Message_OrderMessage_OrderSurface) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_OrderMessage_OrderSurface) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_OrderMessage_OrderSurface(num)
	return nil
}

// Deprecated: Use Message_OrderMessage_OrderSurface.Descriptor instead.
func (Message_OrderMessage_OrderSurface) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 47, 1}
}

type Message_PaymentInviteMessage_ServiceType int32

const (
	Message_PaymentInviteMessage_UNKNOWN Message_PaymentInviteMessage_ServiceType = 0
	Message_PaymentInviteMessage_FBPAY   Message_PaymentInviteMessage_ServiceType = 1
	Message_PaymentInviteMessage_NOVI    Message_PaymentInviteMessage_ServiceType = 2
	Message_PaymentInviteMessage_UPI     Message_PaymentInviteMessage_ServiceType = 3
)

// Enum value maps for Message_PaymentInviteMessage_ServiceType.
var (
	Message_PaymentInviteMessage_ServiceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "FBPAY",
		2: "NOVI",
		3: "UPI",
	}
	Message_PaymentInviteMessage_ServiceType_value = map[string]int32{
		"UNKNOWN": 0,
		"FBPAY":   1,
		"NOVI":    2,
		"UPI":     3,
	}
)

func (x Message_PaymentInviteMessage_ServiceType) Enum() *Message_PaymentInviteMessage_ServiceType {
	p := new(Message_PaymentInviteMessage_ServiceType)
	*p = x
	return p
}

func (x Message_PaymentInviteMessage_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_PaymentInviteMessage_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[60].Descriptor()
}

func (Message_PaymentInviteMessage_ServiceType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[60]
}

func (x Message_PaymentInviteMessage_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_PaymentInviteMessage_ServiceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_PaymentInviteMessage_ServiceType(num)
	return nil
}

// Deprecated: Use Message_PaymentInviteMessage_ServiceType.Descriptor instead.
func (Message_PaymentInviteMessage_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 48, 0}
}

type Message_PinInChatMessage_Type int32

const (
	Message_PinInChatMessage_UNKNOWN_TYPE  Message_PinInChatMessage_Type = 0
	Message_PinInChatMessage_PIN_FOR_ALL   Message_PinInChatMessage_Type = 1
	Message_PinInChatMessage_UNPIN_FOR_ALL Message_PinInChatMessage_Type = 2
)

// Enum value maps for Message_PinInChatMessage_Type.
var (
	Message_PinInChatMessage_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "PIN_FOR_ALL",
		2: "UNPIN_FOR_ALL",
	}
	Message_PinInChatMessage_Type_value = map[string]int32{
		"UNKNOWN_TYPE":  0,
		"PIN_FOR_ALL":   1,
		"UNPIN_FOR_ALL": 2,
	}
)

func (x Message_PinInChatMessage_Type) Enum() *Message_PinInChatMessage_Type {
	p := new(Message_PinInChatMessage_Type)
	*p = x
	return p
}

func (x Message_PinInChatMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_PinInChatMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[61].Descriptor()
}

func (Message_PinInChatMessage_Type) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[61]
}

func (x Message_PinInChatMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_PinInChatMessage_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_PinInChatMessage_Type(num)
	return nil
}

// Deprecated: Use Message_PinInChatMessage_Type.Descriptor instead.
func (Message_PinInChatMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 51, 0}
}

type Message_PlaceholderMessage_PlaceholderType int32

const (
	Message_PlaceholderMessage_MASK_LINKED_DEVICES Message_PlaceholderMessage_PlaceholderType = 0
)

// Enum value maps for Message_PlaceholderMessage_PlaceholderType.
var (
	Message_PlaceholderMessage_PlaceholderType_name = map[int32]string{
		0: "MASK_LINKED_DEVICES",
	}
	Message_PlaceholderMessage_PlaceholderType_value = map[string]int32{
		"MASK_LINKED_DEVICES": 0,
	}
)

func (x Message_PlaceholderMessage_PlaceholderType) Enum() *Message_PlaceholderMessage_PlaceholderType {
	p := new(Message_PlaceholderMessage_PlaceholderType)
	*p = x
	return p
}

func (x Message_PlaceholderMessage_PlaceholderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_PlaceholderMessage_PlaceholderType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[62].Descriptor()
}

func (Message_PlaceholderMessage_PlaceholderType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[62]
}

func (x Message_PlaceholderMessage_PlaceholderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_PlaceholderMessage_PlaceholderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_PlaceholderMessage_PlaceholderType(num)
	return nil
}

// Deprecated: Use Message_PlaceholderMessage_PlaceholderType.Descriptor instead.
func (Message_PlaceholderMessage_PlaceholderType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 52, 0}
}

type Message_ProtocolMessage_Type int32

const (
	Message_ProtocolMessage_REVOKE                                       Message_ProtocolMessage_Type = 0
	Message_ProtocolMessage_EPHEMERAL_SETTING                            Message_ProtocolMessage_Type = 3
	Message_ProtocolMessage_EPHEMERAL_SYNC_RESPONSE                      Message_ProtocolMessage_Type = 4
	Message_ProtocolMessage_HISTORY_SYNC_NOTIFICATION                    Message_ProtocolMessage_Type = 5
	Message_ProtocolMessage_APP_STATE_SYNC_KEY_SHARE                     Message_ProtocolMessage_Type = 6
	Message_ProtocolMessage_APP_STATE_SYNC_KEY_REQUEST                   Message_ProtocolMessage_Type = 7
	Message_ProtocolMessage_MSG_FANOUT_BACKFILL_REQUEST                  Message_ProtocolMessage_Type = 8
	Message_ProtocolMessage_INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC   Message_ProtocolMessage_Type = 9
	Message_ProtocolMessage_APP_STATE_FATAL_EXCEPTION_NOTIFICATION       Message_ProtocolMessage_Type = 10
	Message_ProtocolMessage_SHARE_PHONE_NUMBER                           Message_ProtocolMessage_Type = 11
	Message_ProtocolMessage_MESSAGE_EDIT                                 Message_ProtocolMessage_Type = 14
	Message_ProtocolMessage_PEER_DATA_OPERATION_REQUEST_MESSAGE          Message_ProtocolMessage_Type = 16
	Message_ProtocolMessage_PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE Message_ProtocolMessage_Type = 17
	Message_ProtocolMessage_REQUEST_WELCOME_MESSAGE                      Message_ProtocolMessage_Type = 18
	Message_ProtocolMessage_BOT_FEEDBACK_MESSAGE                         Message_ProtocolMessage_Type = 19
	Message_ProtocolMessage_MEDIA_NOTIFY_MESSAGE                         Message_ProtocolMessage_Type = 20
)

// Enum value maps for Message_ProtocolMessage_Type.
var (
	Message_ProtocolMessage_Type_name = map[int32]string{
		0:  "REVOKE",
		3:  "EPHEMERAL_SETTING",
		4:  "EPHEMERAL_SYNC_RESPONSE",
		5:  "HISTORY_SYNC_NOTIFICATION",
		6:  "APP_STATE_SYNC_KEY_SHARE",
		7:  "APP_STATE_SYNC_KEY_REQUEST",
		8:  "MSG_FANOUT_BACKFILL_REQUEST",
		9:  "INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC",
		10: "APP_STATE_FATAL_EXCEPTION_NOTIFICATION",
		11: "SHARE_PHONE_NUMBER",
		14: "MESSAGE_EDIT",
		16: "PEER_DATA_OPERATION_REQUEST_MESSAGE",
		17: "PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE",
		18: "REQUEST_WELCOME_MESSAGE",
		19: "BOT_FEEDBACK_MESSAGE",
		20: "MEDIA_NOTIFY_MESSAGE",
	}
	Message_ProtocolMessage_Type_value = map[string]int32{
		"REVOKE":                                       0,
		"EPHEMERAL_SETTING":                            3,
		"EPHEMERAL_SYNC_RESPONSE":                      4,
		"HISTORY_SYNC_NOTIFICATION":                    5,
		"APP_STATE_SYNC_KEY_SHARE":                     6,
		"APP_STATE_SYNC_KEY_REQUEST":                   7,
		"MSG_FANOUT_BACKFILL_REQUEST":                  8,
		"INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC":   9,
		"APP_STATE_FATAL_EXCEPTION_NOTIFICATION":       10,
		"SHARE_PHONE_NUMBER":                           11,
		"MESSAGE_EDIT":                                 14,
		"PEER_DATA_OPERATION_REQUEST_MESSAGE":          16,
		"PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE": 17,
		"REQUEST_WELCOME_MESSAGE":                      18,
		"BOT_FEEDBACK_MESSAGE":                         19,
		"MEDIA_NOTIFY_MESSAGE":                         20,
	}
)

func (x Message_ProtocolMessage_Type) Enum() *Message_ProtocolMessage_Type {
	p := new(Message_ProtocolMessage_Type)
	*p = x
	return p
}

func (x Message_ProtocolMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ProtocolMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[63].Descriptor()
}

func (Message_ProtocolMessage_Type) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[63]
}

func (x Message_ProtocolMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ProtocolMessage_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ProtocolMessage_Type(num)
	return nil
}

// Deprecated: Use Message_ProtocolMessage_Type.Descriptor instead.
func (Message_ProtocolMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 59, 0}
}

type Message_RequestWelcomeMessageMetadata_LocalChatState int32

const (
	Message_RequestWelcomeMessageMetadata_EMPTY     Message_RequestWelcomeMessageMetadata_LocalChatState = 0
	Message_RequestWelcomeMessageMetadata_NON_EMPTY Message_RequestWelcomeMessageMetadata_LocalChatState = 1
)

// Enum value maps for Message_RequestWelcomeMessageMetadata_LocalChatState.
var (
	Message_RequestWelcomeMessageMetadata_LocalChatState_name = map[int32]string{
		0: "EMPTY",
		1: "NON_EMPTY",
	}
	Message_RequestWelcomeMessageMetadata_LocalChatState_value = map[string]int32{
		"EMPTY":     0,
		"NON_EMPTY": 1,
	}
)

func (x Message_RequestWelcomeMessageMetadata_LocalChatState) Enum() *Message_RequestWelcomeMessageMetadata_LocalChatState {
	p := new(Message_RequestWelcomeMessageMetadata_LocalChatState)
	*p = x
	return p
}

func (x Message_RequestWelcomeMessageMetadata_LocalChatState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_RequestWelcomeMessageMetadata_LocalChatState) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[64].Descriptor()
}

func (Message_RequestWelcomeMessageMetadata_LocalChatState) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[64]
}

func (x Message_RequestWelcomeMessageMetadata_LocalChatState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_RequestWelcomeMessageMetadata_LocalChatState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_RequestWelcomeMessageMetadata_LocalChatState(num)
	return nil
}

// Deprecated: Use Message_RequestWelcomeMessageMetadata_LocalChatState.Descriptor instead.
func (Message_RequestWelcomeMessageMetadata_LocalChatState) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 63, 0}
}

type Message_ScheduledCallCreationMessage_CallType int32

const (
	Message_ScheduledCallCreationMessage_UNKNOWN Message_ScheduledCallCreationMessage_CallType = 0
	Message_ScheduledCallCreationMessage_VOICE   Message_ScheduledCallCreationMessage_CallType = 1
	Message_ScheduledCallCreationMessage_VIDEO   Message_ScheduledCallCreationMessage_CallType = 2
)

// Enum value maps for Message_ScheduledCallCreationMessage_CallType.
var (
	Message_ScheduledCallCreationMessage_CallType_name = map[int32]string{
		0: "UNKNOWN",
		1: "VOICE",
		2: "VIDEO",
	}
	Message_ScheduledCallCreationMessage_CallType_value = map[string]int32{
		"UNKNOWN": 0,
		"VOICE":   1,
		"VIDEO":   2,
	}
)

func (x Message_ScheduledCallCreationMessage_CallType) Enum() *Message_ScheduledCallCreationMessage_CallType {
	p := new(Message_ScheduledCallCreationMessage_CallType)
	*p = x
	return p
}

func (x Message_ScheduledCallCreationMessage_CallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ScheduledCallCreationMessage_CallType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[65].Descriptor()
}

func (Message_ScheduledCallCreationMessage_CallType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[65]
}

func (x Message_ScheduledCallCreationMessage_CallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ScheduledCallCreationMessage_CallType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ScheduledCallCreationMessage_CallType(num)
	return nil
}

// Deprecated: Use Message_ScheduledCallCreationMessage_CallType.Descriptor instead.
func (Message_ScheduledCallCreationMessage_CallType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 64, 0}
}

type Message_ScheduledCallEditMessage_EditType int32

const (
	Message_ScheduledCallEditMessage_UNKNOWN Message_ScheduledCallEditMessage_EditType = 0
	Message_ScheduledCallEditMessage_CANCEL  Message_ScheduledCallEditMessage_EditType = 1
)

// Enum value maps for Message_ScheduledCallEditMessage_EditType.
var (
	Message_ScheduledCallEditMessage_EditType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CANCEL",
	}
	Message_ScheduledCallEditMessage_EditType_value = map[string]int32{
		"UNKNOWN": 0,
		"CANCEL":  1,
	}
)

func (x Message_ScheduledCallEditMessage_EditType) Enum() *Message_ScheduledCallEditMessage_EditType {
	p := new(Message_ScheduledCallEditMessage_EditType)
	*p = x
	return p
}

func (x Message_ScheduledCallEditMessage_EditType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_ScheduledCallEditMessage_EditType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[66].Descriptor()
}

func (Message_ScheduledCallEditMessage_EditType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[66]
}

func (x Message_ScheduledCallEditMessage_EditType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_ScheduledCallEditMessage_EditType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_ScheduledCallEditMessage_EditType(num)
	return nil
}

// Deprecated: Use Message_ScheduledCallEditMessage_EditType.Descriptor instead.
func (Message_ScheduledCallEditMessage_EditType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 65, 0}
}

type Message_VideoMessage_Attribution int32

const (
	Message_VideoMessage_NONE  Message_VideoMessage_Attribution = 0
	Message_VideoMessage_GIPHY Message_VideoMessage_Attribution = 1
	Message_VideoMessage_TENOR Message_VideoMessage_Attribution = 2
)

// Enum value maps for Message_VideoMessage_Attribution.
var (
	Message_VideoMessage_Attribution_name = map[int32]string{
		0: "NONE",
		1: "GIPHY",
		2: "TENOR",
	}
	Message_VideoMessage_Attribution_value = map[string]int32{
		"NONE":  0,
		"GIPHY": 1,
		"TENOR": 2,
	}
)

func (x Message_VideoMessage_Attribution) Enum() *Message_VideoMessage_Attribution {
	p := new(Message_VideoMessage_Attribution)
	*p = x
	return p
}

func (x Message_VideoMessage_Attribution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_VideoMessage_Attribution) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[67].Descriptor()
}

func (Message_VideoMessage_Attribution) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[67]
}

func (x Message_VideoMessage_Attribution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Message_VideoMessage_Attribution) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Message_VideoMessage_Attribution(num)
	return nil
}

// Deprecated: Use Message_VideoMessage_Attribution.Descriptor instead.
func (Message_VideoMessage_Attribution) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 72, 0}
}

type PastParticipant_LeaveReason int32

const (
	PastParticipant_LEFT    PastParticipant_LeaveReason = 0
	PastParticipant_REMOVED PastParticipant_LeaveReason = 1
)

// Enum value maps for PastParticipant_LeaveReason.
var (
	PastParticipant_LeaveReason_name = map[int32]string{
		0: "LEFT",
		1: "REMOVED",
	}
	PastParticipant_LeaveReason_value = map[string]int32{
		"LEFT":    0,
		"REMOVED": 1,
	}
)

func (x PastParticipant_LeaveReason) Enum() *PastParticipant_LeaveReason {
	p := new(PastParticipant_LeaveReason)
	*p = x
	return p
}

func (x PastParticipant_LeaveReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PastParticipant_LeaveReason) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[68].Descriptor()
}

func (PastParticipant_LeaveReason) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[68]
}

func (x PastParticipant_LeaveReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PastParticipant_LeaveReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PastParticipant_LeaveReason(num)
	return nil
}

// Deprecated: Use PastParticipant_LeaveReason.Descriptor instead.
func (PastParticipant_LeaveReason) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{59, 0}
}

type PatchDebugData_Platform int32

const (
	PatchDebugData_ANDROID PatchDebugData_Platform = 0
	PatchDebugData_SMBA    PatchDebugData_Platform = 1
	PatchDebugData_IPHONE  PatchDebugData_Platform = 2
	PatchDebugData_SMBI    PatchDebugData_Platform = 3
	PatchDebugData_WEB     PatchDebugData_Platform = 4
	PatchDebugData_UWP     PatchDebugData_Platform = 5
	PatchDebugData_DARWIN  PatchDebugData_Platform = 6
)

// Enum value maps for PatchDebugData_Platform.
var (
	PatchDebugData_Platform_name = map[int32]string{
		0: "ANDROID",
		1: "SMBA",
		2: "IPHONE",
		3: "SMBI",
		4: "WEB",
		5: "UWP",
		6: "DARWIN",
	}
	PatchDebugData_Platform_value = map[string]int32{
		"ANDROID": 0,
		"SMBA":    1,
		"IPHONE":  2,
		"SMBI":    3,
		"WEB":     4,
		"UWP":     5,
		"DARWIN":  6,
	}
)

func (x PatchDebugData_Platform) Enum() *PatchDebugData_Platform {
	p := new(PatchDebugData_Platform)
	*p = x
	return p
}

func (x PatchDebugData_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatchDebugData_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[69].Descriptor()
}

func (PatchDebugData_Platform) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[69]
}

func (x PatchDebugData_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PatchDebugData_Platform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PatchDebugData_Platform(num)
	return nil
}

// Deprecated: Use PatchDebugData_Platform.Descriptor instead.
func (PatchDebugData_Platform) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{61, 0}
}

type PaymentBackground_Type int32

const (
	PaymentBackground_UNKNOWN PaymentBackground_Type = 0
	PaymentBackground_DEFAULT PaymentBackground_Type = 1
)

// Enum value maps for PaymentBackground_Type.
var (
	PaymentBackground_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "DEFAULT",
	}
	PaymentBackground_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"DEFAULT": 1,
	}
)

func (x PaymentBackground_Type) Enum() *PaymentBackground_Type {
	p := new(PaymentBackground_Type)
	*p = x
	return p
}

func (x PaymentBackground_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentBackground_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[70].Descriptor()
}

func (PaymentBackground_Type) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[70]
}

func (x PaymentBackground_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PaymentBackground_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PaymentBackground_Type(num)
	return nil
}

// Deprecated: Use PaymentBackground_Type.Descriptor instead.
func (PaymentBackground_Type) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{62, 0}
}

type PaymentInfo_Currency int32

const (
	PaymentInfo_UNKNOWN_CURRENCY PaymentInfo_Currency = 0
	PaymentInfo_INR              PaymentInfo_Currency = 1
)

// Enum value maps for PaymentInfo_Currency.
var (
	PaymentInfo_Currency_name = map[int32]string{
		0: "UNKNOWN_CURRENCY",
		1: "INR",
	}
	PaymentInfo_Currency_value = map[string]int32{
		"UNKNOWN_CURRENCY": 0,
		"INR":              1,
	}
)

func (x PaymentInfo_Currency) Enum() *PaymentInfo_Currency {
	p := new(PaymentInfo_Currency)
	*p = x
	return p
}

func (x PaymentInfo_Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentInfo_Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[71].Descriptor()
}

func (PaymentInfo_Currency) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[71]
}

func (x PaymentInfo_Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PaymentInfo_Currency) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PaymentInfo_Currency(num)
	return nil
}

// Deprecated: Use PaymentInfo_Currency.Descriptor instead.
func (PaymentInfo_Currency) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{63, 0}
}

type PaymentInfo_Status int32

const (
	PaymentInfo_UNKNOWN_STATUS     PaymentInfo_Status = 0
	PaymentInfo_PROCESSING         PaymentInfo_Status = 1
	PaymentInfo_SENT               PaymentInfo_Status = 2
	PaymentInfo_NEED_TO_ACCEPT     PaymentInfo_Status = 3
	PaymentInfo_COMPLETE           PaymentInfo_Status = 4
	PaymentInfo_COULD_NOT_COMPLETE PaymentInfo_Status = 5
	PaymentInfo_REFUNDED           PaymentInfo_Status = 6
	PaymentInfo_EXPIRED            PaymentInfo_Status = 7
	PaymentInfo_REJECTED           PaymentInfo_Status = 8
	PaymentInfo_CANCELLED          PaymentInfo_Status = 9
	PaymentInfo_WAITING_FOR_PAYER  PaymentInfo_Status = 10
	PaymentInfo_WAITING            PaymentInfo_Status = 11
)

// Enum value maps for PaymentInfo_Status.
var (
	PaymentInfo_Status_name = map[int32]string{
		0:  "UNKNOWN_STATUS",
		1:  "PROCESSING",
		2:  "SENT",
		3:  "NEED_TO_ACCEPT",
		4:  "COMPLETE",
		5:  "COULD_NOT_COMPLETE",
		6:  "REFUNDED",
		7:  "EXPIRED",
		8:  "REJECTED",
		9:  "CANCELLED",
		10: "WAITING_FOR_PAYER",
		11: "WAITING",
	}
	PaymentInfo_Status_value = map[string]int32{
		"UNKNOWN_STATUS":     0,
		"PROCESSING":         1,
		"SENT":               2,
		"NEED_TO_ACCEPT":     3,
		"COMPLETE":           4,
		"COULD_NOT_COMPLETE": 5,
		"REFUNDED":           6,
		"EXPIRED":            7,
		"REJECTED":           8,
		"CANCELLED":          9,
		"WAITING_FOR_PAYER":  10,
		"WAITING":            11,
	}
)

func (x PaymentInfo_Status) Enum() *PaymentInfo_Status {
	p := new(PaymentInfo_Status)
	*p = x
	return p
}

func (x PaymentInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[72].Descriptor()
}

func (PaymentInfo_Status) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[72]
}

func (x PaymentInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PaymentInfo_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PaymentInfo_Status(num)
	return nil
}

// Deprecated: Use PaymentInfo_Status.Descriptor instead.
func (PaymentInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{63, 1}
}

type PaymentInfo_TxnStatus int32

const (
	PaymentInfo_UNKNOWN                       PaymentInfo_TxnStatus = 0
	PaymentInfo_PENDING_SETUP                 PaymentInfo_TxnStatus = 1
	PaymentInfo_PENDING_RECEIVER_SETUP        PaymentInfo_TxnStatus = 2
	PaymentInfo_INIT                          PaymentInfo_TxnStatus = 3
	PaymentInfo_SUCCESS                       PaymentInfo_TxnStatus = 4
	PaymentInfo_COMPLETED                     PaymentInfo_TxnStatus = 5
	PaymentInfo_FAILED                        PaymentInfo_TxnStatus = 6
	PaymentInfo_FAILED_RISK                   PaymentInfo_TxnStatus = 7
	PaymentInfo_FAILED_PROCESSING             PaymentInfo_TxnStatus = 8
	PaymentInfo_FAILED_RECEIVER_PROCESSING    PaymentInfo_TxnStatus = 9
	PaymentInfo_FAILED_DA                     PaymentInfo_TxnStatus = 10
	PaymentInfo_FAILED_DA_FINAL               PaymentInfo_TxnStatus = 11
	PaymentInfo_REFUNDED_TXN                  PaymentInfo_TxnStatus = 12
	PaymentInfo_REFUND_FAILED                 PaymentInfo_TxnStatus = 13
	PaymentInfo_REFUND_FAILED_PROCESSING      PaymentInfo_TxnStatus = 14
	PaymentInfo_REFUND_FAILED_DA              PaymentInfo_TxnStatus = 15
	PaymentInfo_EXPIRED_TXN                   PaymentInfo_TxnStatus = 16
	PaymentInfo_AUTH_CANCELED                 PaymentInfo_TxnStatus = 17
	PaymentInfo_AUTH_CANCEL_FAILED_PROCESSING PaymentInfo_TxnStatus = 18
	PaymentInfo_AUTH_CANCEL_FAILED            PaymentInfo_TxnStatus = 19
	PaymentInfo_COLLECT_INIT                  PaymentInfo_TxnStatus = 20
	PaymentInfo_COLLECT_SUCCESS               PaymentInfo_TxnStatus = 21
	PaymentInfo_COLLECT_FAILED                PaymentInfo_TxnStatus = 22
	PaymentInfo_COLLECT_FAILED_RISK           PaymentInfo_TxnStatus = 23
	PaymentInfo_COLLECT_REJECTED              PaymentInfo_TxnStatus = 24
	PaymentInfo_COLLECT_EXPIRED               PaymentInfo_TxnStatus = 25
	PaymentInfo_COLLECT_CANCELED              PaymentInfo_TxnStatus = 26
	PaymentInfo_COLLECT_CANCELLING            PaymentInfo_TxnStatus = 27
	PaymentInfo_IN_REVIEW                     PaymentInfo_TxnStatus = 28
	PaymentInfo_REVERSAL_SUCCESS              PaymentInfo_TxnStatus = 29
	PaymentInfo_REVERSAL_PENDING              PaymentInfo_TxnStatus = 30
	PaymentInfo_REFUND_PENDING                PaymentInfo_TxnStatus = 31
)

// Enum value maps for PaymentInfo_TxnStatus.
var (
	PaymentInfo_TxnStatus_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "PENDING_SETUP",
		2:  "PENDING_RECEIVER_SETUP",
		3:  "INIT",
		4:  "SUCCESS",
		5:  "COMPLETED",
		6:  "FAILED",
		7:  "FAILED_RISK",
		8:  "FAILED_PROCESSING",
		9:  "FAILED_RECEIVER_PROCESSING",
		10: "FAILED_DA",
		11: "FAILED_DA_FINAL",
		12: "REFUNDED_TXN",
		13: "REFUND_FAILED",
		14: "REFUND_FAILED_PROCESSING",
		15: "REFUND_FAILED_DA",
		16: "EXPIRED_TXN",
		17: "AUTH_CANCELED",
		18: "AUTH_CANCEL_FAILED_PROCESSING",
		19: "AUTH_CANCEL_FAILED",
		20: "COLLECT_INIT",
		21: "COLLECT_SUCCESS",
		22: "COLLECT_FAILED",
		23: "COLLECT_FAILED_RISK",
		24: "COLLECT_REJECTED",
		25: "COLLECT_EXPIRED",
		26: "COLLECT_CANCELED",
		27: "COLLECT_CANCELLING",
		28: "IN_REVIEW",
		29: "REVERSAL_SUCCESS",
		30: "REVERSAL_PENDING",
		31: "REFUND_PENDING",
	}
	PaymentInfo_TxnStatus_value = map[string]int32{
		"UNKNOWN":                       0,
		"PENDING_SETUP":                 1,
		"PENDING_RECEIVER_SETUP":        2,
		"INIT":                          3,
		"SUCCESS":                       4,
		"COMPLETED":                     5,
		"FAILED":                        6,
		"FAILED_RISK":                   7,
		"FAILED_PROCESSING":             8,
		"FAILED_RECEIVER_PROCESSING":    9,
		"FAILED_DA":                     10,
		"FAILED_DA_FINAL":               11,
		"REFUNDED_TXN":                  12,
		"REFUND_FAILED":                 13,
		"REFUND_FAILED_PROCESSING":      14,
		"REFUND_FAILED_DA":              15,
		"EXPIRED_TXN":                   16,
		"AUTH_CANCELED":                 17,
		"AUTH_CANCEL_FAILED_PROCESSING": 18,
		"AUTH_CANCEL_FAILED":            19,
		"COLLECT_INIT":                  20,
		"COLLECT_SUCCESS":               21,
		"COLLECT_FAILED":                22,
		"COLLECT_FAILED_RISK":           23,
		"COLLECT_REJECTED":              24,
		"COLLECT_EXPIRED":               25,
		"COLLECT_CANCELED":              26,
		"COLLECT_CANCELLING":            27,
		"IN_REVIEW":                     28,
		"REVERSAL_SUCCESS":              29,
		"REVERSAL_PENDING":              30,
		"REFUND_PENDING":                31,
	}
)

func (x PaymentInfo_TxnStatus) Enum() *PaymentInfo_TxnStatus {
	p := new(PaymentInfo_TxnStatus)
	*p = x
	return p
}

func (x PaymentInfo_TxnStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentInfo_TxnStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[73].Descriptor()
}

func (PaymentInfo_TxnStatus) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[73]
}

func (x PaymentInfo_TxnStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PaymentInfo_TxnStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PaymentInfo_TxnStatus(num)
	return nil
}

// Deprecated: Use PaymentInfo_TxnStatus.Descriptor instead.
func (PaymentInfo_TxnStatus) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{63, 2}
}

type PinInChat_Type int32

const (
	PinInChat_UNKNOWN_TYPE  PinInChat_Type = 0
	PinInChat_PIN_FOR_ALL   PinInChat_Type = 1
	PinInChat_UNPIN_FOR_ALL PinInChat_Type = 2
)

// Enum value maps for PinInChat_Type.
var (
	PinInChat_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "PIN_FOR_ALL",
		2: "UNPIN_FOR_ALL",
	}
	PinInChat_Type_value = map[string]int32{
		"UNKNOWN_TYPE":  0,
		"PIN_FOR_ALL":   1,
		"UNPIN_FOR_ALL": 2,
	}
)

func (x PinInChat_Type) Enum() *PinInChat_Type {
	p := new(PinInChat_Type)
	*p = x
	return p
}

func (x PinInChat_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PinInChat_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[74].Descriptor()
}

func (PinInChat_Type) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[74]
}

func (x PinInChat_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PinInChat_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PinInChat_Type(num)
	return nil
}

// Deprecated: Use PinInChat_Type.Descriptor instead.
func (PinInChat_Type) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{66, 0}
}

type QP_ClauseType int32

const (
	QP_AND QP_ClauseType = 1
	QP_OR  QP_ClauseType = 2
	QP_NOR QP_ClauseType = 3
)

// Enum value maps for QP_ClauseType.
var (
	QP_ClauseType_name = map[int32]string{
		1: "AND",
		2: "OR",
		3: "NOR",
	}
	QP_ClauseType_value = map[string]int32{
		"AND": 1,
		"OR":  2,
		"NOR": 3,
	}
)

func (x QP_ClauseType) Enum() *QP_ClauseType {
	p := new(QP_ClauseType)
	*p = x
	return p
}

func (x QP_ClauseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QP_ClauseType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[75].Descriptor()
}

func (QP_ClauseType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[75]
}

func (x QP_ClauseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QP_ClauseType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QP_ClauseType(num)
	return nil
}

// Deprecated: Use QP_ClauseType.Descriptor instead.
func (QP_ClauseType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{75, 0}
}

type QP_FilterClientNotSupportedConfig int32

const (
	QP_PASS_BY_DEFAULT QP_FilterClientNotSupportedConfig = 1
	QP_FAIL_BY_DEFAULT QP_FilterClientNotSupportedConfig = 2
)

// Enum value maps for QP_FilterClientNotSupportedConfig.
var (
	QP_FilterClientNotSupportedConfig_name = map[int32]string{
		1: "PASS_BY_DEFAULT",
		2: "FAIL_BY_DEFAULT",
	}
	QP_FilterClientNotSupportedConfig_value = map[string]int32{
		"PASS_BY_DEFAULT": 1,
		"FAIL_BY_DEFAULT": 2,
	}
)

func (x QP_FilterClientNotSupportedConfig) Enum() *QP_FilterClientNotSupportedConfig {
	p := new(QP_FilterClientNotSupportedConfig)
	*p = x
	return p
}

func (x QP_FilterClientNotSupportedConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QP_FilterClientNotSupportedConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[76].Descriptor()
}

func (QP_FilterClientNotSupportedConfig) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[76]
}

func (x QP_FilterClientNotSupportedConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QP_FilterClientNotSupportedConfig) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QP_FilterClientNotSupportedConfig(num)
	return nil
}

// Deprecated: Use QP_FilterClientNotSupportedConfig.Descriptor instead.
func (QP_FilterClientNotSupportedConfig) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{75, 1}
}

type QP_FilterResult int32

const (
	QP_TRUE    QP_FilterResult = 1
	QP_FALSE   QP_FilterResult = 2
	QP_UNKNOWN QP_FilterResult = 3
)

// Enum value maps for QP_FilterResult.
var (
	QP_FilterResult_name = map[int32]string{
		1: "TRUE",
		2: "FALSE",
		3: "UNKNOWN",
	}
	QP_FilterResult_value = map[string]int32{
		"TRUE":    1,
		"FALSE":   2,
		"UNKNOWN": 3,
	}
)

func (x QP_FilterResult) Enum() *QP_FilterResult {
	p := new(QP_FilterResult)
	*p = x
	return p
}

func (x QP_FilterResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QP_FilterResult) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[77].Descriptor()
}

func (QP_FilterResult) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[77]
}

func (x QP_FilterResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QP_FilterResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QP_FilterResult(num)
	return nil
}

// Deprecated: Use QP_FilterResult.Descriptor instead.
func (QP_FilterResult) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{75, 2}
}

type SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType int32

const (
	SyncActionValue_MarketingMessageAction_PERSONALIZED SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType = 0
)

// Enum value maps for SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType.
var (
	SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType_name = map[int32]string{
		0: "PERSONALIZED",
	}
	SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType_value = map[string]int32{
		"PERSONALIZED": 0,
	}
)

func (x SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType) Enum() *SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType {
	p := new(SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType)
	*p = x
	return p
}

func (x SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[78].Descriptor()
}

func (SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[78]
}

func (x SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType(num)
	return nil
}

// Deprecated: Use SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType.Descriptor instead.
func (SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 22, 0}
}

type SyncActionValue_StatusPrivacyAction_StatusDistributionMode int32

const (
	SyncActionValue_StatusPrivacyAction_ALLOW_LIST SyncActionValue_StatusPrivacyAction_StatusDistributionMode = 0
	SyncActionValue_StatusPrivacyAction_DENY_LIST  SyncActionValue_StatusPrivacyAction_StatusDistributionMode = 1
	SyncActionValue_StatusPrivacyAction_CONTACTS   SyncActionValue_StatusPrivacyAction_StatusDistributionMode = 2
)

// Enum value maps for SyncActionValue_StatusPrivacyAction_StatusDistributionMode.
var (
	SyncActionValue_StatusPrivacyAction_StatusDistributionMode_name = map[int32]string{
		0: "ALLOW_LIST",
		1: "DENY_LIST",
		2: "CONTACTS",
	}
	SyncActionValue_StatusPrivacyAction_StatusDistributionMode_value = map[string]int32{
		"ALLOW_LIST": 0,
		"DENY_LIST":  1,
		"CONTACTS":   2,
	}
)

func (x SyncActionValue_StatusPrivacyAction_StatusDistributionMode) Enum() *SyncActionValue_StatusPrivacyAction_StatusDistributionMode {
	p := new(SyncActionValue_StatusPrivacyAction_StatusDistributionMode)
	*p = x
	return p
}

func (x SyncActionValue_StatusPrivacyAction_StatusDistributionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncActionValue_StatusPrivacyAction_StatusDistributionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[79].Descriptor()
}

func (SyncActionValue_StatusPrivacyAction_StatusDistributionMode) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[79]
}

func (x SyncActionValue_StatusPrivacyAction_StatusDistributionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SyncActionValue_StatusPrivacyAction_StatusDistributionMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SyncActionValue_StatusPrivacyAction_StatusDistributionMode(num)
	return nil
}

// Deprecated: Use SyncActionValue_StatusPrivacyAction_StatusDistributionMode.Descriptor instead.
func (SyncActionValue_StatusPrivacyAction_StatusDistributionMode) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 38, 0}
}

type SyncdMutation_SyncdOperation int32

const (
	SyncdMutation_SET    SyncdMutation_SyncdOperation = 0
	SyncdMutation_REMOVE SyncdMutation_SyncdOperation = 1
)

// Enum value maps for SyncdMutation_SyncdOperation.
var (
	SyncdMutation_SyncdOperation_name = map[int32]string{
		0: "SET",
		1: "REMOVE",
	}
	SyncdMutation_SyncdOperation_value = map[string]int32{
		"SET":    0,
		"REMOVE": 1,
	}
)

func (x SyncdMutation_SyncdOperation) Enum() *SyncdMutation_SyncdOperation {
	p := new(SyncdMutation_SyncdOperation)
	*p = x
	return p
}

func (x SyncdMutation_SyncdOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncdMutation_SyncdOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[80].Descriptor()
}

func (SyncdMutation_SyncdOperation) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[80]
}

func (x SyncdMutation_SyncdOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SyncdMutation_SyncdOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SyncdMutation_SyncdOperation(num)
	return nil
}

// Deprecated: Use SyncdMutation_SyncdOperation.Descriptor instead.
func (SyncdMutation_SyncdOperation) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{93, 0}
}

type WebFeatures_Flag int32

const (
	WebFeatures_NOT_STARTED   WebFeatures_Flag = 0
	WebFeatures_FORCE_UPGRADE WebFeatures_Flag = 1
	WebFeatures_DEVELOPMENT   WebFeatures_Flag = 2
	WebFeatures_PRODUCTION    WebFeatures_Flag = 3
)

// Enum value maps for WebFeatures_Flag.
var (
	WebFeatures_Flag_name = map[int32]string{
		0: "NOT_STARTED",
		1: "FORCE_UPGRADE",
		2: "DEVELOPMENT",
		3: "PRODUCTION",
	}
	WebFeatures_Flag_value = map[string]int32{
		"NOT_STARTED":   0,
		"FORCE_UPGRADE": 1,
		"DEVELOPMENT":   2,
		"PRODUCTION":    3,
	}
)

func (x WebFeatures_Flag) Enum() *WebFeatures_Flag {
	p := new(WebFeatures_Flag)
	*p = x
	return p
}

func (x WebFeatures_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebFeatures_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[81].Descriptor()
}

func (WebFeatures_Flag) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[81]
}

func (x WebFeatures_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WebFeatures_Flag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WebFeatures_Flag(num)
	return nil
}

// Deprecated: Use WebFeatures_Flag.Descriptor instead.
func (WebFeatures_Flag) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{104, 0}
}

type WebMessageInfo_BizPrivacyStatus int32

const (
	WebMessageInfo_E2EE       WebMessageInfo_BizPrivacyStatus = 0
	WebMessageInfo_FB         WebMessageInfo_BizPrivacyStatus = 2
	WebMessageInfo_BSP        WebMessageInfo_BizPrivacyStatus = 1
	WebMessageInfo_BSP_AND_FB WebMessageInfo_BizPrivacyStatus = 3
)

// Enum value maps for WebMessageInfo_BizPrivacyStatus.
var (
	WebMessageInfo_BizPrivacyStatus_name = map[int32]string{
		0: "E2EE",
		2: "FB",
		1: "BSP",
		3: "BSP_AND_FB",
	}
	WebMessageInfo_BizPrivacyStatus_value = map[string]int32{
		"E2EE":       0,
		"FB":         2,
		"BSP":        1,
		"BSP_AND_FB": 3,
	}
)

func (x WebMessageInfo_BizPrivacyStatus) Enum() *WebMessageInfo_BizPrivacyStatus {
	p := new(WebMessageInfo_BizPrivacyStatus)
	*p = x
	return p
}

func (x WebMessageInfo_BizPrivacyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebMessageInfo_BizPrivacyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[82].Descriptor()
}

func (WebMessageInfo_BizPrivacyStatus) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[82]
}

func (x WebMessageInfo_BizPrivacyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WebMessageInfo_BizPrivacyStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WebMessageInfo_BizPrivacyStatus(num)
	return nil
}

// Deprecated: Use WebMessageInfo_BizPrivacyStatus.Descriptor instead.
func (WebMessageInfo_BizPrivacyStatus) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{105, 0}
}

type WebMessageInfo_Status int32

const (
	WebMessageInfo_ERROR        WebMessageInfo_Status = 0
	WebMessageInfo_PENDING      WebMessageInfo_Status = 1
	WebMessageInfo_SERVER_ACK   WebMessageInfo_Status = 2
	WebMessageInfo_DELIVERY_ACK WebMessageInfo_Status = 3
	WebMessageInfo_READ         WebMessageInfo_Status = 4
	WebMessageInfo_PLAYED       WebMessageInfo_Status = 5
)

// Enum value maps for WebMessageInfo_Status.
var (
	WebMessageInfo_Status_name = map[int32]string{
		0: "ERROR",
		1: "PENDING",
		2: "SERVER_ACK",
		3: "DELIVERY_ACK",
		4: "READ",
		5: "PLAYED",
	}
	WebMessageInfo_Status_value = map[string]int32{
		"ERROR":        0,
		"PENDING":      1,
		"SERVER_ACK":   2,
		"DELIVERY_ACK": 3,
		"READ":         4,
		"PLAYED":       5,
	}
)

func (x WebMessageInfo_Status) Enum() *WebMessageInfo_Status {
	p := new(WebMessageInfo_Status)
	*p = x
	return p
}

func (x WebMessageInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebMessageInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[83].Descriptor()
}

func (WebMessageInfo_Status) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[83]
}

func (x WebMessageInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WebMessageInfo_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WebMessageInfo_Status(num)
	return nil
}

// Deprecated: Use WebMessageInfo_Status.Descriptor instead.
func (WebMessageInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{105, 1}
}

type WebMessageInfo_StubType int32

const (
	WebMessageInfo_UNKNOWN                                                  WebMessageInfo_StubType = 0
	WebMessageInfo_REVOKE                                                   WebMessageInfo_StubType = 1
	WebMessageInfo_CIPHERTEXT                                               WebMessageInfo_StubType = 2
	WebMessageInfo_FUTUREPROOF                                              WebMessageInfo_StubType = 3
	WebMessageInfo_NON_VERIFIED_TRANSITION                                  WebMessageInfo_StubType = 4
	WebMessageInfo_UNVERIFIED_TRANSITION                                    WebMessageInfo_StubType = 5
	WebMessageInfo_VERIFIED_TRANSITION                                      WebMessageInfo_StubType = 6
	WebMessageInfo_VERIFIED_LOW_UNKNOWN                                     WebMessageInfo_StubType = 7
	WebMessageInfo_VERIFIED_HIGH                                            WebMessageInfo_StubType = 8
	WebMessageInfo_VERIFIED_INITIAL_UNKNOWN                                 WebMessageInfo_StubType = 9
	WebMessageInfo_VERIFIED_INITIAL_LOW                                     WebMessageInfo_StubType = 10
	WebMessageInfo_VERIFIED_INITIAL_HIGH                                    WebMessageInfo_StubType = 11
	WebMessageInfo_VERIFIED_TRANSITION_ANY_TO_NONE                          WebMessageInfo_StubType = 12
	WebMessageInfo_VERIFIED_TRANSITION_ANY_TO_HIGH                          WebMessageInfo_StubType = 13
	WebMessageInfo_VERIFIED_TRANSITION_HIGH_TO_LOW                          WebMessageInfo_StubType = 14
	WebMessageInfo_VERIFIED_TRANSITION_HIGH_TO_UNKNOWN                      WebMessageInfo_StubType = 15
	WebMessageInfo_VERIFIED_TRANSITION_UNKNOWN_TO_LOW                       WebMessageInfo_StubType = 16
	WebMessageInfo_VERIFIED_TRANSITION_LOW_TO_UNKNOWN                       WebMessageInfo_StubType = 17
	WebMessageInfo_VERIFIED_TRANSITION_NONE_TO_LOW                          WebMessageInfo_StubType = 18
	WebMessageInfo_VERIFIED_TRANSITION_NONE_TO_UNKNOWN                      WebMessageInfo_StubType = 19
	WebMessageInfo_GROUP_CREATE                                             WebMessageInfo_StubType = 20
	WebMessageInfo_GROUP_CHANGE_SUBJECT                                     WebMessageInfo_StubType = 21
	WebMessageInfo_GROUP_CHANGE_ICON                                        WebMessageInfo_StubType = 22
	WebMessageInfo_GROUP_CHANGE_INVITE_LINK                                 WebMessageInfo_StubType = 23
	WebMessageInfo_GROUP_CHANGE_DESCRIPTION                                 WebMessageInfo_StubType = 24
	WebMessageInfo_GROUP_CHANGE_RESTRICT                                    WebMessageInfo_StubType = 25
	WebMessageInfo_GROUP_CHANGE_ANNOUNCE                                    WebMessageInfo_StubType = 26
	WebMessageInfo_GROUP_PARTICIPANT_ADD                                    WebMessageInfo_StubType = 27
	WebMessageInfo_GROUP_PARTICIPANT_REMOVE                                 WebMessageInfo_StubType = 28
	WebMessageInfo_GROUP_PARTICIPANT_PROMOTE                                WebMessageInfo_StubType = 29
	WebMessageInfo_GROUP_PARTICIPANT_DEMOTE                                 WebMessageInfo_StubType = 30
	WebMessageInfo_GROUP_PARTICIPANT_INVITE                                 WebMessageInfo_StubType = 31
	WebMessageInfo_GROUP_PARTICIPANT_LEAVE                                  WebMessageInfo_StubType = 32
	WebMessageInfo_GROUP_PARTICIPANT_CHANGE_NUMBER                          WebMessageInfo_StubType = 33
	WebMessageInfo_BROADCAST_CREATE                                         WebMessageInfo_StubType = 34
	WebMessageInfo_BROADCAST_ADD                                            WebMessageInfo_StubType = 35
	WebMessageInfo_BROADCAST_REMOVE                                         WebMessageInfo_StubType = 36
	WebMessageInfo_GENERIC_NOTIFICATION                                     WebMessageInfo_StubType = 37
	WebMessageInfo_E2E_IDENTITY_CHANGED                                     WebMessageInfo_StubType = 38
	WebMessageInfo_E2E_ENCRYPTED                                            WebMessageInfo_StubType = 39
	WebMessageInfo_CALL_MISSED_VOICE                                        WebMessageInfo_StubType = 40
	WebMessageInfo_CALL_MISSED_VIDEO                                        WebMessageInfo_StubType = 41
	WebMessageInfo_INDIVIDUAL_CHANGE_NUMBER                                 WebMessageInfo_StubType = 42
	WebMessageInfo_GROUP_DELETE                                             WebMessageInfo_StubType = 43
	WebMessageInfo_GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE                       WebMessageInfo_StubType = 44
	WebMessageInfo_CALL_MISSED_GROUP_VOICE                                  WebMessageInfo_StubType = 45
	WebMessageInfo_CALL_MISSED_GROUP_VIDEO                                  WebMessageInfo_StubType = 46
	WebMessageInfo_PAYMENT_CIPHERTEXT                                       WebMessageInfo_StubType = 47
	WebMessageInfo_PAYMENT_FUTUREPROOF                                      WebMessageInfo_StubType = 48
	WebMessageInfo_PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED                 WebMessageInfo_StubType = 49
	WebMessageInfo_PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED               WebMessageInfo_StubType = 50
	WebMessageInfo_PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED          WebMessageInfo_StubType = 51
	WebMessageInfo_PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP        WebMessageInfo_StubType = 52
	WebMessageInfo_PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP WebMessageInfo_StubType = 53
	WebMessageInfo_PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER                    WebMessageInfo_StubType = 54
	WebMessageInfo_PAYMENT_ACTION_SEND_PAYMENT_REMINDER                     WebMessageInfo_StubType = 55
	WebMessageInfo_PAYMENT_ACTION_SEND_PAYMENT_INVITATION                   WebMessageInfo_StubType = 56
	WebMessageInfo_PAYMENT_ACTION_REQUEST_DECLINED                          WebMessageInfo_StubType = 57
	WebMessageInfo_PAYMENT_ACTION_REQUEST_EXPIRED                           WebMessageInfo_StubType = 58
	WebMessageInfo_PAYMENT_ACTION_REQUEST_CANCELLED                         WebMessageInfo_StubType = 59
	WebMessageInfo_BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM                    WebMessageInfo_StubType = 60
	WebMessageInfo_BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP                    WebMessageInfo_StubType = 61
	WebMessageInfo_BIZ_INTRO_TOP                                            WebMessageInfo_StubType = 62
	WebMessageInfo_BIZ_INTRO_BOTTOM                                         WebMessageInfo_StubType = 63
	WebMessageInfo_BIZ_NAME_CHANGE                                          WebMessageInfo_StubType = 64
	WebMessageInfo_BIZ_MOVE_TO_CONSUMER_APP                                 WebMessageInfo_StubType = 65
	WebMessageInfo_BIZ_TWO_TIER_MIGRATION_TOP                               WebMessageInfo_StubType = 66
	WebMessageInfo_BIZ_TWO_TIER_MIGRATION_BOTTOM                            WebMessageInfo_StubType = 67
	WebMessageInfo_OVERSIZED                                                WebMessageInfo_StubType = 68
	WebMessageInfo_GROUP_CHANGE_NO_FREQUENTLY_FORWARDED                     WebMessageInfo_StubType = 69
	WebMessageInfo_GROUP_V4_ADD_INVITE_SENT                                 WebMessageInfo_StubType = 70
	WebMessageInfo_GROUP_PARTICIPANT_ADD_REQUEST_JOIN                       WebMessageInfo_StubType = 71
	WebMessageInfo_CHANGE_EPHEMERAL_SETTING                                 WebMessageInfo_StubType = 72
	WebMessageInfo_E2E_DEVICE_CHANGED                                       WebMessageInfo_StubType = 73
	WebMessageInfo_VIEWED_ONCE                                              WebMessageInfo_StubType = 74
	WebMessageInfo_E2E_ENCRYPTED_NOW                                        WebMessageInfo_StubType = 75
	WebMessageInfo_BLUE_MSG_BSP_FB_TO_BSP_PREMISE                           WebMessageInfo_StubType = 76
	WebMessageInfo_BLUE_MSG_BSP_FB_TO_SELF_FB                               WebMessageInfo_StubType = 77
	WebMessageInfo_BLUE_MSG_BSP_FB_TO_SELF_PREMISE                          WebMessageInfo_StubType = 78
	WebMessageInfo_BLUE_MSG_BSP_FB_UNVERIFIED                               WebMessageInfo_StubType = 79
	WebMessageInfo_BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED      WebMessageInfo_StubType = 80
	WebMessageInfo_BLUE_MSG_BSP_FB_VERIFIED                                 WebMessageInfo_StubType = 81
	WebMessageInfo_BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED      WebMessageInfo_StubType = 82
	WebMessageInfo_BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE                     WebMessageInfo_StubType = 83
	WebMessageInfo_BLUE_MSG_BSP_PREMISE_UNVERIFIED                          WebMessageInfo_StubType = 84
	WebMessageInfo_BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED WebMessageInfo_StubType = 85
	WebMessageInfo_BLUE_MSG_BSP_PREMISE_VERIFIED                            WebMessageInfo_StubType = 86
	WebMessageInfo_BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED WebMessageInfo_StubType = 87
	WebMessageInfo_BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED                   WebMessageInfo_StubType = 88
	WebMessageInfo_BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED              WebMessageInfo_StubType = 89
	WebMessageInfo_BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED                  WebMessageInfo_StubType = 90
	WebMessageInfo_BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED             WebMessageInfo_StubType = 91
	WebMessageInfo_BLUE_MSG_SELF_FB_TO_BSP_PREMISE                          WebMessageInfo_StubType = 92
	WebMessageInfo_BLUE_MSG_SELF_FB_TO_SELF_PREMISE                         WebMessageInfo_StubType = 93
	WebMessageInfo_BLUE_MSG_SELF_FB_UNVERIFIED                              WebMessageInfo_StubType = 94
	WebMessageInfo_BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED     WebMessageInfo_StubType = 95
	WebMessageInfo_BLUE_MSG_SELF_FB_VERIFIED                                WebMessageInfo_StubType = 96
	WebMessageInfo_BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED     WebMessageInfo_StubType = 97
	WebMessageInfo_BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE                     WebMessageInfo_StubType = 98
	WebMessageInfo_BLUE_MSG_SELF_PREMISE_UNVERIFIED                         WebMessageInfo_StubType = 99
	WebMessageInfo_BLUE_MSG_SELF_PREMISE_VERIFIED                           WebMessageInfo_StubType = 100
	WebMessageInfo_BLUE_MSG_TO_BSP_FB                                       WebMessageInfo_StubType = 101
	WebMessageInfo_BLUE_MSG_TO_CONSUMER                                     WebMessageInfo_StubType = 102
	WebMessageInfo_BLUE_MSG_TO_SELF_FB                                      WebMessageInfo_StubType = 103
	WebMessageInfo_BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED                   WebMessageInfo_StubType = 104
	WebMessageInfo_BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED              WebMessageInfo_StubType = 105
	WebMessageInfo_BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED                  WebMessageInfo_StubType = 106
	WebMessageInfo_BLUE_MSG_UNVERIFIED_TO_VERIFIED                          WebMessageInfo_StubType = 107
	WebMessageInfo_BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED                   WebMessageInfo_StubType = 108
	WebMessageInfo_BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED              WebMessageInfo_StubType = 109
	WebMessageInfo_BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED                  WebMessageInfo_StubType = 110
	WebMessageInfo_BLUE_MSG_VERIFIED_TO_UNVERIFIED                          WebMessageInfo_StubType = 111
	WebMessageInfo_BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED       WebMessageInfo_StubType = 112
	WebMessageInfo_BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED           WebMessageInfo_StubType = 113
	WebMessageInfo_BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED       WebMessageInfo_StubType = 114
	WebMessageInfo_BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED           WebMessageInfo_StubType = 115
	WebMessageInfo_BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED      WebMessageInfo_StubType = 116
	WebMessageInfo_BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED      WebMessageInfo_StubType = 117
	WebMessageInfo_E2E_IDENTITY_UNAVAILABLE                                 WebMessageInfo_StubType = 118
	WebMessageInfo_GROUP_CREATING                                           WebMessageInfo_StubType = 119
	WebMessageInfo_GROUP_CREATE_FAILED                                      WebMessageInfo_StubType = 120
	WebMessageInfo_GROUP_BOUNCED                                            WebMessageInfo_StubType = 121
	WebMessageInfo_BLOCK_CONTACT                                            WebMessageInfo_StubType = 122
	WebMessageInfo_EPHEMERAL_SETTING_NOT_APPLIED                            WebMessageInfo_StubType = 123
	WebMessageInfo_SYNC_FAILED                                              WebMessageInfo_StubType = 124
	WebMessageInfo_SYNCING                                                  WebMessageInfo_StubType = 125
	WebMessageInfo_BIZ_PRIVACY_MODE_INIT_FB                                 WebMessageInfo_StubType = 126
	WebMessageInfo_BIZ_PRIVACY_MODE_INIT_BSP                                WebMessageInfo_StubType = 127
	WebMessageInfo_BIZ_PRIVACY_MODE_TO_FB                                   WebMessageInfo_StubType = 128
	WebMessageInfo_BIZ_PRIVACY_MODE_TO_BSP                                  WebMessageInfo_StubType = 129
	WebMessageInfo_DISAPPEARING_MODE                                        WebMessageInfo_StubType = 130
	WebMessageInfo_E2E_DEVICE_FETCH_FAILED                                  WebMessageInfo_StubType = 131
	WebMessageInfo_ADMIN_REVOKE                                             WebMessageInfo_StubType = 132
	WebMessageInfo_GROUP_INVITE_LINK_GROWTH_LOCKED                          WebMessageInfo_StubType = 133
	WebMessageInfo_COMMUNITY_LINK_PARENT_GROUP                              WebMessageInfo_StubType = 134
	WebMessageInfo_COMMUNITY_LINK_SIBLING_GROUP                             WebMessageInfo_StubType = 135
	WebMessageInfo_COMMUNITY_LINK_SUB_GROUP                                 WebMessageInfo_StubType = 136
	WebMessageInfo_COMMUNITY_UNLINK_PARENT_GROUP                            WebMessageInfo_StubType = 137
	WebMessageInfo_COMMUNITY_UNLINK_SIBLING_GROUP                           WebMessageInfo_StubType = 138
	WebMessageInfo_COMMUNITY_UNLINK_SUB_GROUP                               WebMessageInfo_StubType = 139
	WebMessageInfo_GROUP_PARTICIPANT_ACCEPT                                 WebMessageInfo_StubType = 140
	WebMessageInfo_GROUP_PARTICIPANT_LINKED_GROUP_JOIN                      WebMessageInfo_StubType = 141
	WebMessageInfo_COMMUNITY_CREATE                                         WebMessageInfo_StubType = 142
	WebMessageInfo_EPHEMERAL_KEEP_IN_CHAT                                   WebMessageInfo_StubType = 143
	WebMessageInfo_GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST                   WebMessageInfo_StubType = 144
	WebMessageInfo_GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE                      WebMessageInfo_StubType = 145
	WebMessageInfo_INTEGRITY_UNLINK_PARENT_GROUP                            WebMessageInfo_StubType = 146
	WebMessageInfo_COMMUNITY_PARTICIPANT_PROMOTE                            WebMessageInfo_StubType = 147
	WebMessageInfo_COMMUNITY_PARTICIPANT_DEMOTE                             WebMessageInfo_StubType = 148
	WebMessageInfo_COMMUNITY_PARENT_GROUP_DELETED                           WebMessageInfo_StubType = 149
	WebMessageInfo_COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL          WebMessageInfo_StubType = 150
	WebMessageInfo_GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP          WebMessageInfo_StubType = 151
	WebMessageInfo_MASKED_THREAD_CREATED                                    WebMessageInfo_StubType = 152
	WebMessageInfo_MASKED_THREAD_UNMASKED                                   WebMessageInfo_StubType = 153
	WebMessageInfo_BIZ_CHAT_ASSIGNMENT                                      WebMessageInfo_StubType = 154
	WebMessageInfo_CHAT_PSA                                                 WebMessageInfo_StubType = 155
	WebMessageInfo_CHAT_POLL_CREATION_MESSAGE                               WebMessageInfo_StubType = 156
	WebMessageInfo_CAG_MASKED_THREAD_CREATED                                WebMessageInfo_StubType = 157
	WebMessageInfo_COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED                   WebMessageInfo_StubType = 158
	WebMessageInfo_CAG_INVITE_AUTO_ADD                                      WebMessageInfo_StubType = 159
	WebMessageInfo_BIZ_CHAT_ASSIGNMENT_UNASSIGN                             WebMessageInfo_StubType = 160
	WebMessageInfo_CAG_INVITE_AUTO_JOINED                                   WebMessageInfo_StubType = 161
	WebMessageInfo_SCHEDULED_CALL_START_MESSAGE                             WebMessageInfo_StubType = 162
	WebMessageInfo_COMMUNITY_INVITE_RICH                                    WebMessageInfo_StubType = 163
	WebMessageInfo_COMMUNITY_INVITE_AUTO_ADD_RICH                           WebMessageInfo_StubType = 164
	WebMessageInfo_SUB_GROUP_INVITE_RICH                                    WebMessageInfo_StubType = 165
	WebMessageInfo_SUB_GROUP_PARTICIPANT_ADD_RICH                           WebMessageInfo_StubType = 166
	WebMessageInfo_COMMUNITY_LINK_PARENT_GROUP_RICH                         WebMessageInfo_StubType = 167
	WebMessageInfo_COMMUNITY_PARTICIPANT_ADD_RICH                           WebMessageInfo_StubType = 168
	WebMessageInfo_SILENCED_UNKNOWN_CALLER_AUDIO                            WebMessageInfo_StubType = 169
	WebMessageInfo_SILENCED_UNKNOWN_CALLER_VIDEO                            WebMessageInfo_StubType = 170
	WebMessageInfo_GROUP_MEMBER_ADD_MODE                                    WebMessageInfo_StubType = 171
	WebMessageInfo_GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD     WebMessageInfo_StubType = 172
	WebMessageInfo_COMMUNITY_CHANGE_DESCRIPTION                             WebMessageInfo_StubType = 173
	WebMessageInfo_SENDER_INVITE                                            WebMessageInfo_StubType = 174
	WebMessageInfo_RECEIVER_INVITE                                          WebMessageInfo_StubType = 175
	WebMessageInfo_COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS                      WebMessageInfo_StubType = 176
	WebMessageInfo_PINNED_MESSAGE_IN_CHAT                                   WebMessageInfo_StubType = 177
	WebMessageInfo_PAYMENT_INVITE_SETUP_INVITER                             WebMessageInfo_StubType = 178
	WebMessageInfo_PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY                WebMessageInfo_StubType = 179
	WebMessageInfo_PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE            WebMessageInfo_StubType = 180
	WebMessageInfo_LINKED_GROUP_CALL_START                                  WebMessageInfo_StubType = 181
	WebMessageInfo_REPORT_TO_ADMIN_ENABLED_STATUS                           WebMessageInfo_StubType = 182
	WebMessageInfo_EMPTY_SUBGROUP_CREATE                                    WebMessageInfo_StubType = 183
	WebMessageInfo_SCHEDULED_CALL_CANCEL                                    WebMessageInfo_StubType = 184
	WebMessageInfo_SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH                   WebMessageInfo_StubType = 185
	WebMessageInfo_GROUP_CHANGE_RECENT_HISTORY_SHARING                      WebMessageInfo_StubType = 186
	WebMessageInfo_PAID_MESSAGE_SERVER_CAMPAIGN_ID                          WebMessageInfo_StubType = 187
	WebMessageInfo_GENERAL_CHAT_CREATE                                      WebMessageInfo_StubType = 188
	WebMessageInfo_GENERAL_CHAT_ADD                                         WebMessageInfo_StubType = 189
	WebMessageInfo_GENERAL_CHAT_AUTO_ADD_DISABLED                           WebMessageInfo_StubType = 190
	WebMessageInfo_SUGGESTED_SUBGROUP_ANNOUNCE                              WebMessageInfo_StubType = 191
	WebMessageInfo_BIZ_BOT_1P_MESSAGING_ENABLED                             WebMessageInfo_StubType = 192
	WebMessageInfo_CHANGE_USERNAME                                          WebMessageInfo_StubType = 193
	WebMessageInfo_BIZ_COEX_PRIVACY_INIT_SELF                               WebMessageInfo_StubType = 194
	WebMessageInfo_BIZ_COEX_PRIVACY_TRANSITION_SELF                         WebMessageInfo_StubType = 195
	WebMessageInfo_SUPPORT_AI_EDUCATION                                     WebMessageInfo_StubType = 196
	WebMessageInfo_BIZ_BOT_3P_MESSAGING_ENABLED                             WebMessageInfo_StubType = 197
	WebMessageInfo_REMINDER_SETUP_MESSAGE                                   WebMessageInfo_StubType = 198
	WebMessageInfo_REMINDER_SENT_MESSAGE                                    WebMessageInfo_StubType = 199
	WebMessageInfo_REMINDER_CANCEL_MESSAGE                                  WebMessageInfo_StubType = 200
)

// Enum value maps for WebMessageInfo_StubType.
var (
	WebMessageInfo_StubType_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "REVOKE",
		2:   "CIPHERTEXT",
		3:   "FUTUREPROOF",
		4:   "NON_VERIFIED_TRANSITION",
		5:   "UNVERIFIED_TRANSITION",
		6:   "VERIFIED_TRANSITION",
		7:   "VERIFIED_LOW_UNKNOWN",
		8:   "VERIFIED_HIGH",
		9:   "VERIFIED_INITIAL_UNKNOWN",
		10:  "VERIFIED_INITIAL_LOW",
		11:  "VERIFIED_INITIAL_HIGH",
		12:  "VERIFIED_TRANSITION_ANY_TO_NONE",
		13:  "VERIFIED_TRANSITION_ANY_TO_HIGH",
		14:  "VERIFIED_TRANSITION_HIGH_TO_LOW",
		15:  "VERIFIED_TRANSITION_HIGH_TO_UNKNOWN",
		16:  "VERIFIED_TRANSITION_UNKNOWN_TO_LOW",
		17:  "VERIFIED_TRANSITION_LOW_TO_UNKNOWN",
		18:  "VERIFIED_TRANSITION_NONE_TO_LOW",
		19:  "VERIFIED_TRANSITION_NONE_TO_UNKNOWN",
		20:  "GROUP_CREATE",
		21:  "GROUP_CHANGE_SUBJECT",
		22:  "GROUP_CHANGE_ICON",
		23:  "GROUP_CHANGE_INVITE_LINK",
		24:  "GROUP_CHANGE_DESCRIPTION",
		25:  "GROUP_CHANGE_RESTRICT",
		26:  "GROUP_CHANGE_ANNOUNCE",
		27:  "GROUP_PARTICIPANT_ADD",
		28:  "GROUP_PARTICIPANT_REMOVE",
		29:  "GROUP_PARTICIPANT_PROMOTE",
		30:  "GROUP_PARTICIPANT_DEMOTE",
		31:  "GROUP_PARTICIPANT_INVITE",
		32:  "GROUP_PARTICIPANT_LEAVE",
		33:  "GROUP_PARTICIPANT_CHANGE_NUMBER",
		34:  "BROADCAST_CREATE",
		35:  "BROADCAST_ADD",
		36:  "BROADCAST_REMOVE",
		37:  "GENERIC_NOTIFICATION",
		38:  "E2E_IDENTITY_CHANGED",
		39:  "E2E_ENCRYPTED",
		40:  "CALL_MISSED_VOICE",
		41:  "CALL_MISSED_VIDEO",
		42:  "INDIVIDUAL_CHANGE_NUMBER",
		43:  "GROUP_DELETE",
		44:  "GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE",
		45:  "CALL_MISSED_GROUP_VOICE",
		46:  "CALL_MISSED_GROUP_VIDEO",
		47:  "PAYMENT_CIPHERTEXT",
		48:  "PAYMENT_FUTUREPROOF",
		49:  "PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED",
		50:  "PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED",
		51:  "PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED",
		52:  "PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP",
		53:  "PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP",
		54:  "PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER",
		55:  "PAYMENT_ACTION_SEND_PAYMENT_REMINDER",
		56:  "PAYMENT_ACTION_SEND_PAYMENT_INVITATION",
		57:  "PAYMENT_ACTION_REQUEST_DECLINED",
		58:  "PAYMENT_ACTION_REQUEST_EXPIRED",
		59:  "PAYMENT_ACTION_REQUEST_CANCELLED",
		60:  "BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM",
		61:  "BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP",
		62:  "BIZ_INTRO_TOP",
		63:  "BIZ_INTRO_BOTTOM",
		64:  "BIZ_NAME_CHANGE",
		65:  "BIZ_MOVE_TO_CONSUMER_APP",
		66:  "BIZ_TWO_TIER_MIGRATION_TOP",
		67:  "BIZ_TWO_TIER_MIGRATION_BOTTOM",
		68:  "OVERSIZED",
		69:  "GROUP_CHANGE_NO_FREQUENTLY_FORWARDED",
		70:  "GROUP_V4_ADD_INVITE_SENT",
		71:  "GROUP_PARTICIPANT_ADD_REQUEST_JOIN",
		72:  "CHANGE_EPHEMERAL_SETTING",
		73:  "E2E_DEVICE_CHANGED",
		74:  "VIEWED_ONCE",
		75:  "E2E_ENCRYPTED_NOW",
		76:  "BLUE_MSG_BSP_FB_TO_BSP_PREMISE",
		77:  "BLUE_MSG_BSP_FB_TO_SELF_FB",
		78:  "BLUE_MSG_BSP_FB_TO_SELF_PREMISE",
		79:  "BLUE_MSG_BSP_FB_UNVERIFIED",
		80:  "BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED",
		81:  "BLUE_MSG_BSP_FB_VERIFIED",
		82:  "BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED",
		83:  "BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE",
		84:  "BLUE_MSG_BSP_PREMISE_UNVERIFIED",
		85:  "BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED",
		86:  "BLUE_MSG_BSP_PREMISE_VERIFIED",
		87:  "BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED",
		88:  "BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED",
		89:  "BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED",
		90:  "BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED",
		91:  "BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED",
		92:  "BLUE_MSG_SELF_FB_TO_BSP_PREMISE",
		93:  "BLUE_MSG_SELF_FB_TO_SELF_PREMISE",
		94:  "BLUE_MSG_SELF_FB_UNVERIFIED",
		95:  "BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED",
		96:  "BLUE_MSG_SELF_FB_VERIFIED",
		97:  "BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED",
		98:  "BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE",
		99:  "BLUE_MSG_SELF_PREMISE_UNVERIFIED",
		100: "BLUE_MSG_SELF_PREMISE_VERIFIED",
		101: "BLUE_MSG_TO_BSP_FB",
		102: "BLUE_MSG_TO_CONSUMER",
		103: "BLUE_MSG_TO_SELF_FB",
		104: "BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED",
		105: "BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED",
		106: "BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED",
		107: "BLUE_MSG_UNVERIFIED_TO_VERIFIED",
		108: "BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED",
		109: "BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED",
		110: "BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED",
		111: "BLUE_MSG_VERIFIED_TO_UNVERIFIED",
		112: "BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED",
		113: "BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED",
		114: "BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED",
		115: "BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED",
		116: "BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED",
		117: "BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED",
		118: "E2E_IDENTITY_UNAVAILABLE",
		119: "GROUP_CREATING",
		120: "GROUP_CREATE_FAILED",
		121: "GROUP_BOUNCED",
		122: "BLOCK_CONTACT",
		123: "EPHEMERAL_SETTING_NOT_APPLIED",
		124: "SYNC_FAILED",
		125: "SYNCING",
		126: "BIZ_PRIVACY_MODE_INIT_FB",
		127: "BIZ_PRIVACY_MODE_INIT_BSP",
		128: "BIZ_PRIVACY_MODE_TO_FB",
		129: "BIZ_PRIVACY_MODE_TO_BSP",
		130: "DISAPPEARING_MODE",
		131: "E2E_DEVICE_FETCH_FAILED",
		132: "ADMIN_REVOKE",
		133: "GROUP_INVITE_LINK_GROWTH_LOCKED",
		134: "COMMUNITY_LINK_PARENT_GROUP",
		135: "COMMUNITY_LINK_SIBLING_GROUP",
		136: "COMMUNITY_LINK_SUB_GROUP",
		137: "COMMUNITY_UNLINK_PARENT_GROUP",
		138: "COMMUNITY_UNLINK_SIBLING_GROUP",
		139: "COMMUNITY_UNLINK_SUB_GROUP",
		140: "GROUP_PARTICIPANT_ACCEPT",
		141: "GROUP_PARTICIPANT_LINKED_GROUP_JOIN",
		142: "COMMUNITY_CREATE",
		143: "EPHEMERAL_KEEP_IN_CHAT",
		144: "GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST",
		145: "GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE",
		146: "INTEGRITY_UNLINK_PARENT_GROUP",
		147: "COMMUNITY_PARTICIPANT_PROMOTE",
		148: "COMMUNITY_PARTICIPANT_DEMOTE",
		149: "COMMUNITY_PARENT_GROUP_DELETED",
		150: "COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL",
		151: "GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP",
		152: "MASKED_THREAD_CREATED",
		153: "MASKED_THREAD_UNMASKED",
		154: "BIZ_CHAT_ASSIGNMENT",
		155: "CHAT_PSA",
		156: "CHAT_POLL_CREATION_MESSAGE",
		157: "CAG_MASKED_THREAD_CREATED",
		158: "COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED",
		159: "CAG_INVITE_AUTO_ADD",
		160: "BIZ_CHAT_ASSIGNMENT_UNASSIGN",
		161: "CAG_INVITE_AUTO_JOINED",
		162: "SCHEDULED_CALL_START_MESSAGE",
		163: "COMMUNITY_INVITE_RICH",
		164: "COMMUNITY_INVITE_AUTO_ADD_RICH",
		165: "SUB_GROUP_INVITE_RICH",
		166: "SUB_GROUP_PARTICIPANT_ADD_RICH",
		167: "COMMUNITY_LINK_PARENT_GROUP_RICH",
		168: "COMMUNITY_PARTICIPANT_ADD_RICH",
		169: "SILENCED_UNKNOWN_CALLER_AUDIO",
		170: "SILENCED_UNKNOWN_CALLER_VIDEO",
		171: "GROUP_MEMBER_ADD_MODE",
		172: "GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD",
		173: "COMMUNITY_CHANGE_DESCRIPTION",
		174: "SENDER_INVITE",
		175: "RECEIVER_INVITE",
		176: "COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS",
		177: "PINNED_MESSAGE_IN_CHAT",
		178: "PAYMENT_INVITE_SETUP_INVITER",
		179: "PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY",
		180: "PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE",
		181: "LINKED_GROUP_CALL_START",
		182: "REPORT_TO_ADMIN_ENABLED_STATUS",
		183: "EMPTY_SUBGROUP_CREATE",
		184: "SCHEDULED_CALL_CANCEL",
		185: "SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH",
		186: "GROUP_CHANGE_RECENT_HISTORY_SHARING",
		187: "PAID_MESSAGE_SERVER_CAMPAIGN_ID",
		188: "GENERAL_CHAT_CREATE",
		189: "GENERAL_CHAT_ADD",
		190: "GENERAL_CHAT_AUTO_ADD_DISABLED",
		191: "SUGGESTED_SUBGROUP_ANNOUNCE",
		192: "BIZ_BOT_1P_MESSAGING_ENABLED",
		193: "CHANGE_USERNAME",
		194: "BIZ_COEX_PRIVACY_INIT_SELF",
		195: "BIZ_COEX_PRIVACY_TRANSITION_SELF",
		196: "SUPPORT_AI_EDUCATION",
		197: "BIZ_BOT_3P_MESSAGING_ENABLED",
		198: "REMINDER_SETUP_MESSAGE",
		199: "REMINDER_SENT_MESSAGE",
		200: "REMINDER_CANCEL_MESSAGE",
	}
	WebMessageInfo_StubType_value = map[string]int32{
		"UNKNOWN":                                                  0,
		"REVOKE":                                                   1,
		"CIPHERTEXT":                                               2,
		"FUTUREPROOF":                                              3,
		"NON_VERIFIED_TRANSITION":                                  4,
		"UNVERIFIED_TRANSITION":                                    5,
		"VERIFIED_TRANSITION":                                      6,
		"VERIFIED_LOW_UNKNOWN":                                     7,
		"VERIFIED_HIGH":                                            8,
		"VERIFIED_INITIAL_UNKNOWN":                                 9,
		"VERIFIED_INITIAL_LOW":                                     10,
		"VERIFIED_INITIAL_HIGH":                                    11,
		"VERIFIED_TRANSITION_ANY_TO_NONE":                          12,
		"VERIFIED_TRANSITION_ANY_TO_HIGH":                          13,
		"VERIFIED_TRANSITION_HIGH_TO_LOW":                          14,
		"VERIFIED_TRANSITION_HIGH_TO_UNKNOWN":                      15,
		"VERIFIED_TRANSITION_UNKNOWN_TO_LOW":                       16,
		"VERIFIED_TRANSITION_LOW_TO_UNKNOWN":                       17,
		"VERIFIED_TRANSITION_NONE_TO_LOW":                          18,
		"VERIFIED_TRANSITION_NONE_TO_UNKNOWN":                      19,
		"GROUP_CREATE":                                             20,
		"GROUP_CHANGE_SUBJECT":                                     21,
		"GROUP_CHANGE_ICON":                                        22,
		"GROUP_CHANGE_INVITE_LINK":                                 23,
		"GROUP_CHANGE_DESCRIPTION":                                 24,
		"GROUP_CHANGE_RESTRICT":                                    25,
		"GROUP_CHANGE_ANNOUNCE":                                    26,
		"GROUP_PARTICIPANT_ADD":                                    27,
		"GROUP_PARTICIPANT_REMOVE":                                 28,
		"GROUP_PARTICIPANT_PROMOTE":                                29,
		"GROUP_PARTICIPANT_DEMOTE":                                 30,
		"GROUP_PARTICIPANT_INVITE":                                 31,
		"GROUP_PARTICIPANT_LEAVE":                                  32,
		"GROUP_PARTICIPANT_CHANGE_NUMBER":                          33,
		"BROADCAST_CREATE":                                         34,
		"BROADCAST_ADD":                                            35,
		"BROADCAST_REMOVE":                                         36,
		"GENERIC_NOTIFICATION":                                     37,
		"E2E_IDENTITY_CHANGED":                                     38,
		"E2E_ENCRYPTED":                                            39,
		"CALL_MISSED_VOICE":                                        40,
		"CALL_MISSED_VIDEO":                                        41,
		"INDIVIDUAL_CHANGE_NUMBER":                                 42,
		"GROUP_DELETE":                                             43,
		"GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE":                       44,
		"CALL_MISSED_GROUP_VOICE":                                  45,
		"CALL_MISSED_GROUP_VIDEO":                                  46,
		"PAYMENT_CIPHERTEXT":                                       47,
		"PAYMENT_FUTUREPROOF":                                      48,
		"PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED":                 49,
		"PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED":               50,
		"PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED":          51,
		"PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP":        52,
		"PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP": 53,
		"PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER":                    54,
		"PAYMENT_ACTION_SEND_PAYMENT_REMINDER":                     55,
		"PAYMENT_ACTION_SEND_PAYMENT_INVITATION":                   56,
		"PAYMENT_ACTION_REQUEST_DECLINED":                          57,
		"PAYMENT_ACTION_REQUEST_EXPIRED":                           58,
		"PAYMENT_ACTION_REQUEST_CANCELLED":                         59,
		"BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM":                    60,
		"BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP":                    61,
		"BIZ_INTRO_TOP":                                            62,
		"BIZ_INTRO_BOTTOM":                                         63,
		"BIZ_NAME_CHANGE":                                          64,
		"BIZ_MOVE_TO_CONSUMER_APP":                                 65,
		"BIZ_TWO_TIER_MIGRATION_TOP":                               66,
		"BIZ_TWO_TIER_MIGRATION_BOTTOM":                            67,
		"OVERSIZED":                                                68,
		"GROUP_CHANGE_NO_FREQUENTLY_FORWARDED":                     69,
		"GROUP_V4_ADD_INVITE_SENT":                                 70,
		"GROUP_PARTICIPANT_ADD_REQUEST_JOIN":                       71,
		"CHANGE_EPHEMERAL_SETTING":                                 72,
		"E2E_DEVICE_CHANGED":                                       73,
		"VIEWED_ONCE":                                              74,
		"E2E_ENCRYPTED_NOW":                                        75,
		"BLUE_MSG_BSP_FB_TO_BSP_PREMISE":                           76,
		"BLUE_MSG_BSP_FB_TO_SELF_FB":                               77,
		"BLUE_MSG_BSP_FB_TO_SELF_PREMISE":                          78,
		"BLUE_MSG_BSP_FB_UNVERIFIED":                               79,
		"BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED":      80,
		"BLUE_MSG_BSP_FB_VERIFIED":                                 81,
		"BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED":      82,
		"BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE":                     83,
		"BLUE_MSG_BSP_PREMISE_UNVERIFIED":                          84,
		"BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED": 85,
		"BLUE_MSG_BSP_PREMISE_VERIFIED":                            86,
		"BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED": 87,
		"BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED":                   88,
		"BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED":              89,
		"BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED":                  90,
		"BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED":             91,
		"BLUE_MSG_SELF_FB_TO_BSP_PREMISE":                          92,
		"BLUE_MSG_SELF_FB_TO_SELF_PREMISE":                         93,
		"BLUE_MSG_SELF_FB_UNVERIFIED":                              94,
		"BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED":     95,
		"BLUE_MSG_SELF_FB_VERIFIED":                                96,
		"BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED":     97,
		"BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE":                     98,
		"BLUE_MSG_SELF_PREMISE_UNVERIFIED":                         99,
		"BLUE_MSG_SELF_PREMISE_VERIFIED":                           100,
		"BLUE_MSG_TO_BSP_FB":                                       101,
		"BLUE_MSG_TO_CONSUMER":                                     102,
		"BLUE_MSG_TO_SELF_FB":                                      103,
		"BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED":                   104,
		"BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED":              105,
		"BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED":                  106,
		"BLUE_MSG_UNVERIFIED_TO_VERIFIED":                          107,
		"BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED":                   108,
		"BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED":              109,
		"BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED":                  110,
		"BLUE_MSG_VERIFIED_TO_UNVERIFIED":                          111,
		"BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED":       112,
		"BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED":           113,
		"BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED":       114,
		"BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED":           115,
		"BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED":      116,
		"BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED":      117,
		"E2E_IDENTITY_UNAVAILABLE":                                 118,
		"GROUP_CREATING":                                           119,
		"GROUP_CREATE_FAILED":                                      120,
		"GROUP_BOUNCED":                                            121,
		"BLOCK_CONTACT":                                            122,
		"EPHEMERAL_SETTING_NOT_APPLIED":                            123,
		"SYNC_FAILED":                                              124,
		"SYNCING":                                                  125,
		"BIZ_PRIVACY_MODE_INIT_FB":                                 126,
		"BIZ_PRIVACY_MODE_INIT_BSP":                                127,
		"BIZ_PRIVACY_MODE_TO_FB":                                   128,
		"BIZ_PRIVACY_MODE_TO_BSP":                                  129,
		"DISAPPEARING_MODE":                                        130,
		"E2E_DEVICE_FETCH_FAILED":                                  131,
		"ADMIN_REVOKE":                                             132,
		"GROUP_INVITE_LINK_GROWTH_LOCKED":                          133,
		"COMMUNITY_LINK_PARENT_GROUP":                              134,
		"COMMUNITY_LINK_SIBLING_GROUP":                             135,
		"COMMUNITY_LINK_SUB_GROUP":                                 136,
		"COMMUNITY_UNLINK_PARENT_GROUP":                            137,
		"COMMUNITY_UNLINK_SIBLING_GROUP":                           138,
		"COMMUNITY_UNLINK_SUB_GROUP":                               139,
		"GROUP_PARTICIPANT_ACCEPT":                                 140,
		"GROUP_PARTICIPANT_LINKED_GROUP_JOIN":                      141,
		"COMMUNITY_CREATE":                                         142,
		"EPHEMERAL_KEEP_IN_CHAT":                                   143,
		"GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST":                   144,
		"GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE":                      145,
		"INTEGRITY_UNLINK_PARENT_GROUP":                            146,
		"COMMUNITY_PARTICIPANT_PROMOTE":                            147,
		"COMMUNITY_PARTICIPANT_DEMOTE":                             148,
		"COMMUNITY_PARENT_GROUP_DELETED":                           149,
		"COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL":          150,
		"GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP":          151,
		"MASKED_THREAD_CREATED":                                    152,
		"MASKED_THREAD_UNMASKED":                                   153,
		"BIZ_CHAT_ASSIGNMENT":                                      154,
		"CHAT_PSA":                                                 155,
		"CHAT_POLL_CREATION_MESSAGE":                               156,
		"CAG_MASKED_THREAD_CREATED":                                157,
		"COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED":                   158,
		"CAG_INVITE_AUTO_ADD":                                      159,
		"BIZ_CHAT_ASSIGNMENT_UNASSIGN":                             160,
		"CAG_INVITE_AUTO_JOINED":                                   161,
		"SCHEDULED_CALL_START_MESSAGE":                             162,
		"COMMUNITY_INVITE_RICH":                                    163,
		"COMMUNITY_INVITE_AUTO_ADD_RICH":                           164,
		"SUB_GROUP_INVITE_RICH":                                    165,
		"SUB_GROUP_PARTICIPANT_ADD_RICH":                           166,
		"COMMUNITY_LINK_PARENT_GROUP_RICH":                         167,
		"COMMUNITY_PARTICIPANT_ADD_RICH":                           168,
		"SILENCED_UNKNOWN_CALLER_AUDIO":                            169,
		"SILENCED_UNKNOWN_CALLER_VIDEO":                            170,
		"GROUP_MEMBER_ADD_MODE":                                    171,
		"GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD":     172,
		"COMMUNITY_CHANGE_DESCRIPTION":                             173,
		"SENDER_INVITE":                                            174,
		"RECEIVER_INVITE":                                          175,
		"COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS":                      176,
		"PINNED_MESSAGE_IN_CHAT":                                   177,
		"PAYMENT_INVITE_SETUP_INVITER":                             178,
		"PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY":                179,
		"PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE":            180,
		"LINKED_GROUP_CALL_START":                                  181,
		"REPORT_TO_ADMIN_ENABLED_STATUS":                           182,
		"EMPTY_SUBGROUP_CREATE":                                    183,
		"SCHEDULED_CALL_CANCEL":                                    184,
		"SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH":                   185,
		"GROUP_CHANGE_RECENT_HISTORY_SHARING":                      186,
		"PAID_MESSAGE_SERVER_CAMPAIGN_ID":                          187,
		"GENERAL_CHAT_CREATE":                                      188,
		"GENERAL_CHAT_ADD":                                         189,
		"GENERAL_CHAT_AUTO_ADD_DISABLED":                           190,
		"SUGGESTED_SUBGROUP_ANNOUNCE":                              191,
		"BIZ_BOT_1P_MESSAGING_ENABLED":                             192,
		"CHANGE_USERNAME":                                          193,
		"BIZ_COEX_PRIVACY_INIT_SELF":                               194,
		"BIZ_COEX_PRIVACY_TRANSITION_SELF":                         195,
		"SUPPORT_AI_EDUCATION":                                     196,
		"BIZ_BOT_3P_MESSAGING_ENABLED":                             197,
		"REMINDER_SETUP_MESSAGE":                                   198,
		"REMINDER_SENT_MESSAGE":                                    199,
		"REMINDER_CANCEL_MESSAGE":                                  200,
	}
)

func (x WebMessageInfo_StubType) Enum() *WebMessageInfo_StubType {
	p := new(WebMessageInfo_StubType)
	*p = x
	return p
}

func (x WebMessageInfo_StubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebMessageInfo_StubType) Descriptor() protoreflect.EnumDescriptor {
	return file_WAProto_proto_enumTypes[84].Descriptor()
}

func (WebMessageInfo_StubType) Type() protoreflect.EnumType {
	return &file_WAProto_proto_enumTypes[84]
}

func (x WebMessageInfo_StubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WebMessageInfo_StubType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WebMessageInfo_StubType(num)
	return nil
}

// Deprecated: Use WebMessageInfo_StubType.Descriptor instead.
func (WebMessageInfo_StubType) EnumDescriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{105, 2}
}

type ADVDeviceIdentity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawId         *uint32                `protobuf:"varint,1,opt,name=rawId" json:"rawId,omitempty"`
	Timestamp     *uint64                `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	KeyIndex      *uint32                `protobuf:"varint,3,opt,name=keyIndex" json:"keyIndex,omitempty"`
	AccountType   *ADVEncryptionType     `protobuf:"varint,4,opt,name=accountType,enum=proto.ADVEncryptionType" json:"accountType,omitempty"`
	DeviceType    *ADVEncryptionType     `protobuf:"varint,5,opt,name=deviceType,enum=proto.ADVEncryptionType" json:"deviceType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ADVDeviceIdentity) Reset() {
	*x = ADVDeviceIdentity{}
	mi := &file_WAProto_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ADVDeviceIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADVDeviceIdentity) ProtoMessage() {}

func (x *ADVDeviceIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADVDeviceIdentity.ProtoReflect.Descriptor instead.
func (*ADVDeviceIdentity) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{0}
}

func (x *ADVDeviceIdentity) GetRawId() uint32 {
	if x != nil && x.RawId != nil {
		return *x.RawId
	}
	return 0
}

func (x *ADVDeviceIdentity) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ADVDeviceIdentity) GetKeyIndex() uint32 {
	if x != nil && x.KeyIndex != nil {
		return *x.KeyIndex
	}
	return 0
}

func (x *ADVDeviceIdentity) GetAccountType() ADVEncryptionType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return ADVEncryptionType_E2EE
}

func (x *ADVDeviceIdentity) GetDeviceType() ADVEncryptionType {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ADVEncryptionType_E2EE
}

type ADVKeyIndexList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawId         *uint32                `protobuf:"varint,1,opt,name=rawId" json:"rawId,omitempty"`
	Timestamp     *uint64                `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	CurrentIndex  *uint32                `protobuf:"varint,3,opt,name=currentIndex" json:"currentIndex,omitempty"`
	ValidIndexes  []uint32               `protobuf:"varint,4,rep,packed,name=validIndexes" json:"validIndexes,omitempty"`
	AccountType   *ADVEncryptionType     `protobuf:"varint,5,opt,name=accountType,enum=proto.ADVEncryptionType" json:"accountType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ADVKeyIndexList) Reset() {
	*x = ADVKeyIndexList{}
	mi := &file_WAProto_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ADVKeyIndexList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADVKeyIndexList) ProtoMessage() {}

func (x *ADVKeyIndexList) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADVKeyIndexList.ProtoReflect.Descriptor instead.
func (*ADVKeyIndexList) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{1}
}

func (x *ADVKeyIndexList) GetRawId() uint32 {
	if x != nil && x.RawId != nil {
		return *x.RawId
	}
	return 0
}

func (x *ADVKeyIndexList) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ADVKeyIndexList) GetCurrentIndex() uint32 {
	if x != nil && x.CurrentIndex != nil {
		return *x.CurrentIndex
	}
	return 0
}

func (x *ADVKeyIndexList) GetValidIndexes() []uint32 {
	if x != nil {
		return x.ValidIndexes
	}
	return nil
}

func (x *ADVKeyIndexList) GetAccountType() ADVEncryptionType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return ADVEncryptionType_E2EE
}

type ADVSignedDeviceIdentity struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Details             []byte                 `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	AccountSignatureKey []byte                 `protobuf:"bytes,2,opt,name=accountSignatureKey" json:"accountSignatureKey,omitempty"`
	AccountSignature    []byte                 `protobuf:"bytes,3,opt,name=accountSignature" json:"accountSignature,omitempty"`
	DeviceSignature     []byte                 `protobuf:"bytes,4,opt,name=deviceSignature" json:"deviceSignature,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ADVSignedDeviceIdentity) Reset() {
	*x = ADVSignedDeviceIdentity{}
	mi := &file_WAProto_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ADVSignedDeviceIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADVSignedDeviceIdentity) ProtoMessage() {}

func (x *ADVSignedDeviceIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADVSignedDeviceIdentity.ProtoReflect.Descriptor instead.
func (*ADVSignedDeviceIdentity) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{2}
}

func (x *ADVSignedDeviceIdentity) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ADVSignedDeviceIdentity) GetAccountSignatureKey() []byte {
	if x != nil {
		return x.AccountSignatureKey
	}
	return nil
}

func (x *ADVSignedDeviceIdentity) GetAccountSignature() []byte {
	if x != nil {
		return x.AccountSignature
	}
	return nil
}

func (x *ADVSignedDeviceIdentity) GetDeviceSignature() []byte {
	if x != nil {
		return x.DeviceSignature
	}
	return nil
}

type ADVSignedDeviceIdentityHMAC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Details       []byte                 `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	Hmac          []byte                 `protobuf:"bytes,2,opt,name=hmac" json:"hmac,omitempty"`
	AccountType   *ADVEncryptionType     `protobuf:"varint,3,opt,name=accountType,enum=proto.ADVEncryptionType" json:"accountType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ADVSignedDeviceIdentityHMAC) Reset() {
	*x = ADVSignedDeviceIdentityHMAC{}
	mi := &file_WAProto_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ADVSignedDeviceIdentityHMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADVSignedDeviceIdentityHMAC) ProtoMessage() {}

func (x *ADVSignedDeviceIdentityHMAC) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADVSignedDeviceIdentityHMAC.ProtoReflect.Descriptor instead.
func (*ADVSignedDeviceIdentityHMAC) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{3}
}

func (x *ADVSignedDeviceIdentityHMAC) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ADVSignedDeviceIdentityHMAC) GetHmac() []byte {
	if x != nil {
		return x.Hmac
	}
	return nil
}

func (x *ADVSignedDeviceIdentityHMAC) GetAccountType() ADVEncryptionType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return ADVEncryptionType_E2EE
}

type ADVSignedKeyIndexList struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Details             []byte                 `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	AccountSignature    []byte                 `protobuf:"bytes,2,opt,name=accountSignature" json:"accountSignature,omitempty"`
	AccountSignatureKey []byte                 `protobuf:"bytes,3,opt,name=accountSignatureKey" json:"accountSignatureKey,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ADVSignedKeyIndexList) Reset() {
	*x = ADVSignedKeyIndexList{}
	mi := &file_WAProto_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ADVSignedKeyIndexList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADVSignedKeyIndexList) ProtoMessage() {}

func (x *ADVSignedKeyIndexList) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADVSignedKeyIndexList.ProtoReflect.Descriptor instead.
func (*ADVSignedKeyIndexList) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{4}
}

func (x *ADVSignedKeyIndexList) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ADVSignedKeyIndexList) GetAccountSignature() []byte {
	if x != nil {
		return x.AccountSignature
	}
	return nil
}

func (x *ADVSignedKeyIndexList) GetAccountSignatureKey() []byte {
	if x != nil {
		return x.AccountSignatureKey
	}
	return nil
}

type ActionLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           *string                `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	ButtonTitle   *string                `protobuf:"bytes,2,opt,name=buttonTitle" json:"buttonTitle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionLink) Reset() {
	*x = ActionLink{}
	mi := &file_WAProto_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionLink) ProtoMessage() {}

func (x *ActionLink) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionLink.ProtoReflect.Descriptor instead.
func (*ActionLink) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{5}
}

func (x *ActionLink) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *ActionLink) GetButtonTitle() string {
	if x != nil && x.ButtonTitle != nil {
		return *x.ButtonTitle
	}
	return ""
}

type AutoDownloadSettings struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DownloadImages    *bool                  `protobuf:"varint,1,opt,name=downloadImages" json:"downloadImages,omitempty"`
	DownloadAudio     *bool                  `protobuf:"varint,2,opt,name=downloadAudio" json:"downloadAudio,omitempty"`
	DownloadVideo     *bool                  `protobuf:"varint,3,opt,name=downloadVideo" json:"downloadVideo,omitempty"`
	DownloadDocuments *bool                  `protobuf:"varint,4,opt,name=downloadDocuments" json:"downloadDocuments,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AutoDownloadSettings) Reset() {
	*x = AutoDownloadSettings{}
	mi := &file_WAProto_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoDownloadSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoDownloadSettings) ProtoMessage() {}

func (x *AutoDownloadSettings) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoDownloadSettings.ProtoReflect.Descriptor instead.
func (*AutoDownloadSettings) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{6}
}

func (x *AutoDownloadSettings) GetDownloadImages() bool {
	if x != nil && x.DownloadImages != nil {
		return *x.DownloadImages
	}
	return false
}

func (x *AutoDownloadSettings) GetDownloadAudio() bool {
	if x != nil && x.DownloadAudio != nil {
		return *x.DownloadAudio
	}
	return false
}

func (x *AutoDownloadSettings) GetDownloadVideo() bool {
	if x != nil && x.DownloadVideo != nil {
		return *x.DownloadVideo
	}
	return false
}

func (x *AutoDownloadSettings) GetDownloadDocuments() bool {
	if x != nil && x.DownloadDocuments != nil {
		return *x.DownloadDocuments
	}
	return false
}

type AvatarUserSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fbid          *string                `protobuf:"bytes,1,opt,name=fbid" json:"fbid,omitempty"`
	Password      *string                `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AvatarUserSettings) Reset() {
	*x = AvatarUserSettings{}
	mi := &file_WAProto_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarUserSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarUserSettings) ProtoMessage() {}

func (x *AvatarUserSettings) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarUserSettings.ProtoReflect.Descriptor instead.
func (*AvatarUserSettings) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{7}
}

func (x *AvatarUserSettings) GetFbid() string {
	if x != nil && x.Fbid != nil {
		return *x.Fbid
	}
	return ""
}

func (x *AvatarUserSettings) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type BizAccountLinkInfo struct {
	state               protoimpl.MessageState              `protogen:"open.v1"`
	WhatsappBizAcctFbid *uint64                             `protobuf:"varint,1,opt,name=whatsappBizAcctFbid" json:"whatsappBizAcctFbid,omitempty"`
	WhatsappAcctNumber  *string                             `protobuf:"bytes,2,opt,name=whatsappAcctNumber" json:"whatsappAcctNumber,omitempty"`
	IssueTime           *uint64                             `protobuf:"varint,3,opt,name=issueTime" json:"issueTime,omitempty"`
	HostStorage         *BizAccountLinkInfo_HostStorageType `protobuf:"varint,4,opt,name=hostStorage,enum=proto.BizAccountLinkInfo_HostStorageType" json:"hostStorage,omitempty"`
	AccountType         *BizAccountLinkInfo_AccountType     `protobuf:"varint,5,opt,name=accountType,enum=proto.BizAccountLinkInfo_AccountType" json:"accountType,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BizAccountLinkInfo) Reset() {
	*x = BizAccountLinkInfo{}
	mi := &file_WAProto_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BizAccountLinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizAccountLinkInfo) ProtoMessage() {}

func (x *BizAccountLinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizAccountLinkInfo.ProtoReflect.Descriptor instead.
func (*BizAccountLinkInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{8}
}

func (x *BizAccountLinkInfo) GetWhatsappBizAcctFbid() uint64 {
	if x != nil && x.WhatsappBizAcctFbid != nil {
		return *x.WhatsappBizAcctFbid
	}
	return 0
}

func (x *BizAccountLinkInfo) GetWhatsappAcctNumber() string {
	if x != nil && x.WhatsappAcctNumber != nil {
		return *x.WhatsappAcctNumber
	}
	return ""
}

func (x *BizAccountLinkInfo) GetIssueTime() uint64 {
	if x != nil && x.IssueTime != nil {
		return *x.IssueTime
	}
	return 0
}

func (x *BizAccountLinkInfo) GetHostStorage() BizAccountLinkInfo_HostStorageType {
	if x != nil && x.HostStorage != nil {
		return *x.HostStorage
	}
	return BizAccountLinkInfo_ON_PREMISE
}

func (x *BizAccountLinkInfo) GetAccountType() BizAccountLinkInfo_AccountType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return BizAccountLinkInfo_ENTERPRISE
}

type BizAccountPayload struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	VnameCert       *VerifiedNameCertificate `protobuf:"bytes,1,opt,name=vnameCert" json:"vnameCert,omitempty"`
	BizAcctLinkInfo []byte                   `protobuf:"bytes,2,opt,name=bizAcctLinkInfo" json:"bizAcctLinkInfo,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BizAccountPayload) Reset() {
	*x = BizAccountPayload{}
	mi := &file_WAProto_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BizAccountPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizAccountPayload) ProtoMessage() {}

func (x *BizAccountPayload) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizAccountPayload.ProtoReflect.Descriptor instead.
func (*BizAccountPayload) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{9}
}

func (x *BizAccountPayload) GetVnameCert() *VerifiedNameCertificate {
	if x != nil {
		return x.VnameCert
	}
	return nil
}

func (x *BizAccountPayload) GetBizAcctLinkInfo() []byte {
	if x != nil {
		return x.BizAcctLinkInfo
	}
	return nil
}

type BizIdentityInfo struct {
	state           protoimpl.MessageState              `protogen:"open.v1"`
	Vlevel          *BizIdentityInfo_VerifiedLevelValue `protobuf:"varint,1,opt,name=vlevel,enum=proto.BizIdentityInfo_VerifiedLevelValue" json:"vlevel,omitempty"`
	VnameCert       *VerifiedNameCertificate            `protobuf:"bytes,2,opt,name=vnameCert" json:"vnameCert,omitempty"`
	Signed          *bool                               `protobuf:"varint,3,opt,name=signed" json:"signed,omitempty"`
	Revoked         *bool                               `protobuf:"varint,4,opt,name=revoked" json:"revoked,omitempty"`
	HostStorage     *BizIdentityInfo_HostStorageType    `protobuf:"varint,5,opt,name=hostStorage,enum=proto.BizIdentityInfo_HostStorageType" json:"hostStorage,omitempty"`
	ActualActors    *BizIdentityInfo_ActualActorsType   `protobuf:"varint,6,opt,name=actualActors,enum=proto.BizIdentityInfo_ActualActorsType" json:"actualActors,omitempty"`
	PrivacyModeTs   *uint64                             `protobuf:"varint,7,opt,name=privacyModeTs" json:"privacyModeTs,omitempty"`
	FeatureControls *uint64                             `protobuf:"varint,8,opt,name=featureControls" json:"featureControls,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BizIdentityInfo) Reset() {
	*x = BizIdentityInfo{}
	mi := &file_WAProto_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BizIdentityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizIdentityInfo) ProtoMessage() {}

func (x *BizIdentityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizIdentityInfo.ProtoReflect.Descriptor instead.
func (*BizIdentityInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{10}
}

func (x *BizIdentityInfo) GetVlevel() BizIdentityInfo_VerifiedLevelValue {
	if x != nil && x.Vlevel != nil {
		return *x.Vlevel
	}
	return BizIdentityInfo_UNKNOWN
}

func (x *BizIdentityInfo) GetVnameCert() *VerifiedNameCertificate {
	if x != nil {
		return x.VnameCert
	}
	return nil
}

func (x *BizIdentityInfo) GetSigned() bool {
	if x != nil && x.Signed != nil {
		return *x.Signed
	}
	return false
}

func (x *BizIdentityInfo) GetRevoked() bool {
	if x != nil && x.Revoked != nil {
		return *x.Revoked
	}
	return false
}

func (x *BizIdentityInfo) GetHostStorage() BizIdentityInfo_HostStorageType {
	if x != nil && x.HostStorage != nil {
		return *x.HostStorage
	}
	return BizIdentityInfo_ON_PREMISE
}

func (x *BizIdentityInfo) GetActualActors() BizIdentityInfo_ActualActorsType {
	if x != nil && x.ActualActors != nil {
		return *x.ActualActors
	}
	return BizIdentityInfo_SELF
}

func (x *BizIdentityInfo) GetPrivacyModeTs() uint64 {
	if x != nil && x.PrivacyModeTs != nil {
		return *x.PrivacyModeTs
	}
	return 0
}

func (x *BizIdentityInfo) GetFeatureControls() uint64 {
	if x != nil && x.FeatureControls != nil {
		return *x.FeatureControls
	}
	return 0
}

type BotAvatarMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sentiment     *uint32                `protobuf:"varint,1,opt,name=sentiment" json:"sentiment,omitempty"`
	BehaviorGraph *string                `protobuf:"bytes,2,opt,name=behaviorGraph" json:"behaviorGraph,omitempty"`
	Action        *uint32                `protobuf:"varint,3,opt,name=action" json:"action,omitempty"`
	Intensity     *uint32                `protobuf:"varint,4,opt,name=intensity" json:"intensity,omitempty"`
	WordCount     *uint32                `protobuf:"varint,5,opt,name=wordCount" json:"wordCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BotAvatarMetadata) Reset() {
	*x = BotAvatarMetadata{}
	mi := &file_WAProto_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotAvatarMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotAvatarMetadata) ProtoMessage() {}

func (x *BotAvatarMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotAvatarMetadata.ProtoReflect.Descriptor instead.
func (*BotAvatarMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{11}
}

func (x *BotAvatarMetadata) GetSentiment() uint32 {
	if x != nil && x.Sentiment != nil {
		return *x.Sentiment
	}
	return 0
}

func (x *BotAvatarMetadata) GetBehaviorGraph() string {
	if x != nil && x.BehaviorGraph != nil {
		return *x.BehaviorGraph
	}
	return ""
}

func (x *BotAvatarMetadata) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

func (x *BotAvatarMetadata) GetIntensity() uint32 {
	if x != nil && x.Intensity != nil {
		return *x.Intensity
	}
	return 0
}

func (x *BotAvatarMetadata) GetWordCount() uint32 {
	if x != nil && x.WordCount != nil {
		return *x.WordCount
	}
	return 0
}

type BotMetadata struct {
	state                   protoimpl.MessageState      `protogen:"open.v1"`
	AvatarMetadata          *BotAvatarMetadata          `protobuf:"bytes,1,opt,name=avatarMetadata" json:"avatarMetadata,omitempty"`
	PersonaId               *string                     `protobuf:"bytes,2,opt,name=personaId" json:"personaId,omitempty"`
	PluginMetadata          *BotPluginMetadata          `protobuf:"bytes,3,opt,name=pluginMetadata" json:"pluginMetadata,omitempty"`
	SuggestedPromptMetadata *BotSuggestedPromptMetadata `protobuf:"bytes,4,opt,name=suggestedPromptMetadata" json:"suggestedPromptMetadata,omitempty"`
	InvokerJid              *string                     `protobuf:"bytes,5,opt,name=invokerJid" json:"invokerJid,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *BotMetadata) Reset() {
	*x = BotMetadata{}
	mi := &file_WAProto_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotMetadata) ProtoMessage() {}

func (x *BotMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotMetadata.ProtoReflect.Descriptor instead.
func (*BotMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{12}
}

func (x *BotMetadata) GetAvatarMetadata() *BotAvatarMetadata {
	if x != nil {
		return x.AvatarMetadata
	}
	return nil
}

func (x *BotMetadata) GetPersonaId() string {
	if x != nil && x.PersonaId != nil {
		return *x.PersonaId
	}
	return ""
}

func (x *BotMetadata) GetPluginMetadata() *BotPluginMetadata {
	if x != nil {
		return x.PluginMetadata
	}
	return nil
}

func (x *BotMetadata) GetSuggestedPromptMetadata() *BotSuggestedPromptMetadata {
	if x != nil {
		return x.SuggestedPromptMetadata
	}
	return nil
}

func (x *BotMetadata) GetInvokerJid() string {
	if x != nil && x.InvokerJid != nil {
		return *x.InvokerJid
	}
	return ""
}

type BotPluginMetadata struct {
	state              protoimpl.MessageState            `protogen:"open.v1"`
	Provider           *BotPluginMetadata_SearchProvider `protobuf:"varint,1,opt,name=provider,enum=proto.BotPluginMetadata_SearchProvider" json:"provider,omitempty"`
	PluginType         *BotPluginMetadata_PluginType     `protobuf:"varint,2,opt,name=pluginType,enum=proto.BotPluginMetadata_PluginType" json:"pluginType,omitempty"`
	ThumbnailCdnUrl    *string                           `protobuf:"bytes,3,opt,name=thumbnailCdnUrl" json:"thumbnailCdnUrl,omitempty"`
	ProfilePhotoCdnUrl *string                           `protobuf:"bytes,4,opt,name=profilePhotoCdnUrl" json:"profilePhotoCdnUrl,omitempty"`
	SearchProviderUrl  *string                           `protobuf:"bytes,5,opt,name=searchProviderUrl" json:"searchProviderUrl,omitempty"`
	ReferenceIndex     *uint32                           `protobuf:"varint,6,opt,name=referenceIndex" json:"referenceIndex,omitempty"`
	ExpectedLinksCount *uint32                           `protobuf:"varint,7,opt,name=expectedLinksCount" json:"expectedLinksCount,omitempty"`
	PluginVersion      *uint32                           `protobuf:"varint,8,opt,name=pluginVersion" json:"pluginVersion,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BotPluginMetadata) Reset() {
	*x = BotPluginMetadata{}
	mi := &file_WAProto_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotPluginMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotPluginMetadata) ProtoMessage() {}

func (x *BotPluginMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotPluginMetadata.ProtoReflect.Descriptor instead.
func (*BotPluginMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{13}
}

func (x *BotPluginMetadata) GetProvider() BotPluginMetadata_SearchProvider {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return BotPluginMetadata_BING
}

func (x *BotPluginMetadata) GetPluginType() BotPluginMetadata_PluginType {
	if x != nil && x.PluginType != nil {
		return *x.PluginType
	}
	return BotPluginMetadata_REELS
}

func (x *BotPluginMetadata) GetThumbnailCdnUrl() string {
	if x != nil && x.ThumbnailCdnUrl != nil {
		return *x.ThumbnailCdnUrl
	}
	return ""
}

func (x *BotPluginMetadata) GetProfilePhotoCdnUrl() string {
	if x != nil && x.ProfilePhotoCdnUrl != nil {
		return *x.ProfilePhotoCdnUrl
	}
	return ""
}

func (x *BotPluginMetadata) GetSearchProviderUrl() string {
	if x != nil && x.SearchProviderUrl != nil {
		return *x.SearchProviderUrl
	}
	return ""
}

func (x *BotPluginMetadata) GetReferenceIndex() uint32 {
	if x != nil && x.ReferenceIndex != nil {
		return *x.ReferenceIndex
	}
	return 0
}

func (x *BotPluginMetadata) GetExpectedLinksCount() uint32 {
	if x != nil && x.ExpectedLinksCount != nil {
		return *x.ExpectedLinksCount
	}
	return 0
}

func (x *BotPluginMetadata) GetPluginVersion() uint32 {
	if x != nil && x.PluginVersion != nil {
		return *x.PluginVersion
	}
	return 0
}

type BotSuggestedPromptMetadata struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SuggestedPrompts    []string               `protobuf:"bytes,1,rep,name=suggestedPrompts" json:"suggestedPrompts,omitempty"`
	SelectedPromptIndex *uint32                `protobuf:"varint,2,opt,name=selectedPromptIndex" json:"selectedPromptIndex,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BotSuggestedPromptMetadata) Reset() {
	*x = BotSuggestedPromptMetadata{}
	mi := &file_WAProto_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotSuggestedPromptMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotSuggestedPromptMetadata) ProtoMessage() {}

func (x *BotSuggestedPromptMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotSuggestedPromptMetadata.ProtoReflect.Descriptor instead.
func (*BotSuggestedPromptMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{14}
}

func (x *BotSuggestedPromptMetadata) GetSuggestedPrompts() []string {
	if x != nil {
		return x.SuggestedPrompts
	}
	return nil
}

func (x *BotSuggestedPromptMetadata) GetSelectedPromptIndex() uint32 {
	if x != nil && x.SelectedPromptIndex != nil {
		return *x.SelectedPromptIndex
	}
	return 0
}

type CallLogRecord struct {
	state           protoimpl.MessageState           `protogen:"open.v1"`
	CallResult      *CallLogRecord_CallResult        `protobuf:"varint,1,opt,name=callResult,enum=proto.CallLogRecord_CallResult" json:"callResult,omitempty"`
	IsDndMode       *bool                            `protobuf:"varint,2,opt,name=isDndMode" json:"isDndMode,omitempty"`
	SilenceReason   *CallLogRecord_SilenceReason     `protobuf:"varint,3,opt,name=silenceReason,enum=proto.CallLogRecord_SilenceReason" json:"silenceReason,omitempty"`
	Duration        *int64                           `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	StartTime       *int64                           `protobuf:"varint,5,opt,name=startTime" json:"startTime,omitempty"`
	IsIncoming      *bool                            `protobuf:"varint,6,opt,name=isIncoming" json:"isIncoming,omitempty"`
	IsVideo         *bool                            `protobuf:"varint,7,opt,name=isVideo" json:"isVideo,omitempty"`
	IsCallLink      *bool                            `protobuf:"varint,8,opt,name=isCallLink" json:"isCallLink,omitempty"`
	CallLinkToken   *string                          `protobuf:"bytes,9,opt,name=callLinkToken" json:"callLinkToken,omitempty"`
	ScheduledCallId *string                          `protobuf:"bytes,10,opt,name=scheduledCallId" json:"scheduledCallId,omitempty"`
	CallId          *string                          `protobuf:"bytes,11,opt,name=callId" json:"callId,omitempty"`
	CallCreatorJid  *string                          `protobuf:"bytes,12,opt,name=callCreatorJid" json:"callCreatorJid,omitempty"`
	GroupJid        *string                          `protobuf:"bytes,13,opt,name=groupJid" json:"groupJid,omitempty"`
	Participants    []*CallLogRecord_ParticipantInfo `protobuf:"bytes,14,rep,name=participants" json:"participants,omitempty"`
	CallType        *CallLogRecord_CallType          `protobuf:"varint,15,opt,name=callType,enum=proto.CallLogRecord_CallType" json:"callType,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CallLogRecord) Reset() {
	*x = CallLogRecord{}
	mi := &file_WAProto_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallLogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallLogRecord) ProtoMessage() {}

func (x *CallLogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallLogRecord.ProtoReflect.Descriptor instead.
func (*CallLogRecord) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{15}
}

func (x *CallLogRecord) GetCallResult() CallLogRecord_CallResult {
	if x != nil && x.CallResult != nil {
		return *x.CallResult
	}
	return CallLogRecord_CONNECTED
}

func (x *CallLogRecord) GetIsDndMode() bool {
	if x != nil && x.IsDndMode != nil {
		return *x.IsDndMode
	}
	return false
}

func (x *CallLogRecord) GetSilenceReason() CallLogRecord_SilenceReason {
	if x != nil && x.SilenceReason != nil {
		return *x.SilenceReason
	}
	return CallLogRecord_NONE
}

func (x *CallLogRecord) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CallLogRecord) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CallLogRecord) GetIsIncoming() bool {
	if x != nil && x.IsIncoming != nil {
		return *x.IsIncoming
	}
	return false
}

func (x *CallLogRecord) GetIsVideo() bool {
	if x != nil && x.IsVideo != nil {
		return *x.IsVideo
	}
	return false
}

func (x *CallLogRecord) GetIsCallLink() bool {
	if x != nil && x.IsCallLink != nil {
		return *x.IsCallLink
	}
	return false
}

func (x *CallLogRecord) GetCallLinkToken() string {
	if x != nil && x.CallLinkToken != nil {
		return *x.CallLinkToken
	}
	return ""
}

func (x *CallLogRecord) GetScheduledCallId() string {
	if x != nil && x.ScheduledCallId != nil {
		return *x.ScheduledCallId
	}
	return ""
}

func (x *CallLogRecord) GetCallId() string {
	if x != nil && x.CallId != nil {
		return *x.CallId
	}
	return ""
}

func (x *CallLogRecord) GetCallCreatorJid() string {
	if x != nil && x.CallCreatorJid != nil {
		return *x.CallCreatorJid
	}
	return ""
}

func (x *CallLogRecord) GetGroupJid() string {
	if x != nil && x.GroupJid != nil {
		return *x.GroupJid
	}
	return ""
}

func (x *CallLogRecord) GetParticipants() []*CallLogRecord_ParticipantInfo {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *CallLogRecord) GetCallType() CallLogRecord_CallType {
	if x != nil && x.CallType != nil {
		return *x.CallType
	}
	return CallLogRecord_REGULAR
}

type CertChain struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Leaf          *CertChain_NoiseCertificate `protobuf:"bytes,1,opt,name=leaf" json:"leaf,omitempty"`
	Intermediate  *CertChain_NoiseCertificate `protobuf:"bytes,2,opt,name=intermediate" json:"intermediate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertChain) Reset() {
	*x = CertChain{}
	mi := &file_WAProto_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertChain) ProtoMessage() {}

func (x *CertChain) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertChain.ProtoReflect.Descriptor instead.
func (*CertChain) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{16}
}

func (x *CertChain) GetLeaf() *CertChain_NoiseCertificate {
	if x != nil {
		return x.Leaf
	}
	return nil
}

func (x *CertChain) GetIntermediate() *CertChain_NoiseCertificate {
	if x != nil {
		return x.Intermediate
	}
	return nil
}

type ChatRowOpaqueData struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	DraftMessage  *ChatRowOpaqueData_DraftMessage `protobuf:"bytes,1,opt,name=draftMessage" json:"draftMessage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatRowOpaqueData) Reset() {
	*x = ChatRowOpaqueData{}
	mi := &file_WAProto_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRowOpaqueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRowOpaqueData) ProtoMessage() {}

func (x *ChatRowOpaqueData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRowOpaqueData.ProtoReflect.Descriptor instead.
func (*ChatRowOpaqueData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{17}
}

func (x *ChatRowOpaqueData) GetDraftMessage() *ChatRowOpaqueData_DraftMessage {
	if x != nil {
		return x.DraftMessage
	}
	return nil
}

type ClientPayload struct {
	state               protoimpl.MessageState                       `protogen:"open.v1"`
	Username            *uint64                                      `protobuf:"varint,1,opt,name=username" json:"username,omitempty"`
	Passive             *bool                                        `protobuf:"varint,3,opt,name=passive" json:"passive,omitempty"`
	UserAgent           *ClientPayload_UserAgent                     `protobuf:"bytes,5,opt,name=userAgent" json:"userAgent,omitempty"`
	WebInfo             *ClientPayload_WebInfo                       `protobuf:"bytes,6,opt,name=webInfo" json:"webInfo,omitempty"`
	PushName            *string                                      `protobuf:"bytes,7,opt,name=pushName" json:"pushName,omitempty"`
	SessionId           *int32                                       `protobuf:"fixed32,9,opt,name=sessionId" json:"sessionId,omitempty"`
	ShortConnect        *bool                                        `protobuf:"varint,10,opt,name=shortConnect" json:"shortConnect,omitempty"`
	ConnectType         *ClientPayload_ConnectType                   `protobuf:"varint,12,opt,name=connectType,enum=proto.ClientPayload_ConnectType" json:"connectType,omitempty"`
	ConnectReason       *ClientPayload_ConnectReason                 `protobuf:"varint,13,opt,name=connectReason,enum=proto.ClientPayload_ConnectReason" json:"connectReason,omitempty"`
	Shards              []int32                                      `protobuf:"varint,14,rep,name=shards" json:"shards,omitempty"`
	DnsSource           *ClientPayload_DNSSource                     `protobuf:"bytes,15,opt,name=dnsSource" json:"dnsSource,omitempty"`
	ConnectAttemptCount *uint32                                      `protobuf:"varint,16,opt,name=connectAttemptCount" json:"connectAttemptCount,omitempty"`
	Device              *uint32                                      `protobuf:"varint,18,opt,name=device" json:"device,omitempty"`
	DevicePairingData   *ClientPayload_DevicePairingRegistrationData `protobuf:"bytes,19,opt,name=devicePairingData" json:"devicePairingData,omitempty"`
	Product             *ClientPayload_Product                       `protobuf:"varint,20,opt,name=product,enum=proto.ClientPayload_Product" json:"product,omitempty"`
	FbCat               []byte                                       `protobuf:"bytes,21,opt,name=fbCat" json:"fbCat,omitempty"`
	FbUserAgent         []byte                                       `protobuf:"bytes,22,opt,name=fbUserAgent" json:"fbUserAgent,omitempty"`
	Oc                  *bool                                        `protobuf:"varint,23,opt,name=oc" json:"oc,omitempty"`
	Lc                  *int32                                       `protobuf:"varint,24,opt,name=lc" json:"lc,omitempty"`
	IosAppExtension     *ClientPayload_IOSAppExtension               `protobuf:"varint,30,opt,name=iosAppExtension,enum=proto.ClientPayload_IOSAppExtension" json:"iosAppExtension,omitempty"`
	FbAppId             *uint64                                      `protobuf:"varint,31,opt,name=fbAppId" json:"fbAppId,omitempty"`
	FbDeviceId          []byte                                       `protobuf:"bytes,32,opt,name=fbDeviceId" json:"fbDeviceId,omitempty"`
	Pull                *bool                                        `protobuf:"varint,33,opt,name=pull" json:"pull,omitempty"`
	PaddingBytes        []byte                                       `protobuf:"bytes,34,opt,name=paddingBytes" json:"paddingBytes,omitempty"`
	YearClass           *int32                                       `protobuf:"varint,36,opt,name=yearClass" json:"yearClass,omitempty"`
	MemClass            *int32                                       `protobuf:"varint,37,opt,name=memClass" json:"memClass,omitempty"`
	InteropData         *ClientPayload_InteropData                   `protobuf:"bytes,38,opt,name=interopData" json:"interopData,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ClientPayload) Reset() {
	*x = ClientPayload{}
	mi := &file_WAProto_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPayload) ProtoMessage() {}

func (x *ClientPayload) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPayload.ProtoReflect.Descriptor instead.
func (*ClientPayload) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18}
}

func (x *ClientPayload) GetUsername() uint64 {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return 0
}

func (x *ClientPayload) GetPassive() bool {
	if x != nil && x.Passive != nil {
		return *x.Passive
	}
	return false
}

func (x *ClientPayload) GetUserAgent() *ClientPayload_UserAgent {
	if x != nil {
		return x.UserAgent
	}
	return nil
}

func (x *ClientPayload) GetWebInfo() *ClientPayload_WebInfo {
	if x != nil {
		return x.WebInfo
	}
	return nil
}

func (x *ClientPayload) GetPushName() string {
	if x != nil && x.PushName != nil {
		return *x.PushName
	}
	return ""
}

func (x *ClientPayload) GetSessionId() int32 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *ClientPayload) GetShortConnect() bool {
	if x != nil && x.ShortConnect != nil {
		return *x.ShortConnect
	}
	return false
}

func (x *ClientPayload) GetConnectType() ClientPayload_ConnectType {
	if x != nil && x.ConnectType != nil {
		return *x.ConnectType
	}
	return ClientPayload_CELLULAR_UNKNOWN
}

func (x *ClientPayload) GetConnectReason() ClientPayload_ConnectReason {
	if x != nil && x.ConnectReason != nil {
		return *x.ConnectReason
	}
	return ClientPayload_PUSH
}

func (x *ClientPayload) GetShards() []int32 {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *ClientPayload) GetDnsSource() *ClientPayload_DNSSource {
	if x != nil {
		return x.DnsSource
	}
	return nil
}

func (x *ClientPayload) GetConnectAttemptCount() uint32 {
	if x != nil && x.ConnectAttemptCount != nil {
		return *x.ConnectAttemptCount
	}
	return 0
}

func (x *ClientPayload) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *ClientPayload) GetDevicePairingData() *ClientPayload_DevicePairingRegistrationData {
	if x != nil {
		return x.DevicePairingData
	}
	return nil
}

func (x *ClientPayload) GetProduct() ClientPayload_Product {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ClientPayload_WHATSAPP
}

func (x *ClientPayload) GetFbCat() []byte {
	if x != nil {
		return x.FbCat
	}
	return nil
}

func (x *ClientPayload) GetFbUserAgent() []byte {
	if x != nil {
		return x.FbUserAgent
	}
	return nil
}

func (x *ClientPayload) GetOc() bool {
	if x != nil && x.Oc != nil {
		return *x.Oc
	}
	return false
}

func (x *ClientPayload) GetLc() int32 {
	if x != nil && x.Lc != nil {
		return *x.Lc
	}
	return 0
}

func (x *ClientPayload) GetIosAppExtension() ClientPayload_IOSAppExtension {
	if x != nil && x.IosAppExtension != nil {
		return *x.IosAppExtension
	}
	return ClientPayload_SHARE_EXTENSION
}

func (x *ClientPayload) GetFbAppId() uint64 {
	if x != nil && x.FbAppId != nil {
		return *x.FbAppId
	}
	return 0
}

func (x *ClientPayload) GetFbDeviceId() []byte {
	if x != nil {
		return x.FbDeviceId
	}
	return nil
}

func (x *ClientPayload) GetPull() bool {
	if x != nil && x.Pull != nil {
		return *x.Pull
	}
	return false
}

func (x *ClientPayload) GetPaddingBytes() []byte {
	if x != nil {
		return x.PaddingBytes
	}
	return nil
}

func (x *ClientPayload) GetYearClass() int32 {
	if x != nil && x.YearClass != nil {
		return *x.YearClass
	}
	return 0
}

func (x *ClientPayload) GetMemClass() int32 {
	if x != nil && x.MemClass != nil {
		return *x.MemClass
	}
	return 0
}

func (x *ClientPayload) GetInteropData() *ClientPayload_InteropData {
	if x != nil {
		return x.InteropData
	}
	return nil
}

type CommentMetadata struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CommentParentKey *MessageKey            `protobuf:"bytes,1,opt,name=commentParentKey" json:"commentParentKey,omitempty"`
	ReplyCount       *uint32                `protobuf:"varint,2,opt,name=replyCount" json:"replyCount,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CommentMetadata) Reset() {
	*x = CommentMetadata{}
	mi := &file_WAProto_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentMetadata) ProtoMessage() {}

func (x *CommentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentMetadata.ProtoReflect.Descriptor instead.
func (*CommentMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{19}
}

func (x *CommentMetadata) GetCommentParentKey() *MessageKey {
	if x != nil {
		return x.CommentParentKey
	}
	return nil
}

func (x *CommentMetadata) GetReplyCount() uint32 {
	if x != nil && x.ReplyCount != nil {
		return *x.ReplyCount
	}
	return 0
}

type ContextInfo struct {
	state                            protoimpl.MessageState                      `protogen:"open.v1"`
	StanzaId                         *string                                     `protobuf:"bytes,1,opt,name=stanzaId" json:"stanzaId,omitempty"`
	Participant                      *string                                     `protobuf:"bytes,2,opt,name=participant" json:"participant,omitempty"`
	QuotedMessage                    *Message                                    `protobuf:"bytes,3,opt,name=quotedMessage" json:"quotedMessage,omitempty"`
	RemoteJid                        *string                                     `protobuf:"bytes,4,opt,name=remoteJid" json:"remoteJid,omitempty"`
	MentionedJid                     []string                                    `protobuf:"bytes,15,rep,name=mentionedJid" json:"mentionedJid,omitempty"`
	ConversionSource                 *string                                     `protobuf:"bytes,18,opt,name=conversionSource" json:"conversionSource,omitempty"`
	ConversionData                   []byte                                      `protobuf:"bytes,19,opt,name=conversionData" json:"conversionData,omitempty"`
	ConversionDelaySeconds           *uint32                                     `protobuf:"varint,20,opt,name=conversionDelaySeconds" json:"conversionDelaySeconds,omitempty"`
	ForwardingScore                  *uint32                                     `protobuf:"varint,21,opt,name=forwardingScore" json:"forwardingScore,omitempty"`
	IsForwarded                      *bool                                       `protobuf:"varint,22,opt,name=isForwarded" json:"isForwarded,omitempty"`
	QuotedAd                         *ContextInfo_AdReplyInfo                    `protobuf:"bytes,23,opt,name=quotedAd" json:"quotedAd,omitempty"`
	PlaceholderKey                   *MessageKey                                 `protobuf:"bytes,24,opt,name=placeholderKey" json:"placeholderKey,omitempty"`
	Expiration                       *uint32                                     `protobuf:"varint,25,opt,name=expiration" json:"expiration,omitempty"`
	EphemeralSettingTimestamp        *int64                                      `protobuf:"varint,26,opt,name=ephemeralSettingTimestamp" json:"ephemeralSettingTimestamp,omitempty"`
	EphemeralSharedSecret            []byte                                      `protobuf:"bytes,27,opt,name=ephemeralSharedSecret" json:"ephemeralSharedSecret,omitempty"`
	ExternalAdReply                  *ContextInfo_ExternalAdReplyInfo            `protobuf:"bytes,28,opt,name=externalAdReply" json:"externalAdReply,omitempty"`
	EntryPointConversionSource       *string                                     `protobuf:"bytes,29,opt,name=entryPointConversionSource" json:"entryPointConversionSource,omitempty"`
	EntryPointConversionApp          *string                                     `protobuf:"bytes,30,opt,name=entryPointConversionApp" json:"entryPointConversionApp,omitempty"`
	EntryPointConversionDelaySeconds *uint32                                     `protobuf:"varint,31,opt,name=entryPointConversionDelaySeconds" json:"entryPointConversionDelaySeconds,omitempty"`
	DisappearingMode                 *DisappearingMode                           `protobuf:"bytes,32,opt,name=disappearingMode" json:"disappearingMode,omitempty"`
	ActionLink                       *ActionLink                                 `protobuf:"bytes,33,opt,name=actionLink" json:"actionLink,omitempty"`
	GroupSubject                     *string                                     `protobuf:"bytes,34,opt,name=groupSubject" json:"groupSubject,omitempty"`
	ParentGroupJid                   *string                                     `protobuf:"bytes,35,opt,name=parentGroupJid" json:"parentGroupJid,omitempty"`
	TrustBannerType                  *string                                     `protobuf:"bytes,37,opt,name=trustBannerType" json:"trustBannerType,omitempty"`
	TrustBannerAction                *uint32                                     `protobuf:"varint,38,opt,name=trustBannerAction" json:"trustBannerAction,omitempty"`
	IsSampled                        *bool                                       `protobuf:"varint,39,opt,name=isSampled" json:"isSampled,omitempty"`
	GroupMentions                    []*GroupMention                             `protobuf:"bytes,40,rep,name=groupMentions" json:"groupMentions,omitempty"`
	Utm                              *ContextInfo_UTMInfo                        `protobuf:"bytes,41,opt,name=utm" json:"utm,omitempty"`
	ForwardedNewsletterMessageInfo   *ContextInfo_ForwardedNewsletterMessageInfo `protobuf:"bytes,43,opt,name=forwardedNewsletterMessageInfo" json:"forwardedNewsletterMessageInfo,omitempty"`
	BusinessMessageForwardInfo       *ContextInfo_BusinessMessageForwardInfo     `protobuf:"bytes,44,opt,name=businessMessageForwardInfo" json:"businessMessageForwardInfo,omitempty"`
	SmbClientCampaignId              *string                                     `protobuf:"bytes,45,opt,name=smbClientCampaignId" json:"smbClientCampaignId,omitempty"`
	SmbServerCampaignId              *string                                     `protobuf:"bytes,46,opt,name=smbServerCampaignId" json:"smbServerCampaignId,omitempty"`
	DataSharingContext               *ContextInfo_DataSharingContext             `protobuf:"bytes,47,opt,name=dataSharingContext" json:"dataSharingContext,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *ContextInfo) Reset() {
	*x = ContextInfo{}
	mi := &file_WAProto_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextInfo) ProtoMessage() {}

func (x *ContextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextInfo.ProtoReflect.Descriptor instead.
func (*ContextInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{20}
}

func (x *ContextInfo) GetStanzaId() string {
	if x != nil && x.StanzaId != nil {
		return *x.StanzaId
	}
	return ""
}

func (x *ContextInfo) GetParticipant() string {
	if x != nil && x.Participant != nil {
		return *x.Participant
	}
	return ""
}

func (x *ContextInfo) GetQuotedMessage() *Message {
	if x != nil {
		return x.QuotedMessage
	}
	return nil
}

func (x *ContextInfo) GetRemoteJid() string {
	if x != nil && x.RemoteJid != nil {
		return *x.RemoteJid
	}
	return ""
}

func (x *ContextInfo) GetMentionedJid() []string {
	if x != nil {
		return x.MentionedJid
	}
	return nil
}

func (x *ContextInfo) GetConversionSource() string {
	if x != nil && x.ConversionSource != nil {
		return *x.ConversionSource
	}
	return ""
}

func (x *ContextInfo) GetConversionData() []byte {
	if x != nil {
		return x.ConversionData
	}
	return nil
}

func (x *ContextInfo) GetConversionDelaySeconds() uint32 {
	if x != nil && x.ConversionDelaySeconds != nil {
		return *x.ConversionDelaySeconds
	}
	return 0
}

func (x *ContextInfo) GetForwardingScore() uint32 {
	if x != nil && x.ForwardingScore != nil {
		return *x.ForwardingScore
	}
	return 0
}

func (x *ContextInfo) GetIsForwarded() bool {
	if x != nil && x.IsForwarded != nil {
		return *x.IsForwarded
	}
	return false
}

func (x *ContextInfo) GetQuotedAd() *ContextInfo_AdReplyInfo {
	if x != nil {
		return x.QuotedAd
	}
	return nil
}

func (x *ContextInfo) GetPlaceholderKey() *MessageKey {
	if x != nil {
		return x.PlaceholderKey
	}
	return nil
}

func (x *ContextInfo) GetExpiration() uint32 {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return 0
}

func (x *ContextInfo) GetEphemeralSettingTimestamp() int64 {
	if x != nil && x.EphemeralSettingTimestamp != nil {
		return *x.EphemeralSettingTimestamp
	}
	return 0
}

func (x *ContextInfo) GetEphemeralSharedSecret() []byte {
	if x != nil {
		return x.EphemeralSharedSecret
	}
	return nil
}

func (x *ContextInfo) GetExternalAdReply() *ContextInfo_ExternalAdReplyInfo {
	if x != nil {
		return x.ExternalAdReply
	}
	return nil
}

func (x *ContextInfo) GetEntryPointConversionSource() string {
	if x != nil && x.EntryPointConversionSource != nil {
		return *x.EntryPointConversionSource
	}
	return ""
}

func (x *ContextInfo) GetEntryPointConversionApp() string {
	if x != nil && x.EntryPointConversionApp != nil {
		return *x.EntryPointConversionApp
	}
	return ""
}

func (x *ContextInfo) GetEntryPointConversionDelaySeconds() uint32 {
	if x != nil && x.EntryPointConversionDelaySeconds != nil {
		return *x.EntryPointConversionDelaySeconds
	}
	return 0
}

func (x *ContextInfo) GetDisappearingMode() *DisappearingMode {
	if x != nil {
		return x.DisappearingMode
	}
	return nil
}

func (x *ContextInfo) GetActionLink() *ActionLink {
	if x != nil {
		return x.ActionLink
	}
	return nil
}

func (x *ContextInfo) GetGroupSubject() string {
	if x != nil && x.GroupSubject != nil {
		return *x.GroupSubject
	}
	return ""
}

func (x *ContextInfo) GetParentGroupJid() string {
	if x != nil && x.ParentGroupJid != nil {
		return *x.ParentGroupJid
	}
	return ""
}

func (x *ContextInfo) GetTrustBannerType() string {
	if x != nil && x.TrustBannerType != nil {
		return *x.TrustBannerType
	}
	return ""
}

func (x *ContextInfo) GetTrustBannerAction() uint32 {
	if x != nil && x.TrustBannerAction != nil {
		return *x.TrustBannerAction
	}
	return 0
}

func (x *ContextInfo) GetIsSampled() bool {
	if x != nil && x.IsSampled != nil {
		return *x.IsSampled
	}
	return false
}

func (x *ContextInfo) GetGroupMentions() []*GroupMention {
	if x != nil {
		return x.GroupMentions
	}
	return nil
}

func (x *ContextInfo) GetUtm() *ContextInfo_UTMInfo {
	if x != nil {
		return x.Utm
	}
	return nil
}

func (x *ContextInfo) GetForwardedNewsletterMessageInfo() *ContextInfo_ForwardedNewsletterMessageInfo {
	if x != nil {
		return x.ForwardedNewsletterMessageInfo
	}
	return nil
}

func (x *ContextInfo) GetBusinessMessageForwardInfo() *ContextInfo_BusinessMessageForwardInfo {
	if x != nil {
		return x.BusinessMessageForwardInfo
	}
	return nil
}

func (x *ContextInfo) GetSmbClientCampaignId() string {
	if x != nil && x.SmbClientCampaignId != nil {
		return *x.SmbClientCampaignId
	}
	return ""
}

func (x *ContextInfo) GetSmbServerCampaignId() string {
	if x != nil && x.SmbServerCampaignId != nil {
		return *x.SmbServerCampaignId
	}
	return ""
}

func (x *ContextInfo) GetDataSharingContext() *ContextInfo_DataSharingContext {
	if x != nil {
		return x.DataSharingContext
	}
	return nil
}

type Conversation struct {
	state                     protoimpl.MessageState                 `protogen:"open.v1"`
	Id                        *string                                `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Messages                  []*HistorySyncMsg                      `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
	NewJid                    *string                                `protobuf:"bytes,3,opt,name=newJid" json:"newJid,omitempty"`
	OldJid                    *string                                `protobuf:"bytes,4,opt,name=oldJid" json:"oldJid,omitempty"`
	LastMsgTimestamp          *uint64                                `protobuf:"varint,5,opt,name=lastMsgTimestamp" json:"lastMsgTimestamp,omitempty"`
	UnreadCount               *uint32                                `protobuf:"varint,6,opt,name=unreadCount" json:"unreadCount,omitempty"`
	ReadOnly                  *bool                                  `protobuf:"varint,7,opt,name=readOnly" json:"readOnly,omitempty"`
	EndOfHistoryTransfer      *bool                                  `protobuf:"varint,8,opt,name=endOfHistoryTransfer" json:"endOfHistoryTransfer,omitempty"`
	EphemeralExpiration       *uint32                                `protobuf:"varint,9,opt,name=ephemeralExpiration" json:"ephemeralExpiration,omitempty"`
	EphemeralSettingTimestamp *int64                                 `protobuf:"varint,10,opt,name=ephemeralSettingTimestamp" json:"ephemeralSettingTimestamp,omitempty"`
	EndOfHistoryTransferType  *Conversation_EndOfHistoryTransferType `protobuf:"varint,11,opt,name=endOfHistoryTransferType,enum=proto.Conversation_EndOfHistoryTransferType" json:"endOfHistoryTransferType,omitempty"`
	ConversationTimestamp     *uint64                                `protobuf:"varint,12,opt,name=conversationTimestamp" json:"conversationTimestamp,omitempty"`
	Name                      *string                                `protobuf:"bytes,13,opt,name=name" json:"name,omitempty"`
	PHash                     *string                                `protobuf:"bytes,14,opt,name=pHash" json:"pHash,omitempty"`
	NotSpam                   *bool                                  `protobuf:"varint,15,opt,name=notSpam" json:"notSpam,omitempty"`
	Archived                  *bool                                  `protobuf:"varint,16,opt,name=archived" json:"archived,omitempty"`
	DisappearingMode          *DisappearingMode                      `protobuf:"bytes,17,opt,name=disappearingMode" json:"disappearingMode,omitempty"`
	UnreadMentionCount        *uint32                                `protobuf:"varint,18,opt,name=unreadMentionCount" json:"unreadMentionCount,omitempty"`
	MarkedAsUnread            *bool                                  `protobuf:"varint,19,opt,name=markedAsUnread" json:"markedAsUnread,omitempty"`
	Participant               []*GroupParticipant                    `protobuf:"bytes,20,rep,name=participant" json:"participant,omitempty"`
	TcToken                   []byte                                 `protobuf:"bytes,21,opt,name=tcToken" json:"tcToken,omitempty"`
	TcTokenTimestamp          *uint64                                `protobuf:"varint,22,opt,name=tcTokenTimestamp" json:"tcTokenTimestamp,omitempty"`
	ContactPrimaryIdentityKey []byte                                 `protobuf:"bytes,23,opt,name=contactPrimaryIdentityKey" json:"contactPrimaryIdentityKey,omitempty"`
	Pinned                    *uint32                                `protobuf:"varint,24,opt,name=pinned" json:"pinned,omitempty"`
	MuteEndTime               *uint64                                `protobuf:"varint,25,opt,name=muteEndTime" json:"muteEndTime,omitempty"`
	Wallpaper                 *WallpaperSettings                     `protobuf:"bytes,26,opt,name=wallpaper" json:"wallpaper,omitempty"`
	MediaVisibility           *MediaVisibility                       `protobuf:"varint,27,opt,name=mediaVisibility,enum=proto.MediaVisibility" json:"mediaVisibility,omitempty"`
	TcTokenSenderTimestamp    *uint64                                `protobuf:"varint,28,opt,name=tcTokenSenderTimestamp" json:"tcTokenSenderTimestamp,omitempty"`
	Suspended                 *bool                                  `protobuf:"varint,29,opt,name=suspended" json:"suspended,omitempty"`
	Terminated                *bool                                  `protobuf:"varint,30,opt,name=terminated" json:"terminated,omitempty"`
	CreatedAt                 *uint64                                `protobuf:"varint,31,opt,name=createdAt" json:"createdAt,omitempty"`
	CreatedBy                 *string                                `protobuf:"bytes,32,opt,name=createdBy" json:"createdBy,omitempty"`
	Description               *string                                `protobuf:"bytes,33,opt,name=description" json:"description,omitempty"`
	Support                   *bool                                  `protobuf:"varint,34,opt,name=support" json:"support,omitempty"`
	IsParentGroup             *bool                                  `protobuf:"varint,35,opt,name=isParentGroup" json:"isParentGroup,omitempty"`
	ParentGroupId             *string                                `protobuf:"bytes,37,opt,name=parentGroupId" json:"parentGroupId,omitempty"`
	IsDefaultSubgroup         *bool                                  `protobuf:"varint,36,opt,name=isDefaultSubgroup" json:"isDefaultSubgroup,omitempty"`
	DisplayName               *string                                `protobuf:"bytes,38,opt,name=displayName" json:"displayName,omitempty"`
	PnJid                     *string                                `protobuf:"bytes,39,opt,name=pnJid" json:"pnJid,omitempty"`
	ShareOwnPn                *bool                                  `protobuf:"varint,40,opt,name=shareOwnPn" json:"shareOwnPn,omitempty"`
	PnhDuplicateLidThread     *bool                                  `protobuf:"varint,41,opt,name=pnhDuplicateLidThread" json:"pnhDuplicateLidThread,omitempty"`
	LidJid                    *string                                `protobuf:"bytes,42,opt,name=lidJid" json:"lidJid,omitempty"`
	Username                  *string                                `protobuf:"bytes,43,opt,name=username" json:"username,omitempty"`
	LidOriginType             *string                                `protobuf:"bytes,44,opt,name=lidOriginType" json:"lidOriginType,omitempty"`
	CommentsCount             *uint32                                `protobuf:"varint,45,opt,name=commentsCount" json:"commentsCount,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	mi := &file_WAProto_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{21}
}

func (x *Conversation) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Conversation) GetMessages() []*HistorySyncMsg {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Conversation) GetNewJid() string {
	if x != nil && x.NewJid != nil {
		return *x.NewJid
	}
	return ""
}

func (x *Conversation) GetOldJid() string {
	if x != nil && x.OldJid != nil {
		return *x.OldJid
	}
	return ""
}

func (x *Conversation) GetLastMsgTimestamp() uint64 {
	if x != nil && x.LastMsgTimestamp != nil {
		return *x.LastMsgTimestamp
	}
	return 0
}

func (x *Conversation) GetUnreadCount() uint32 {
	if x != nil && x.UnreadCount != nil {
		return *x.UnreadCount
	}
	return 0
}

func (x *Conversation) GetReadOnly() bool {
	if x != nil && x.ReadOnly != nil {
		return *x.ReadOnly
	}
	return false
}

func (x *Conversation) GetEndOfHistoryTransfer() bool {
	if x != nil && x.EndOfHistoryTransfer != nil {
		return *x.EndOfHistoryTransfer
	}
	return false
}

func (x *Conversation) GetEphemeralExpiration() uint32 {
	if x != nil && x.EphemeralExpiration != nil {
		return *x.EphemeralExpiration
	}
	return 0
}

func (x *Conversation) GetEphemeralSettingTimestamp() int64 {
	if x != nil && x.EphemeralSettingTimestamp != nil {
		return *x.EphemeralSettingTimestamp
	}
	return 0
}

func (x *Conversation) GetEndOfHistoryTransferType() Conversation_EndOfHistoryTransferType {
	if x != nil && x.EndOfHistoryTransferType != nil {
		return *x.EndOfHistoryTransferType
	}
	return Conversation_COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY
}

func (x *Conversation) GetConversationTimestamp() uint64 {
	if x != nil && x.ConversationTimestamp != nil {
		return *x.ConversationTimestamp
	}
	return 0
}

func (x *Conversation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Conversation) GetPHash() string {
	if x != nil && x.PHash != nil {
		return *x.PHash
	}
	return ""
}

func (x *Conversation) GetNotSpam() bool {
	if x != nil && x.NotSpam != nil {
		return *x.NotSpam
	}
	return false
}

func (x *Conversation) GetArchived() bool {
	if x != nil && x.Archived != nil {
		return *x.Archived
	}
	return false
}

func (x *Conversation) GetDisappearingMode() *DisappearingMode {
	if x != nil {
		return x.DisappearingMode
	}
	return nil
}

func (x *Conversation) GetUnreadMentionCount() uint32 {
	if x != nil && x.UnreadMentionCount != nil {
		return *x.UnreadMentionCount
	}
	return 0
}

func (x *Conversation) GetMarkedAsUnread() bool {
	if x != nil && x.MarkedAsUnread != nil {
		return *x.MarkedAsUnread
	}
	return false
}

func (x *Conversation) GetParticipant() []*GroupParticipant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *Conversation) GetTcToken() []byte {
	if x != nil {
		return x.TcToken
	}
	return nil
}

func (x *Conversation) GetTcTokenTimestamp() uint64 {
	if x != nil && x.TcTokenTimestamp != nil {
		return *x.TcTokenTimestamp
	}
	return 0
}

func (x *Conversation) GetContactPrimaryIdentityKey() []byte {
	if x != nil {
		return x.ContactPrimaryIdentityKey
	}
	return nil
}

func (x *Conversation) GetPinned() uint32 {
	if x != nil && x.Pinned != nil {
		return *x.Pinned
	}
	return 0
}

func (x *Conversation) GetMuteEndTime() uint64 {
	if x != nil && x.MuteEndTime != nil {
		return *x.MuteEndTime
	}
	return 0
}

func (x *Conversation) GetWallpaper() *WallpaperSettings {
	if x != nil {
		return x.Wallpaper
	}
	return nil
}

func (x *Conversation) GetMediaVisibility() MediaVisibility {
	if x != nil && x.MediaVisibility != nil {
		return *x.MediaVisibility
	}
	return MediaVisibility_DEFAULT
}

func (x *Conversation) GetTcTokenSenderTimestamp() uint64 {
	if x != nil && x.TcTokenSenderTimestamp != nil {
		return *x.TcTokenSenderTimestamp
	}
	return 0
}

func (x *Conversation) GetSuspended() bool {
	if x != nil && x.Suspended != nil {
		return *x.Suspended
	}
	return false
}

func (x *Conversation) GetTerminated() bool {
	if x != nil && x.Terminated != nil {
		return *x.Terminated
	}
	return false
}

func (x *Conversation) GetCreatedAt() uint64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *Conversation) GetCreatedBy() string {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return ""
}

func (x *Conversation) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Conversation) GetSupport() bool {
	if x != nil && x.Support != nil {
		return *x.Support
	}
	return false
}

func (x *Conversation) GetIsParentGroup() bool {
	if x != nil && x.IsParentGroup != nil {
		return *x.IsParentGroup
	}
	return false
}

func (x *Conversation) GetParentGroupId() string {
	if x != nil && x.ParentGroupId != nil {
		return *x.ParentGroupId
	}
	return ""
}

func (x *Conversation) GetIsDefaultSubgroup() bool {
	if x != nil && x.IsDefaultSubgroup != nil {
		return *x.IsDefaultSubgroup
	}
	return false
}

func (x *Conversation) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Conversation) GetPnJid() string {
	if x != nil && x.PnJid != nil {
		return *x.PnJid
	}
	return ""
}

func (x *Conversation) GetShareOwnPn() bool {
	if x != nil && x.ShareOwnPn != nil {
		return *x.ShareOwnPn
	}
	return false
}

func (x *Conversation) GetPnhDuplicateLidThread() bool {
	if x != nil && x.PnhDuplicateLidThread != nil {
		return *x.PnhDuplicateLidThread
	}
	return false
}

func (x *Conversation) GetLidJid() string {
	if x != nil && x.LidJid != nil {
		return *x.LidJid
	}
	return ""
}

func (x *Conversation) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *Conversation) GetLidOriginType() string {
	if x != nil && x.LidOriginType != nil {
		return *x.LidOriginType
	}
	return ""
}

func (x *Conversation) GetCommentsCount() uint32 {
	if x != nil && x.CommentsCount != nil {
		return *x.CommentsCount
	}
	return 0
}

type DeviceConsistencyCodeMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generation    *uint32                `protobuf:"varint,1,opt,name=generation" json:"generation,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceConsistencyCodeMessage) Reset() {
	*x = DeviceConsistencyCodeMessage{}
	mi := &file_WAProto_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceConsistencyCodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConsistencyCodeMessage) ProtoMessage() {}

func (x *DeviceConsistencyCodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConsistencyCodeMessage.ProtoReflect.Descriptor instead.
func (*DeviceConsistencyCodeMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{22}
}

func (x *DeviceConsistencyCodeMessage) GetGeneration() uint32 {
	if x != nil && x.Generation != nil {
		return *x.Generation
	}
	return 0
}

func (x *DeviceConsistencyCodeMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DeviceListMetadata struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SenderKeyHash       []byte                 `protobuf:"bytes,1,opt,name=senderKeyHash" json:"senderKeyHash,omitempty"`
	SenderTimestamp     *uint64                `protobuf:"varint,2,opt,name=senderTimestamp" json:"senderTimestamp,omitempty"`
	SenderKeyIndexes    []uint32               `protobuf:"varint,3,rep,packed,name=senderKeyIndexes" json:"senderKeyIndexes,omitempty"`
	SenderAccountType   *ADVEncryptionType     `protobuf:"varint,4,opt,name=senderAccountType,enum=proto.ADVEncryptionType" json:"senderAccountType,omitempty"`
	ReceiverAccountType *ADVEncryptionType     `protobuf:"varint,5,opt,name=receiverAccountType,enum=proto.ADVEncryptionType" json:"receiverAccountType,omitempty"`
	RecipientKeyHash    []byte                 `protobuf:"bytes,8,opt,name=recipientKeyHash" json:"recipientKeyHash,omitempty"`
	RecipientTimestamp  *uint64                `protobuf:"varint,9,opt,name=recipientTimestamp" json:"recipientTimestamp,omitempty"`
	RecipientKeyIndexes []uint32               `protobuf:"varint,10,rep,packed,name=recipientKeyIndexes" json:"recipientKeyIndexes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DeviceListMetadata) Reset() {
	*x = DeviceListMetadata{}
	mi := &file_WAProto_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceListMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListMetadata) ProtoMessage() {}

func (x *DeviceListMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListMetadata.ProtoReflect.Descriptor instead.
func (*DeviceListMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{23}
}

func (x *DeviceListMetadata) GetSenderKeyHash() []byte {
	if x != nil {
		return x.SenderKeyHash
	}
	return nil
}

func (x *DeviceListMetadata) GetSenderTimestamp() uint64 {
	if x != nil && x.SenderTimestamp != nil {
		return *x.SenderTimestamp
	}
	return 0
}

func (x *DeviceListMetadata) GetSenderKeyIndexes() []uint32 {
	if x != nil {
		return x.SenderKeyIndexes
	}
	return nil
}

func (x *DeviceListMetadata) GetSenderAccountType() ADVEncryptionType {
	if x != nil && x.SenderAccountType != nil {
		return *x.SenderAccountType
	}
	return ADVEncryptionType_E2EE
}

func (x *DeviceListMetadata) GetReceiverAccountType() ADVEncryptionType {
	if x != nil && x.ReceiverAccountType != nil {
		return *x.ReceiverAccountType
	}
	return ADVEncryptionType_E2EE
}

func (x *DeviceListMetadata) GetRecipientKeyHash() []byte {
	if x != nil {
		return x.RecipientKeyHash
	}
	return nil
}

func (x *DeviceListMetadata) GetRecipientTimestamp() uint64 {
	if x != nil && x.RecipientTimestamp != nil {
		return *x.RecipientTimestamp
	}
	return 0
}

func (x *DeviceListMetadata) GetRecipientKeyIndexes() []uint32 {
	if x != nil {
		return x.RecipientKeyIndexes
	}
	return nil
}

type DeviceProps struct {
	state             protoimpl.MessageState         `protogen:"open.v1"`
	Os                *string                        `protobuf:"bytes,1,opt,name=os" json:"os,omitempty"`
	Version           *DeviceProps_AppVersion        `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	PlatformType      *DeviceProps_PlatformType      `protobuf:"varint,3,opt,name=platformType,enum=proto.DeviceProps_PlatformType" json:"platformType,omitempty"`
	RequireFullSync   *bool                          `protobuf:"varint,4,opt,name=requireFullSync" json:"requireFullSync,omitempty"`
	HistorySyncConfig *DeviceProps_HistorySyncConfig `protobuf:"bytes,5,opt,name=historySyncConfig" json:"historySyncConfig,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeviceProps) Reset() {
	*x = DeviceProps{}
	mi := &file_WAProto_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProps) ProtoMessage() {}

func (x *DeviceProps) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProps.ProtoReflect.Descriptor instead.
func (*DeviceProps) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{24}
}

func (x *DeviceProps) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *DeviceProps) GetVersion() *DeviceProps_AppVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DeviceProps) GetPlatformType() DeviceProps_PlatformType {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return DeviceProps_UNKNOWN
}

func (x *DeviceProps) GetRequireFullSync() bool {
	if x != nil && x.RequireFullSync != nil {
		return *x.RequireFullSync
	}
	return false
}

func (x *DeviceProps) GetHistorySyncConfig() *DeviceProps_HistorySyncConfig {
	if x != nil {
		return x.HistorySyncConfig
	}
	return nil
}

type DisappearingMode struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	Initiator          *DisappearingMode_Initiator `protobuf:"varint,1,opt,name=initiator,enum=proto.DisappearingMode_Initiator" json:"initiator,omitempty"`
	Trigger            *DisappearingMode_Trigger   `protobuf:"varint,2,opt,name=trigger,enum=proto.DisappearingMode_Trigger" json:"trigger,omitempty"`
	InitiatorDeviceJid *string                     `protobuf:"bytes,3,opt,name=initiatorDeviceJid" json:"initiatorDeviceJid,omitempty"`
	InitiatedByMe      *bool                       `protobuf:"varint,4,opt,name=initiatedByMe" json:"initiatedByMe,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DisappearingMode) Reset() {
	*x = DisappearingMode{}
	mi := &file_WAProto_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisappearingMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisappearingMode) ProtoMessage() {}

func (x *DisappearingMode) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisappearingMode.ProtoReflect.Descriptor instead.
func (*DisappearingMode) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{25}
}

func (x *DisappearingMode) GetInitiator() DisappearingMode_Initiator {
	if x != nil && x.Initiator != nil {
		return *x.Initiator
	}
	return DisappearingMode_CHANGED_IN_CHAT
}

func (x *DisappearingMode) GetTrigger() DisappearingMode_Trigger {
	if x != nil && x.Trigger != nil {
		return *x.Trigger
	}
	return DisappearingMode_UNKNOWN
}

func (x *DisappearingMode) GetInitiatorDeviceJid() string {
	if x != nil && x.InitiatorDeviceJid != nil {
		return *x.InitiatorDeviceJid
	}
	return ""
}

func (x *DisappearingMode) GetInitiatedByMe() bool {
	if x != nil && x.InitiatedByMe != nil {
		return *x.InitiatedByMe
	}
	return false
}

type EphemeralSetting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Duration      *int32                 `protobuf:"fixed32,1,opt,name=duration" json:"duration,omitempty"`
	Timestamp     *int64                 `protobuf:"fixed64,2,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EphemeralSetting) Reset() {
	*x = EphemeralSetting{}
	mi := &file_WAProto_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EphemeralSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EphemeralSetting) ProtoMessage() {}

func (x *EphemeralSetting) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EphemeralSetting.ProtoReflect.Descriptor instead.
func (*EphemeralSetting) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{26}
}

func (x *EphemeralSetting) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *EphemeralSetting) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type EventResponse struct {
	state                   protoimpl.MessageState        `protogen:"open.v1"`
	EventResponseMessageKey *MessageKey                   `protobuf:"bytes,1,opt,name=eventResponseMessageKey" json:"eventResponseMessageKey,omitempty"`
	TimestampMs             *int64                        `protobuf:"varint,2,opt,name=timestampMs" json:"timestampMs,omitempty"`
	EventResponseMessage    *Message_EventResponseMessage `protobuf:"bytes,3,opt,name=eventResponseMessage" json:"eventResponseMessage,omitempty"`
	Unread                  *bool                         `protobuf:"varint,4,opt,name=unread" json:"unread,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	mi := &file_WAProto_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{27}
}

func (x *EventResponse) GetEventResponseMessageKey() *MessageKey {
	if x != nil {
		return x.EventResponseMessageKey
	}
	return nil
}

func (x *EventResponse) GetTimestampMs() int64 {
	if x != nil && x.TimestampMs != nil {
		return *x.TimestampMs
	}
	return 0
}

func (x *EventResponse) GetEventResponseMessage() *Message_EventResponseMessage {
	if x != nil {
		return x.EventResponseMessage
	}
	return nil
}

func (x *EventResponse) GetUnread() bool {
	if x != nil && x.Unread != nil {
		return *x.Unread
	}
	return false
}

type ExitCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          *uint64                `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Text          *string                `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExitCode) Reset() {
	*x = ExitCode{}
	mi := &file_WAProto_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExitCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitCode) ProtoMessage() {}

func (x *ExitCode) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitCode.ProtoReflect.Descriptor instead.
func (*ExitCode) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{28}
}

func (x *ExitCode) GetCode() uint64 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ExitCode) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type ExternalBlobReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MediaKey      []byte                 `protobuf:"bytes,1,opt,name=mediaKey" json:"mediaKey,omitempty"`
	DirectPath    *string                `protobuf:"bytes,2,opt,name=directPath" json:"directPath,omitempty"`
	Handle        *string                `protobuf:"bytes,3,opt,name=handle" json:"handle,omitempty"`
	FileSizeBytes *uint64                `protobuf:"varint,4,opt,name=fileSizeBytes" json:"fileSizeBytes,omitempty"`
	FileSha256    []byte                 `protobuf:"bytes,5,opt,name=fileSha256" json:"fileSha256,omitempty"`
	FileEncSha256 []byte                 `protobuf:"bytes,6,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalBlobReference) Reset() {
	*x = ExternalBlobReference{}
	mi := &file_WAProto_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalBlobReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalBlobReference) ProtoMessage() {}

func (x *ExternalBlobReference) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalBlobReference.ProtoReflect.Descriptor instead.
func (*ExternalBlobReference) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{29}
}

func (x *ExternalBlobReference) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *ExternalBlobReference) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *ExternalBlobReference) GetHandle() string {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return ""
}

func (x *ExternalBlobReference) GetFileSizeBytes() uint64 {
	if x != nil && x.FileSizeBytes != nil {
		return *x.FileSizeBytes
	}
	return 0
}

func (x *ExternalBlobReference) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *ExternalBlobReference) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

type GlobalSettings struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	LightThemeWallpaper                *WallpaperSettings     `protobuf:"bytes,1,opt,name=lightThemeWallpaper" json:"lightThemeWallpaper,omitempty"`
	MediaVisibility                    *MediaVisibility       `protobuf:"varint,2,opt,name=mediaVisibility,enum=proto.MediaVisibility" json:"mediaVisibility,omitempty"`
	DarkThemeWallpaper                 *WallpaperSettings     `protobuf:"bytes,3,opt,name=darkThemeWallpaper" json:"darkThemeWallpaper,omitempty"`
	AutoDownloadWiFi                   *AutoDownloadSettings  `protobuf:"bytes,4,opt,name=autoDownloadWiFi" json:"autoDownloadWiFi,omitempty"`
	AutoDownloadCellular               *AutoDownloadSettings  `protobuf:"bytes,5,opt,name=autoDownloadCellular" json:"autoDownloadCellular,omitempty"`
	AutoDownloadRoaming                *AutoDownloadSettings  `protobuf:"bytes,6,opt,name=autoDownloadRoaming" json:"autoDownloadRoaming,omitempty"`
	ShowIndividualNotificationsPreview *bool                  `protobuf:"varint,7,opt,name=showIndividualNotificationsPreview" json:"showIndividualNotificationsPreview,omitempty"`
	ShowGroupNotificationsPreview      *bool                  `protobuf:"varint,8,opt,name=showGroupNotificationsPreview" json:"showGroupNotificationsPreview,omitempty"`
	DisappearingModeDuration           *int32                 `protobuf:"varint,9,opt,name=disappearingModeDuration" json:"disappearingModeDuration,omitempty"`
	DisappearingModeTimestamp          *int64                 `protobuf:"varint,10,opt,name=disappearingModeTimestamp" json:"disappearingModeTimestamp,omitempty"`
	AvatarUserSettings                 *AvatarUserSettings    `protobuf:"bytes,11,opt,name=avatarUserSettings" json:"avatarUserSettings,omitempty"`
	FontSize                           *int32                 `protobuf:"varint,12,opt,name=fontSize" json:"fontSize,omitempty"`
	SecurityNotifications              *bool                  `protobuf:"varint,13,opt,name=securityNotifications" json:"securityNotifications,omitempty"`
	AutoUnarchiveChats                 *bool                  `protobuf:"varint,14,opt,name=autoUnarchiveChats" json:"autoUnarchiveChats,omitempty"`
	VideoQualityMode                   *int32                 `protobuf:"varint,15,opt,name=videoQualityMode" json:"videoQualityMode,omitempty"`
	PhotoQualityMode                   *int32                 `protobuf:"varint,16,opt,name=photoQualityMode" json:"photoQualityMode,omitempty"`
	IndividualNotificationSettings     *NotificationSettings  `protobuf:"bytes,17,opt,name=individualNotificationSettings" json:"individualNotificationSettings,omitempty"`
	GroupNotificationSettings          *NotificationSettings  `protobuf:"bytes,18,opt,name=groupNotificationSettings" json:"groupNotificationSettings,omitempty"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *GlobalSettings) Reset() {
	*x = GlobalSettings{}
	mi := &file_WAProto_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSettings) ProtoMessage() {}

func (x *GlobalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSettings.ProtoReflect.Descriptor instead.
func (*GlobalSettings) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{30}
}

func (x *GlobalSettings) GetLightThemeWallpaper() *WallpaperSettings {
	if x != nil {
		return x.LightThemeWallpaper
	}
	return nil
}

func (x *GlobalSettings) GetMediaVisibility() MediaVisibility {
	if x != nil && x.MediaVisibility != nil {
		return *x.MediaVisibility
	}
	return MediaVisibility_DEFAULT
}

func (x *GlobalSettings) GetDarkThemeWallpaper() *WallpaperSettings {
	if x != nil {
		return x.DarkThemeWallpaper
	}
	return nil
}

func (x *GlobalSettings) GetAutoDownloadWiFi() *AutoDownloadSettings {
	if x != nil {
		return x.AutoDownloadWiFi
	}
	return nil
}

func (x *GlobalSettings) GetAutoDownloadCellular() *AutoDownloadSettings {
	if x != nil {
		return x.AutoDownloadCellular
	}
	return nil
}

func (x *GlobalSettings) GetAutoDownloadRoaming() *AutoDownloadSettings {
	if x != nil {
		return x.AutoDownloadRoaming
	}
	return nil
}

func (x *GlobalSettings) GetShowIndividualNotificationsPreview() bool {
	if x != nil && x.ShowIndividualNotificationsPreview != nil {
		return *x.ShowIndividualNotificationsPreview
	}
	return false
}

func (x *GlobalSettings) GetShowGroupNotificationsPreview() bool {
	if x != nil && x.ShowGroupNotificationsPreview != nil {
		return *x.ShowGroupNotificationsPreview
	}
	return false
}

func (x *GlobalSettings) GetDisappearingModeDuration() int32 {
	if x != nil && x.DisappearingModeDuration != nil {
		return *x.DisappearingModeDuration
	}
	return 0
}

func (x *GlobalSettings) GetDisappearingModeTimestamp() int64 {
	if x != nil && x.DisappearingModeTimestamp != nil {
		return *x.DisappearingModeTimestamp
	}
	return 0
}

func (x *GlobalSettings) GetAvatarUserSettings() *AvatarUserSettings {
	if x != nil {
		return x.AvatarUserSettings
	}
	return nil
}

func (x *GlobalSettings) GetFontSize() int32 {
	if x != nil && x.FontSize != nil {
		return *x.FontSize
	}
	return 0
}

func (x *GlobalSettings) GetSecurityNotifications() bool {
	if x != nil && x.SecurityNotifications != nil {
		return *x.SecurityNotifications
	}
	return false
}

func (x *GlobalSettings) GetAutoUnarchiveChats() bool {
	if x != nil && x.AutoUnarchiveChats != nil {
		return *x.AutoUnarchiveChats
	}
	return false
}

func (x *GlobalSettings) GetVideoQualityMode() int32 {
	if x != nil && x.VideoQualityMode != nil {
		return *x.VideoQualityMode
	}
	return 0
}

func (x *GlobalSettings) GetPhotoQualityMode() int32 {
	if x != nil && x.PhotoQualityMode != nil {
		return *x.PhotoQualityMode
	}
	return 0
}

func (x *GlobalSettings) GetIndividualNotificationSettings() *NotificationSettings {
	if x != nil {
		return x.IndividualNotificationSettings
	}
	return nil
}

func (x *GlobalSettings) GetGroupNotificationSettings() *NotificationSettings {
	if x != nil {
		return x.GroupNotificationSettings
	}
	return nil
}

type GroupMention struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupJid      *string                `protobuf:"bytes,1,opt,name=groupJid" json:"groupJid,omitempty"`
	GroupSubject  *string                `protobuf:"bytes,2,opt,name=groupSubject" json:"groupSubject,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupMention) Reset() {
	*x = GroupMention{}
	mi := &file_WAProto_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupMention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMention) ProtoMessage() {}

func (x *GroupMention) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMention.ProtoReflect.Descriptor instead.
func (*GroupMention) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{31}
}

func (x *GroupMention) GetGroupJid() string {
	if x != nil && x.GroupJid != nil {
		return *x.GroupJid
	}
	return ""
}

func (x *GroupMention) GetGroupSubject() string {
	if x != nil && x.GroupSubject != nil {
		return *x.GroupSubject
	}
	return ""
}

type GroupParticipant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserJid       *string                `protobuf:"bytes,1,req,name=userJid" json:"userJid,omitempty"`
	Rank          *GroupParticipant_Rank `protobuf:"varint,2,opt,name=rank,enum=proto.GroupParticipant_Rank" json:"rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupParticipant) Reset() {
	*x = GroupParticipant{}
	mi := &file_WAProto_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupParticipant) ProtoMessage() {}

func (x *GroupParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupParticipant.ProtoReflect.Descriptor instead.
func (*GroupParticipant) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{32}
}

func (x *GroupParticipant) GetUserJid() string {
	if x != nil && x.UserJid != nil {
		return *x.UserJid
	}
	return ""
}

func (x *GroupParticipant) GetRank() GroupParticipant_Rank {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return GroupParticipant_REGULAR
}

type HandshakeMessage struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ClientHello   *HandshakeMessage_ClientHello  `protobuf:"bytes,2,opt,name=clientHello" json:"clientHello,omitempty"`
	ServerHello   *HandshakeMessage_ServerHello  `protobuf:"bytes,3,opt,name=serverHello" json:"serverHello,omitempty"`
	ClientFinish  *HandshakeMessage_ClientFinish `protobuf:"bytes,4,opt,name=clientFinish" json:"clientFinish,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandshakeMessage) Reset() {
	*x = HandshakeMessage{}
	mi := &file_WAProto_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandshakeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeMessage) ProtoMessage() {}

func (x *HandshakeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeMessage.ProtoReflect.Descriptor instead.
func (*HandshakeMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{33}
}

func (x *HandshakeMessage) GetClientHello() *HandshakeMessage_ClientHello {
	if x != nil {
		return x.ClientHello
	}
	return nil
}

func (x *HandshakeMessage) GetServerHello() *HandshakeMessage_ServerHello {
	if x != nil {
		return x.ServerHello
	}
	return nil
}

func (x *HandshakeMessage) GetClientFinish() *HandshakeMessage_ClientFinish {
	if x != nil {
		return x.ClientFinish
	}
	return nil
}

type HistorySync struct {
	state                    protoimpl.MessageState          `protogen:"open.v1"`
	SyncType                 *HistorySync_HistorySyncType    `protobuf:"varint,1,req,name=syncType,enum=proto.HistorySync_HistorySyncType" json:"syncType,omitempty"`
	Conversations            []*Conversation                 `protobuf:"bytes,2,rep,name=conversations" json:"conversations,omitempty"`
	StatusV3Messages         []*WebMessageInfo               `protobuf:"bytes,3,rep,name=statusV3Messages" json:"statusV3Messages,omitempty"`
	ChunkOrder               *uint32                         `protobuf:"varint,5,opt,name=chunkOrder" json:"chunkOrder,omitempty"`
	Progress                 *uint32                         `protobuf:"varint,6,opt,name=progress" json:"progress,omitempty"`
	Pushnames                []*Pushname                     `protobuf:"bytes,7,rep,name=pushnames" json:"pushnames,omitempty"`
	GlobalSettings           *GlobalSettings                 `protobuf:"bytes,8,opt,name=globalSettings" json:"globalSettings,omitempty"`
	ThreadIdUserSecret       []byte                          `protobuf:"bytes,9,opt,name=threadIdUserSecret" json:"threadIdUserSecret,omitempty"`
	ThreadDsTimeframeOffset  *uint32                         `protobuf:"varint,10,opt,name=threadDsTimeframeOffset" json:"threadDsTimeframeOffset,omitempty"`
	RecentStickers           []*StickerMetadata              `protobuf:"bytes,11,rep,name=recentStickers" json:"recentStickers,omitempty"`
	PastParticipants         []*PastParticipants             `protobuf:"bytes,12,rep,name=pastParticipants" json:"pastParticipants,omitempty"`
	CallLogRecords           []*CallLogRecord                `protobuf:"bytes,13,rep,name=callLogRecords" json:"callLogRecords,omitempty"`
	AiWaitListState          *HistorySync_BotAIWaitListState `protobuf:"varint,14,opt,name=aiWaitListState,enum=proto.HistorySync_BotAIWaitListState" json:"aiWaitListState,omitempty"`
	PhoneNumberToLidMappings []*PhoneNumberToLIDMapping      `protobuf:"bytes,15,rep,name=phoneNumberToLidMappings" json:"phoneNumberToLidMappings,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *HistorySync) Reset() {
	*x = HistorySync{}
	mi := &file_WAProto_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistorySync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistorySync) ProtoMessage() {}

func (x *HistorySync) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistorySync.ProtoReflect.Descriptor instead.
func (*HistorySync) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{34}
}

func (x *HistorySync) GetSyncType() HistorySync_HistorySyncType {
	if x != nil && x.SyncType != nil {
		return *x.SyncType
	}
	return HistorySync_INITIAL_BOOTSTRAP
}

func (x *HistorySync) GetConversations() []*Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *HistorySync) GetStatusV3Messages() []*WebMessageInfo {
	if x != nil {
		return x.StatusV3Messages
	}
	return nil
}

func (x *HistorySync) GetChunkOrder() uint32 {
	if x != nil && x.ChunkOrder != nil {
		return *x.ChunkOrder
	}
	return 0
}

func (x *HistorySync) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *HistorySync) GetPushnames() []*Pushname {
	if x != nil {
		return x.Pushnames
	}
	return nil
}

func (x *HistorySync) GetGlobalSettings() *GlobalSettings {
	if x != nil {
		return x.GlobalSettings
	}
	return nil
}

func (x *HistorySync) GetThreadIdUserSecret() []byte {
	if x != nil {
		return x.ThreadIdUserSecret
	}
	return nil
}

func (x *HistorySync) GetThreadDsTimeframeOffset() uint32 {
	if x != nil && x.ThreadDsTimeframeOffset != nil {
		return *x.ThreadDsTimeframeOffset
	}
	return 0
}

func (x *HistorySync) GetRecentStickers() []*StickerMetadata {
	if x != nil {
		return x.RecentStickers
	}
	return nil
}

func (x *HistorySync) GetPastParticipants() []*PastParticipants {
	if x != nil {
		return x.PastParticipants
	}
	return nil
}

func (x *HistorySync) GetCallLogRecords() []*CallLogRecord {
	if x != nil {
		return x.CallLogRecords
	}
	return nil
}

func (x *HistorySync) GetAiWaitListState() HistorySync_BotAIWaitListState {
	if x != nil && x.AiWaitListState != nil {
		return *x.AiWaitListState
	}
	return HistorySync_IN_WAITLIST
}

func (x *HistorySync) GetPhoneNumberToLidMappings() []*PhoneNumberToLIDMapping {
	if x != nil {
		return x.PhoneNumberToLidMappings
	}
	return nil
}

type HistorySyncMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *WebMessageInfo        `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	MsgOrderId    *uint64                `protobuf:"varint,2,opt,name=msgOrderId" json:"msgOrderId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistorySyncMsg) Reset() {
	*x = HistorySyncMsg{}
	mi := &file_WAProto_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistorySyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistorySyncMsg) ProtoMessage() {}

func (x *HistorySyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistorySyncMsg.ProtoReflect.Descriptor instead.
func (*HistorySyncMsg) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{35}
}

func (x *HistorySyncMsg) GetMessage() *WebMessageInfo {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *HistorySyncMsg) GetMsgOrderId() uint64 {
	if x != nil && x.MsgOrderId != nil {
		return *x.MsgOrderId
	}
	return 0
}

type HydratedTemplateButton struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Index *uint32                `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	// Types that are valid to be assigned to HydratedButton:
	//
	//	*HydratedTemplateButton_QuickReplyButton
	//	*HydratedTemplateButton_UrlButton
	//	*HydratedTemplateButton_CallButton
	HydratedButton isHydratedTemplateButton_HydratedButton `protobuf_oneof:"hydratedButton"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HydratedTemplateButton) Reset() {
	*x = HydratedTemplateButton{}
	mi := &file_WAProto_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HydratedTemplateButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedTemplateButton) ProtoMessage() {}

func (x *HydratedTemplateButton) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedTemplateButton.ProtoReflect.Descriptor instead.
func (*HydratedTemplateButton) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{36}
}

func (x *HydratedTemplateButton) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *HydratedTemplateButton) GetHydratedButton() isHydratedTemplateButton_HydratedButton {
	if x != nil {
		return x.HydratedButton
	}
	return nil
}

func (x *HydratedTemplateButton) GetQuickReplyButton() *HydratedTemplateButton_HydratedQuickReplyButton {
	if x != nil {
		if x, ok := x.HydratedButton.(*HydratedTemplateButton_QuickReplyButton); ok {
			return x.QuickReplyButton
		}
	}
	return nil
}

func (x *HydratedTemplateButton) GetUrlButton() *HydratedTemplateButton_HydratedURLButton {
	if x != nil {
		if x, ok := x.HydratedButton.(*HydratedTemplateButton_UrlButton); ok {
			return x.UrlButton
		}
	}
	return nil
}

func (x *HydratedTemplateButton) GetCallButton() *HydratedTemplateButton_HydratedCallButton {
	if x != nil {
		if x, ok := x.HydratedButton.(*HydratedTemplateButton_CallButton); ok {
			return x.CallButton
		}
	}
	return nil
}

type isHydratedTemplateButton_HydratedButton interface {
	isHydratedTemplateButton_HydratedButton()
}

type HydratedTemplateButton_QuickReplyButton struct {
	QuickReplyButton *HydratedTemplateButton_HydratedQuickReplyButton `protobuf:"bytes,1,opt,name=quickReplyButton,oneof"`
}

type HydratedTemplateButton_UrlButton struct {
	UrlButton *HydratedTemplateButton_HydratedURLButton `protobuf:"bytes,2,opt,name=urlButton,oneof"`
}

type HydratedTemplateButton_CallButton struct {
	CallButton *HydratedTemplateButton_HydratedCallButton `protobuf:"bytes,3,opt,name=callButton,oneof"`
}

func (*HydratedTemplateButton_QuickReplyButton) isHydratedTemplateButton_HydratedButton() {}

func (*HydratedTemplateButton_UrlButton) isHydratedTemplateButton_HydratedButton() {}

func (*HydratedTemplateButton_CallButton) isHydratedTemplateButton_HydratedButton() {}

type IdentityKeyPairStructure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     []byte                 `protobuf:"bytes,1,opt,name=publicKey" json:"publicKey,omitempty"`
	PrivateKey    []byte                 `protobuf:"bytes,2,opt,name=privateKey" json:"privateKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityKeyPairStructure) Reset() {
	*x = IdentityKeyPairStructure{}
	mi := &file_WAProto_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityKeyPairStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityKeyPairStructure) ProtoMessage() {}

func (x *IdentityKeyPairStructure) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityKeyPairStructure.ProtoReflect.Descriptor instead.
func (*IdentityKeyPairStructure) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{37}
}

func (x *IdentityKeyPairStructure) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *IdentityKeyPairStructure) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type InteractiveAnnotation struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	PolygonVertices        []*Point               `protobuf:"bytes,1,rep,name=polygonVertices" json:"polygonVertices,omitempty"`
	ShouldSkipConfirmation *bool                  `protobuf:"varint,4,opt,name=shouldSkipConfirmation" json:"shouldSkipConfirmation,omitempty"`
	// Types that are valid to be assigned to Action:
	//
	//	*InteractiveAnnotation_Location
	//	*InteractiveAnnotation_Newsletter
	Action        isInteractiveAnnotation_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InteractiveAnnotation) Reset() {
	*x = InteractiveAnnotation{}
	mi := &file_WAProto_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InteractiveAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveAnnotation) ProtoMessage() {}

func (x *InteractiveAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveAnnotation.ProtoReflect.Descriptor instead.
func (*InteractiveAnnotation) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{38}
}

func (x *InteractiveAnnotation) GetPolygonVertices() []*Point {
	if x != nil {
		return x.PolygonVertices
	}
	return nil
}

func (x *InteractiveAnnotation) GetShouldSkipConfirmation() bool {
	if x != nil && x.ShouldSkipConfirmation != nil {
		return *x.ShouldSkipConfirmation
	}
	return false
}

func (x *InteractiveAnnotation) GetAction() isInteractiveAnnotation_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *InteractiveAnnotation) GetLocation() *Location {
	if x != nil {
		if x, ok := x.Action.(*InteractiveAnnotation_Location); ok {
			return x.Location
		}
	}
	return nil
}

func (x *InteractiveAnnotation) GetNewsletter() *ContextInfo_ForwardedNewsletterMessageInfo {
	if x != nil {
		if x, ok := x.Action.(*InteractiveAnnotation_Newsletter); ok {
			return x.Newsletter
		}
	}
	return nil
}

type isInteractiveAnnotation_Action interface {
	isInteractiveAnnotation_Action()
}

type InteractiveAnnotation_Location struct {
	Location *Location `protobuf:"bytes,2,opt,name=location,oneof"`
}

type InteractiveAnnotation_Newsletter struct {
	Newsletter *ContextInfo_ForwardedNewsletterMessageInfo `protobuf:"bytes,3,opt,name=newsletter,oneof"`
}

func (*InteractiveAnnotation_Location) isInteractiveAnnotation_Action() {}

func (*InteractiveAnnotation_Newsletter) isInteractiveAnnotation_Action() {}

type KeepInChat struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	KeepType          *KeepType              `protobuf:"varint,1,opt,name=keepType,enum=proto.KeepType" json:"keepType,omitempty"`
	ServerTimestamp   *int64                 `protobuf:"varint,2,opt,name=serverTimestamp" json:"serverTimestamp,omitempty"`
	Key               *MessageKey            `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	DeviceJid         *string                `protobuf:"bytes,4,opt,name=deviceJid" json:"deviceJid,omitempty"`
	ClientTimestampMs *int64                 `protobuf:"varint,5,opt,name=clientTimestampMs" json:"clientTimestampMs,omitempty"`
	ServerTimestampMs *int64                 `protobuf:"varint,6,opt,name=serverTimestampMs" json:"serverTimestampMs,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *KeepInChat) Reset() {
	*x = KeepInChat{}
	mi := &file_WAProto_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepInChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepInChat) ProtoMessage() {}

func (x *KeepInChat) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepInChat.ProtoReflect.Descriptor instead.
func (*KeepInChat) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{39}
}

func (x *KeepInChat) GetKeepType() KeepType {
	if x != nil && x.KeepType != nil {
		return *x.KeepType
	}
	return KeepType_UNKNOWN
}

func (x *KeepInChat) GetServerTimestamp() int64 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *KeepInChat) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeepInChat) GetDeviceJid() string {
	if x != nil && x.DeviceJid != nil {
		return *x.DeviceJid
	}
	return ""
}

func (x *KeepInChat) GetClientTimestampMs() int64 {
	if x != nil && x.ClientTimestampMs != nil {
		return *x.ClientTimestampMs
	}
	return 0
}

func (x *KeepInChat) GetServerTimestampMs() int64 {
	if x != nil && x.ServerTimestampMs != nil {
		return *x.ServerTimestampMs
	}
	return 0
}

type KeyExchangeMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BaseKey          []byte                 `protobuf:"bytes,2,opt,name=baseKey" json:"baseKey,omitempty"`
	RatchetKey       []byte                 `protobuf:"bytes,3,opt,name=ratchetKey" json:"ratchetKey,omitempty"`
	IdentityKey      []byte                 `protobuf:"bytes,4,opt,name=identityKey" json:"identityKey,omitempty"`
	BaseKeySignature []byte                 `protobuf:"bytes,5,opt,name=baseKeySignature" json:"baseKeySignature,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KeyExchangeMessage) Reset() {
	*x = KeyExchangeMessage{}
	mi := &file_WAProto_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyExchangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyExchangeMessage) ProtoMessage() {}

func (x *KeyExchangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyExchangeMessage.ProtoReflect.Descriptor instead.
func (*KeyExchangeMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{40}
}

func (x *KeyExchangeMessage) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KeyExchangeMessage) GetBaseKey() []byte {
	if x != nil {
		return x.BaseKey
	}
	return nil
}

func (x *KeyExchangeMessage) GetRatchetKey() []byte {
	if x != nil {
		return x.RatchetKey
	}
	return nil
}

func (x *KeyExchangeMessage) GetIdentityKey() []byte {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *KeyExchangeMessage) GetBaseKeySignature() []byte {
	if x != nil {
		return x.BaseKeySignature
	}
	return nil
}

type KeyId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyId) Reset() {
	*x = KeyId{}
	mi := &file_WAProto_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyId) ProtoMessage() {}

func (x *KeyId) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyId.ProtoReflect.Descriptor instead.
func (*KeyId) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{41}
}

func (x *KeyId) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type LocalizedName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lg            *string                `protobuf:"bytes,1,opt,name=lg" json:"lg,omitempty"`
	Lc            *string                `protobuf:"bytes,2,opt,name=lc" json:"lc,omitempty"`
	VerifiedName  *string                `protobuf:"bytes,3,opt,name=verifiedName" json:"verifiedName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalizedName) Reset() {
	*x = LocalizedName{}
	mi := &file_WAProto_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalizedName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalizedName) ProtoMessage() {}

func (x *LocalizedName) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalizedName.ProtoReflect.Descriptor instead.
func (*LocalizedName) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{42}
}

func (x *LocalizedName) GetLg() string {
	if x != nil && x.Lg != nil {
		return *x.Lg
	}
	return ""
}

func (x *LocalizedName) GetLc() string {
	if x != nil && x.Lc != nil {
		return *x.Lc
	}
	return ""
}

func (x *LocalizedName) GetVerifiedName() string {
	if x != nil && x.VerifiedName != nil {
		return *x.VerifiedName
	}
	return ""
}

type Location struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DegreesLatitude  *float64               `protobuf:"fixed64,1,opt,name=degreesLatitude" json:"degreesLatitude,omitempty"`
	DegreesLongitude *float64               `protobuf:"fixed64,2,opt,name=degreesLongitude" json:"degreesLongitude,omitempty"`
	Name             *string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_WAProto_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{43}
}

func (x *Location) GetDegreesLatitude() float64 {
	if x != nil && x.DegreesLatitude != nil {
		return *x.DegreesLatitude
	}
	return 0
}

func (x *Location) GetDegreesLongitude() float64 {
	if x != nil && x.DegreesLongitude != nil {
		return *x.DegreesLongitude
	}
	return 0
}

func (x *Location) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type MediaData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LocalPath     *string                `protobuf:"bytes,1,opt,name=localPath" json:"localPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaData) Reset() {
	*x = MediaData{}
	mi := &file_WAProto_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaData) ProtoMessage() {}

func (x *MediaData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaData.ProtoReflect.Descriptor instead.
func (*MediaData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{44}
}

func (x *MediaData) GetLocalPath() string {
	if x != nil && x.LocalPath != nil {
		return *x.LocalPath
	}
	return ""
}

type MediaEntry struct {
	state                  protoimpl.MessageState             `protogen:"open.v1"`
	FileSha256             []byte                             `protobuf:"bytes,1,opt,name=fileSha256" json:"fileSha256,omitempty"`
	MediaKey               []byte                             `protobuf:"bytes,2,opt,name=mediaKey" json:"mediaKey,omitempty"`
	FileEncSha256          []byte                             `protobuf:"bytes,3,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	DirectPath             *string                            `protobuf:"bytes,4,opt,name=directPath" json:"directPath,omitempty"`
	MediaKeyTimestamp      *int64                             `protobuf:"varint,5,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	ServerMediaType        *string                            `protobuf:"bytes,6,opt,name=serverMediaType" json:"serverMediaType,omitempty"`
	UploadToken            []byte                             `protobuf:"bytes,7,opt,name=uploadToken" json:"uploadToken,omitempty"`
	ValidatedTimestamp     []byte                             `protobuf:"bytes,8,opt,name=validatedTimestamp" json:"validatedTimestamp,omitempty"`
	Sidecar                []byte                             `protobuf:"bytes,9,opt,name=sidecar" json:"sidecar,omitempty"`
	ObjectId               *string                            `protobuf:"bytes,10,opt,name=objectId" json:"objectId,omitempty"`
	Fbid                   *string                            `protobuf:"bytes,11,opt,name=fbid" json:"fbid,omitempty"`
	DownloadableThumbnail  *MediaEntry_DownloadableThumbnail  `protobuf:"bytes,12,opt,name=downloadableThumbnail" json:"downloadableThumbnail,omitempty"`
	Handle                 *string                            `protobuf:"bytes,13,opt,name=handle" json:"handle,omitempty"`
	Filename               *string                            `protobuf:"bytes,14,opt,name=filename" json:"filename,omitempty"`
	ProgressiveJpegDetails *MediaEntry_ProgressiveJpegDetails `protobuf:"bytes,15,opt,name=progressiveJpegDetails" json:"progressiveJpegDetails,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MediaEntry) Reset() {
	*x = MediaEntry{}
	mi := &file_WAProto_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaEntry) ProtoMessage() {}

func (x *MediaEntry) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaEntry.ProtoReflect.Descriptor instead.
func (*MediaEntry) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{45}
}

func (x *MediaEntry) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *MediaEntry) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *MediaEntry) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *MediaEntry) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *MediaEntry) GetMediaKeyTimestamp() int64 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *MediaEntry) GetServerMediaType() string {
	if x != nil && x.ServerMediaType != nil {
		return *x.ServerMediaType
	}
	return ""
}

func (x *MediaEntry) GetUploadToken() []byte {
	if x != nil {
		return x.UploadToken
	}
	return nil
}

func (x *MediaEntry) GetValidatedTimestamp() []byte {
	if x != nil {
		return x.ValidatedTimestamp
	}
	return nil
}

func (x *MediaEntry) GetSidecar() []byte {
	if x != nil {
		return x.Sidecar
	}
	return nil
}

func (x *MediaEntry) GetObjectId() string {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return ""
}

func (x *MediaEntry) GetFbid() string {
	if x != nil && x.Fbid != nil {
		return *x.Fbid
	}
	return ""
}

func (x *MediaEntry) GetDownloadableThumbnail() *MediaEntry_DownloadableThumbnail {
	if x != nil {
		return x.DownloadableThumbnail
	}
	return nil
}

func (x *MediaEntry) GetHandle() string {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return ""
}

func (x *MediaEntry) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *MediaEntry) GetProgressiveJpegDetails() *MediaEntry_ProgressiveJpegDetails {
	if x != nil {
		return x.ProgressiveJpegDetails
	}
	return nil
}

type MediaNotifyMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ExpressPathUrl *string                `protobuf:"bytes,1,opt,name=expressPathUrl" json:"expressPathUrl,omitempty"`
	FileEncSha256  []byte                 `protobuf:"bytes,2,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	FileLength     *uint64                `protobuf:"varint,3,opt,name=fileLength" json:"fileLength,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MediaNotifyMessage) Reset() {
	*x = MediaNotifyMessage{}
	mi := &file_WAProto_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaNotifyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaNotifyMessage) ProtoMessage() {}

func (x *MediaNotifyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaNotifyMessage.ProtoReflect.Descriptor instead.
func (*MediaNotifyMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{46}
}

func (x *MediaNotifyMessage) GetExpressPathUrl() string {
	if x != nil && x.ExpressPathUrl != nil {
		return *x.ExpressPathUrl
	}
	return ""
}

func (x *MediaNotifyMessage) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *MediaNotifyMessage) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

type MediaRetryNotification struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	StanzaId      *string                            `protobuf:"bytes,1,opt,name=stanzaId" json:"stanzaId,omitempty"`
	DirectPath    *string                            `protobuf:"bytes,2,opt,name=directPath" json:"directPath,omitempty"`
	Result        *MediaRetryNotification_ResultType `protobuf:"varint,3,opt,name=result,enum=proto.MediaRetryNotification_ResultType" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaRetryNotification) Reset() {
	*x = MediaRetryNotification{}
	mi := &file_WAProto_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaRetryNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaRetryNotification) ProtoMessage() {}

func (x *MediaRetryNotification) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaRetryNotification.ProtoReflect.Descriptor instead.
func (*MediaRetryNotification) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{47}
}

func (x *MediaRetryNotification) GetStanzaId() string {
	if x != nil && x.StanzaId != nil {
		return *x.StanzaId
	}
	return ""
}

func (x *MediaRetryNotification) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *MediaRetryNotification) GetResult() MediaRetryNotification_ResultType {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return MediaRetryNotification_GENERAL_ERROR
}

type Message struct {
	state                                      protoimpl.MessageState                    `protogen:"open.v1"`
	Conversation                               *string                                   `protobuf:"bytes,1,opt,name=conversation" json:"conversation,omitempty"`
	SenderKeyDistributionMessage               *Message_SenderKeyDistributionMessage     `protobuf:"bytes,2,opt,name=senderKeyDistributionMessage" json:"senderKeyDistributionMessage,omitempty"`
	ImageMessage                               *Message_ImageMessage                     `protobuf:"bytes,3,opt,name=imageMessage" json:"imageMessage,omitempty"`
	ContactMessage                             *Message_ContactMessage                   `protobuf:"bytes,4,opt,name=contactMessage" json:"contactMessage,omitempty"`
	LocationMessage                            *Message_LocationMessage                  `protobuf:"bytes,5,opt,name=locationMessage" json:"locationMessage,omitempty"`
	ExtendedTextMessage                        *Message_ExtendedTextMessage              `protobuf:"bytes,6,opt,name=extendedTextMessage" json:"extendedTextMessage,omitempty"`
	DocumentMessage                            *Message_DocumentMessage                  `protobuf:"bytes,7,opt,name=documentMessage" json:"documentMessage,omitempty"`
	AudioMessage                               *Message_AudioMessage                     `protobuf:"bytes,8,opt,name=audioMessage" json:"audioMessage,omitempty"`
	VideoMessage                               *Message_VideoMessage                     `protobuf:"bytes,9,opt,name=videoMessage" json:"videoMessage,omitempty"`
	Call                                       *Message_Call                             `protobuf:"bytes,10,opt,name=call" json:"call,omitempty"`
	Chat                                       *Message_Chat                             `protobuf:"bytes,11,opt,name=chat" json:"chat,omitempty"`
	ProtocolMessage                            *Message_ProtocolMessage                  `protobuf:"bytes,12,opt,name=protocolMessage" json:"protocolMessage,omitempty"`
	ContactsArrayMessage                       *Message_ContactsArrayMessage             `protobuf:"bytes,13,opt,name=contactsArrayMessage" json:"contactsArrayMessage,omitempty"`
	HighlyStructuredMessage                    *Message_HighlyStructuredMessage          `protobuf:"bytes,14,opt,name=highlyStructuredMessage" json:"highlyStructuredMessage,omitempty"`
	FastRatchetKeySenderKeyDistributionMessage *Message_SenderKeyDistributionMessage     `protobuf:"bytes,15,opt,name=fastRatchetKeySenderKeyDistributionMessage" json:"fastRatchetKeySenderKeyDistributionMessage,omitempty"`
	SendPaymentMessage                         *Message_SendPaymentMessage               `protobuf:"bytes,16,opt,name=sendPaymentMessage" json:"sendPaymentMessage,omitempty"`
	LiveLocationMessage                        *Message_LiveLocationMessage              `protobuf:"bytes,18,opt,name=liveLocationMessage" json:"liveLocationMessage,omitempty"`
	RequestPaymentMessage                      *Message_RequestPaymentMessage            `protobuf:"bytes,22,opt,name=requestPaymentMessage" json:"requestPaymentMessage,omitempty"`
	DeclinePaymentRequestMessage               *Message_DeclinePaymentRequestMessage     `protobuf:"bytes,23,opt,name=declinePaymentRequestMessage" json:"declinePaymentRequestMessage,omitempty"`
	CancelPaymentRequestMessage                *Message_CancelPaymentRequestMessage      `protobuf:"bytes,24,opt,name=cancelPaymentRequestMessage" json:"cancelPaymentRequestMessage,omitempty"`
	TemplateMessage                            *Message_TemplateMessage                  `protobuf:"bytes,25,opt,name=templateMessage" json:"templateMessage,omitempty"`
	StickerMessage                             *Message_StickerMessage                   `protobuf:"bytes,26,opt,name=stickerMessage" json:"stickerMessage,omitempty"`
	GroupInviteMessage                         *Message_GroupInviteMessage               `protobuf:"bytes,28,opt,name=groupInviteMessage" json:"groupInviteMessage,omitempty"`
	TemplateButtonReplyMessage                 *Message_TemplateButtonReplyMessage       `protobuf:"bytes,29,opt,name=templateButtonReplyMessage" json:"templateButtonReplyMessage,omitempty"`
	ProductMessage                             *Message_ProductMessage                   `protobuf:"bytes,30,opt,name=productMessage" json:"productMessage,omitempty"`
	DeviceSentMessage                          *Message_DeviceSentMessage                `protobuf:"bytes,31,opt,name=deviceSentMessage" json:"deviceSentMessage,omitempty"`
	MessageContextInfo                         *MessageContextInfo                       `protobuf:"bytes,35,opt,name=messageContextInfo" json:"messageContextInfo,omitempty"`
	ListMessage                                *Message_ListMessage                      `protobuf:"bytes,36,opt,name=listMessage" json:"listMessage,omitempty"`
	ViewOnceMessage                            *Message_FutureProofMessage               `protobuf:"bytes,37,opt,name=viewOnceMessage" json:"viewOnceMessage,omitempty"`
	OrderMessage                               *Message_OrderMessage                     `protobuf:"bytes,38,opt,name=orderMessage" json:"orderMessage,omitempty"`
	ListResponseMessage                        *Message_ListResponseMessage              `protobuf:"bytes,39,opt,name=listResponseMessage" json:"listResponseMessage,omitempty"`
	EphemeralMessage                           *Message_FutureProofMessage               `protobuf:"bytes,40,opt,name=ephemeralMessage" json:"ephemeralMessage,omitempty"`
	InvoiceMessage                             *Message_InvoiceMessage                   `protobuf:"bytes,41,opt,name=invoiceMessage" json:"invoiceMessage,omitempty"`
	ButtonsMessage                             *Message_ButtonsMessage                   `protobuf:"bytes,42,opt,name=buttonsMessage" json:"buttonsMessage,omitempty"`
	ButtonsResponseMessage                     *Message_ButtonsResponseMessage           `protobuf:"bytes,43,opt,name=buttonsResponseMessage" json:"buttonsResponseMessage,omitempty"`
	PaymentInviteMessage                       *Message_PaymentInviteMessage             `protobuf:"bytes,44,opt,name=paymentInviteMessage" json:"paymentInviteMessage,omitempty"`
	InteractiveMessage                         *Message_InteractiveMessage               `protobuf:"bytes,45,opt,name=interactiveMessage" json:"interactiveMessage,omitempty"`
	ReactionMessage                            *Message_ReactionMessage                  `protobuf:"bytes,46,opt,name=reactionMessage" json:"reactionMessage,omitempty"`
	StickerSyncRmrMessage                      *Message_StickerSyncRMRMessage            `protobuf:"bytes,47,opt,name=stickerSyncRmrMessage" json:"stickerSyncRmrMessage,omitempty"`
	InteractiveResponseMessage                 *Message_InteractiveResponseMessage       `protobuf:"bytes,48,opt,name=interactiveResponseMessage" json:"interactiveResponseMessage,omitempty"`
	PollCreationMessage                        *Message_PollCreationMessage              `protobuf:"bytes,49,opt,name=pollCreationMessage" json:"pollCreationMessage,omitempty"`
	PollUpdateMessage                          *Message_PollUpdateMessage                `protobuf:"bytes,50,opt,name=pollUpdateMessage" json:"pollUpdateMessage,omitempty"`
	KeepInChatMessage                          *Message_KeepInChatMessage                `protobuf:"bytes,51,opt,name=keepInChatMessage" json:"keepInChatMessage,omitempty"`
	DocumentWithCaptionMessage                 *Message_FutureProofMessage               `protobuf:"bytes,53,opt,name=documentWithCaptionMessage" json:"documentWithCaptionMessage,omitempty"`
	RequestPhoneNumberMessage                  *Message_RequestPhoneNumberMessage        `protobuf:"bytes,54,opt,name=requestPhoneNumberMessage" json:"requestPhoneNumberMessage,omitempty"`
	ViewOnceMessageV2                          *Message_FutureProofMessage               `protobuf:"bytes,55,opt,name=viewOnceMessageV2" json:"viewOnceMessageV2,omitempty"`
	EncReactionMessage                         *Message_EncReactionMessage               `protobuf:"bytes,56,opt,name=encReactionMessage" json:"encReactionMessage,omitempty"`
	EditedMessage                              *Message_FutureProofMessage               `protobuf:"bytes,58,opt,name=editedMessage" json:"editedMessage,omitempty"`
	ViewOnceMessageV2Extension                 *Message_FutureProofMessage               `protobuf:"bytes,59,opt,name=viewOnceMessageV2Extension" json:"viewOnceMessageV2Extension,omitempty"`
	PollCreationMessageV2                      *Message_PollCreationMessage              `protobuf:"bytes,60,opt,name=pollCreationMessageV2" json:"pollCreationMessageV2,omitempty"`
	ScheduledCallCreationMessage               *Message_ScheduledCallCreationMessage     `protobuf:"bytes,61,opt,name=scheduledCallCreationMessage" json:"scheduledCallCreationMessage,omitempty"`
	GroupMentionedMessage                      *Message_FutureProofMessage               `protobuf:"bytes,62,opt,name=groupMentionedMessage" json:"groupMentionedMessage,omitempty"`
	PinInChatMessage                           *Message_PinInChatMessage                 `protobuf:"bytes,63,opt,name=pinInChatMessage" json:"pinInChatMessage,omitempty"`
	PollCreationMessageV3                      *Message_PollCreationMessage              `protobuf:"bytes,64,opt,name=pollCreationMessageV3" json:"pollCreationMessageV3,omitempty"`
	ScheduledCallEditMessage                   *Message_ScheduledCallEditMessage         `protobuf:"bytes,65,opt,name=scheduledCallEditMessage" json:"scheduledCallEditMessage,omitempty"`
	PtvMessage                                 *Message_VideoMessage                     `protobuf:"bytes,66,opt,name=ptvMessage" json:"ptvMessage,omitempty"`
	BotInvokeMessage                           *Message_FutureProofMessage               `protobuf:"bytes,67,opt,name=botInvokeMessage" json:"botInvokeMessage,omitempty"`
	CallLogMesssage                            *Message_CallLogMessage                   `protobuf:"bytes,69,opt,name=callLogMesssage" json:"callLogMesssage,omitempty"`
	MessageHistoryBundle                       *Message_MessageHistoryBundle             `protobuf:"bytes,70,opt,name=messageHistoryBundle" json:"messageHistoryBundle,omitempty"`
	EncCommentMessage                          *Message_EncCommentMessage                `protobuf:"bytes,71,opt,name=encCommentMessage" json:"encCommentMessage,omitempty"`
	BcallMessage                               *Message_BCallMessage                     `protobuf:"bytes,72,opt,name=bcallMessage" json:"bcallMessage,omitempty"`
	LottieStickerMessage                       *Message_FutureProofMessage               `protobuf:"bytes,74,opt,name=lottieStickerMessage" json:"lottieStickerMessage,omitempty"`
	EventMessage                               *Message_EventMessage                     `protobuf:"bytes,75,opt,name=eventMessage" json:"eventMessage,omitempty"`
	CommentMessage                             *Message_CommentMessage                   `protobuf:"bytes,77,opt,name=commentMessage" json:"commentMessage,omitempty"`
	NewsletterAdminInviteMessage               *Message_NewsletterAdminInviteMessage     `protobuf:"bytes,78,opt,name=newsletterAdminInviteMessage" json:"newsletterAdminInviteMessage,omitempty"`
	ExtendedTextMessageWithParentKey           *Message_ExtendedTextMessageWithParentKey `protobuf:"bytes,79,opt,name=extendedTextMessageWithParentKey" json:"extendedTextMessageWithParentKey,omitempty"`
	PlaceholderMessage                         *Message_PlaceholderMessage               `protobuf:"bytes,80,opt,name=placeholderMessage" json:"placeholderMessage,omitempty"`
	EncEventUpdateMessage                      *Message_EncEventUpdateMessage            `protobuf:"bytes,81,opt,name=encEventUpdateMessage" json:"encEventUpdateMessage,omitempty"`
	unknownFields                              protoimpl.UnknownFields
	sizeCache                                  protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_WAProto_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48}
}

func (x *Message) GetConversation() string {
	if x != nil && x.Conversation != nil {
		return *x.Conversation
	}
	return ""
}

func (x *Message) GetSenderKeyDistributionMessage() *Message_SenderKeyDistributionMessage {
	if x != nil {
		return x.SenderKeyDistributionMessage
	}
	return nil
}

func (x *Message) GetImageMessage() *Message_ImageMessage {
	if x != nil {
		return x.ImageMessage
	}
	return nil
}

func (x *Message) GetContactMessage() *Message_ContactMessage {
	if x != nil {
		return x.ContactMessage
	}
	return nil
}

func (x *Message) GetLocationMessage() *Message_LocationMessage {
	if x != nil {
		return x.LocationMessage
	}
	return nil
}

func (x *Message) GetExtendedTextMessage() *Message_ExtendedTextMessage {
	if x != nil {
		return x.ExtendedTextMessage
	}
	return nil
}

func (x *Message) GetDocumentMessage() *Message_DocumentMessage {
	if x != nil {
		return x.DocumentMessage
	}
	return nil
}

func (x *Message) GetAudioMessage() *Message_AudioMessage {
	if x != nil {
		return x.AudioMessage
	}
	return nil
}

func (x *Message) GetVideoMessage() *Message_VideoMessage {
	if x != nil {
		return x.VideoMessage
	}
	return nil
}

func (x *Message) GetCall() *Message_Call {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *Message) GetChat() *Message_Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *Message) GetProtocolMessage() *Message_ProtocolMessage {
	if x != nil {
		return x.ProtocolMessage
	}
	return nil
}

func (x *Message) GetContactsArrayMessage() *Message_ContactsArrayMessage {
	if x != nil {
		return x.ContactsArrayMessage
	}
	return nil
}

func (x *Message) GetHighlyStructuredMessage() *Message_HighlyStructuredMessage {
	if x != nil {
		return x.HighlyStructuredMessage
	}
	return nil
}

func (x *Message) GetFastRatchetKeySenderKeyDistributionMessage() *Message_SenderKeyDistributionMessage {
	if x != nil {
		return x.FastRatchetKeySenderKeyDistributionMessage
	}
	return nil
}

func (x *Message) GetSendPaymentMessage() *Message_SendPaymentMessage {
	if x != nil {
		return x.SendPaymentMessage
	}
	return nil
}

func (x *Message) GetLiveLocationMessage() *Message_LiveLocationMessage {
	if x != nil {
		return x.LiveLocationMessage
	}
	return nil
}

func (x *Message) GetRequestPaymentMessage() *Message_RequestPaymentMessage {
	if x != nil {
		return x.RequestPaymentMessage
	}
	return nil
}

func (x *Message) GetDeclinePaymentRequestMessage() *Message_DeclinePaymentRequestMessage {
	if x != nil {
		return x.DeclinePaymentRequestMessage
	}
	return nil
}

func (x *Message) GetCancelPaymentRequestMessage() *Message_CancelPaymentRequestMessage {
	if x != nil {
		return x.CancelPaymentRequestMessage
	}
	return nil
}

func (x *Message) GetTemplateMessage() *Message_TemplateMessage {
	if x != nil {
		return x.TemplateMessage
	}
	return nil
}

func (x *Message) GetStickerMessage() *Message_StickerMessage {
	if x != nil {
		return x.StickerMessage
	}
	return nil
}

func (x *Message) GetGroupInviteMessage() *Message_GroupInviteMessage {
	if x != nil {
		return x.GroupInviteMessage
	}
	return nil
}

func (x *Message) GetTemplateButtonReplyMessage() *Message_TemplateButtonReplyMessage {
	if x != nil {
		return x.TemplateButtonReplyMessage
	}
	return nil
}

func (x *Message) GetProductMessage() *Message_ProductMessage {
	if x != nil {
		return x.ProductMessage
	}
	return nil
}

func (x *Message) GetDeviceSentMessage() *Message_DeviceSentMessage {
	if x != nil {
		return x.DeviceSentMessage
	}
	return nil
}

func (x *Message) GetMessageContextInfo() *MessageContextInfo {
	if x != nil {
		return x.MessageContextInfo
	}
	return nil
}

func (x *Message) GetListMessage() *Message_ListMessage {
	if x != nil {
		return x.ListMessage
	}
	return nil
}

func (x *Message) GetViewOnceMessage() *Message_FutureProofMessage {
	if x != nil {
		return x.ViewOnceMessage
	}
	return nil
}

func (x *Message) GetOrderMessage() *Message_OrderMessage {
	if x != nil {
		return x.OrderMessage
	}
	return nil
}

func (x *Message) GetListResponseMessage() *Message_ListResponseMessage {
	if x != nil {
		return x.ListResponseMessage
	}
	return nil
}

func (x *Message) GetEphemeralMessage() *Message_FutureProofMessage {
	if x != nil {
		return x.EphemeralMessage
	}
	return nil
}

func (x *Message) GetInvoiceMessage() *Message_InvoiceMessage {
	if x != nil {
		return x.InvoiceMessage
	}
	return nil
}

func (x *Message) GetButtonsMessage() *Message_ButtonsMessage {
	if x != nil {
		return x.ButtonsMessage
	}
	return nil
}

func (x *Message) GetButtonsResponseMessage() *Message_ButtonsResponseMessage {
	if x != nil {
		return x.ButtonsResponseMessage
	}
	return nil
}

func (x *Message) GetPaymentInviteMessage() *Message_PaymentInviteMessage {
	if x != nil {
		return x.PaymentInviteMessage
	}
	return nil
}

func (x *Message) GetInteractiveMessage() *Message_InteractiveMessage {
	if x != nil {
		return x.InteractiveMessage
	}
	return nil
}

func (x *Message) GetReactionMessage() *Message_ReactionMessage {
	if x != nil {
		return x.ReactionMessage
	}
	return nil
}

func (x *Message) GetStickerSyncRmrMessage() *Message_StickerSyncRMRMessage {
	if x != nil {
		return x.StickerSyncRmrMessage
	}
	return nil
}

func (x *Message) GetInteractiveResponseMessage() *Message_InteractiveResponseMessage {
	if x != nil {
		return x.InteractiveResponseMessage
	}
	return nil
}

func (x *Message) GetPollCreationMessage() *Message_PollCreationMessage {
	if x != nil {
		return x.PollCreationMessage
	}
	return nil
}

func (x *Message) GetPollUpdateMessage() *Message_PollUpdateMessage {
	if x != nil {
		return x.PollUpdateMessage
	}
	return nil
}

func (x *Message) GetKeepInChatMessage() *Message_KeepInChatMessage {
	if x != nil {
		return x.KeepInChatMessage
	}
	return nil
}

func (x *Message) GetDocumentWithCaptionMessage() *Message_FutureProofMessage {
	if x != nil {
		return x.DocumentWithCaptionMessage
	}
	return nil
}

func (x *Message) GetRequestPhoneNumberMessage() *Message_RequestPhoneNumberMessage {
	if x != nil {
		return x.RequestPhoneNumberMessage
	}
	return nil
}

func (x *Message) GetViewOnceMessageV2() *Message_FutureProofMessage {
	if x != nil {
		return x.ViewOnceMessageV2
	}
	return nil
}

func (x *Message) GetEncReactionMessage() *Message_EncReactionMessage {
	if x != nil {
		return x.EncReactionMessage
	}
	return nil
}

func (x *Message) GetEditedMessage() *Message_FutureProofMessage {
	if x != nil {
		return x.EditedMessage
	}
	return nil
}

func (x *Message) GetViewOnceMessageV2Extension() *Message_FutureProofMessage {
	if x != nil {
		return x.ViewOnceMessageV2Extension
	}
	return nil
}

func (x *Message) GetPollCreationMessageV2() *Message_PollCreationMessage {
	if x != nil {
		return x.PollCreationMessageV2
	}
	return nil
}

func (x *Message) GetScheduledCallCreationMessage() *Message_ScheduledCallCreationMessage {
	if x != nil {
		return x.ScheduledCallCreationMessage
	}
	return nil
}

func (x *Message) GetGroupMentionedMessage() *Message_FutureProofMessage {
	if x != nil {
		return x.GroupMentionedMessage
	}
	return nil
}

func (x *Message) GetPinInChatMessage() *Message_PinInChatMessage {
	if x != nil {
		return x.PinInChatMessage
	}
	return nil
}

func (x *Message) GetPollCreationMessageV3() *Message_PollCreationMessage {
	if x != nil {
		return x.PollCreationMessageV3
	}
	return nil
}

func (x *Message) GetScheduledCallEditMessage() *Message_ScheduledCallEditMessage {
	if x != nil {
		return x.ScheduledCallEditMessage
	}
	return nil
}

func (x *Message) GetPtvMessage() *Message_VideoMessage {
	if x != nil {
		return x.PtvMessage
	}
	return nil
}

func (x *Message) GetBotInvokeMessage() *Message_FutureProofMessage {
	if x != nil {
		return x.BotInvokeMessage
	}
	return nil
}

func (x *Message) GetCallLogMesssage() *Message_CallLogMessage {
	if x != nil {
		return x.CallLogMesssage
	}
	return nil
}

func (x *Message) GetMessageHistoryBundle() *Message_MessageHistoryBundle {
	if x != nil {
		return x.MessageHistoryBundle
	}
	return nil
}

func (x *Message) GetEncCommentMessage() *Message_EncCommentMessage {
	if x != nil {
		return x.EncCommentMessage
	}
	return nil
}

func (x *Message) GetBcallMessage() *Message_BCallMessage {
	if x != nil {
		return x.BcallMessage
	}
	return nil
}

func (x *Message) GetLottieStickerMessage() *Message_FutureProofMessage {
	if x != nil {
		return x.LottieStickerMessage
	}
	return nil
}

func (x *Message) GetEventMessage() *Message_EventMessage {
	if x != nil {
		return x.EventMessage
	}
	return nil
}

func (x *Message) GetCommentMessage() *Message_CommentMessage {
	if x != nil {
		return x.CommentMessage
	}
	return nil
}

func (x *Message) GetNewsletterAdminInviteMessage() *Message_NewsletterAdminInviteMessage {
	if x != nil {
		return x.NewsletterAdminInviteMessage
	}
	return nil
}

func (x *Message) GetExtendedTextMessageWithParentKey() *Message_ExtendedTextMessageWithParentKey {
	if x != nil {
		return x.ExtendedTextMessageWithParentKey
	}
	return nil
}

func (x *Message) GetPlaceholderMessage() *Message_PlaceholderMessage {
	if x != nil {
		return x.PlaceholderMessage
	}
	return nil
}

func (x *Message) GetEncEventUpdateMessage() *Message_EncEventUpdateMessage {
	if x != nil {
		return x.EncEventUpdateMessage
	}
	return nil
}

type MessageAddOnContextInfo struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	MessageAddOnDurationInSecs *uint32                `protobuf:"varint,1,opt,name=messageAddOnDurationInSecs" json:"messageAddOnDurationInSecs,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *MessageAddOnContextInfo) Reset() {
	*x = MessageAddOnContextInfo{}
	mi := &file_WAProto_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageAddOnContextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAddOnContextInfo) ProtoMessage() {}

func (x *MessageAddOnContextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAddOnContextInfo.ProtoReflect.Descriptor instead.
func (*MessageAddOnContextInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{49}
}

func (x *MessageAddOnContextInfo) GetMessageAddOnDurationInSecs() uint32 {
	if x != nil && x.MessageAddOnDurationInSecs != nil {
		return *x.MessageAddOnDurationInSecs
	}
	return 0
}

type MessageContextInfo struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	DeviceListMetadata         *DeviceListMetadata    `protobuf:"bytes,1,opt,name=deviceListMetadata" json:"deviceListMetadata,omitempty"`
	DeviceListMetadataVersion  *int32                 `protobuf:"varint,2,opt,name=deviceListMetadataVersion" json:"deviceListMetadataVersion,omitempty"`
	MessageSecret              []byte                 `protobuf:"bytes,3,opt,name=messageSecret" json:"messageSecret,omitempty"`
	PaddingBytes               []byte                 `protobuf:"bytes,4,opt,name=paddingBytes" json:"paddingBytes,omitempty"`
	MessageAddOnDurationInSecs *uint32                `protobuf:"varint,5,opt,name=messageAddOnDurationInSecs" json:"messageAddOnDurationInSecs,omitempty"`
	BotMessageSecret           []byte                 `protobuf:"bytes,6,opt,name=botMessageSecret" json:"botMessageSecret,omitempty"`
	BotMetadata                *BotMetadata           `protobuf:"bytes,7,opt,name=botMetadata" json:"botMetadata,omitempty"`
	ReportingTokenVersion      *int32                 `protobuf:"varint,8,opt,name=reportingTokenVersion" json:"reportingTokenVersion,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *MessageContextInfo) Reset() {
	*x = MessageContextInfo{}
	mi := &file_WAProto_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageContextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageContextInfo) ProtoMessage() {}

func (x *MessageContextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageContextInfo.ProtoReflect.Descriptor instead.
func (*MessageContextInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{50}
}

func (x *MessageContextInfo) GetDeviceListMetadata() *DeviceListMetadata {
	if x != nil {
		return x.DeviceListMetadata
	}
	return nil
}

func (x *MessageContextInfo) GetDeviceListMetadataVersion() int32 {
	if x != nil && x.DeviceListMetadataVersion != nil {
		return *x.DeviceListMetadataVersion
	}
	return 0
}

func (x *MessageContextInfo) GetMessageSecret() []byte {
	if x != nil {
		return x.MessageSecret
	}
	return nil
}

func (x *MessageContextInfo) GetPaddingBytes() []byte {
	if x != nil {
		return x.PaddingBytes
	}
	return nil
}

func (x *MessageContextInfo) GetMessageAddOnDurationInSecs() uint32 {
	if x != nil && x.MessageAddOnDurationInSecs != nil {
		return *x.MessageAddOnDurationInSecs
	}
	return 0
}

func (x *MessageContextInfo) GetBotMessageSecret() []byte {
	if x != nil {
		return x.BotMessageSecret
	}
	return nil
}

func (x *MessageContextInfo) GetBotMetadata() *BotMetadata {
	if x != nil {
		return x.BotMetadata
	}
	return nil
}

func (x *MessageContextInfo) GetReportingTokenVersion() int32 {
	if x != nil && x.ReportingTokenVersion != nil {
		return *x.ReportingTokenVersion
	}
	return 0
}

type MessageKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RemoteJid     *string                `protobuf:"bytes,1,opt,name=remoteJid" json:"remoteJid,omitempty"`
	FromMe        *bool                  `protobuf:"varint,2,opt,name=fromMe" json:"fromMe,omitempty"`
	Id            *string                `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Participant   *string                `protobuf:"bytes,4,opt,name=participant" json:"participant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageKey) Reset() {
	*x = MessageKey{}
	mi := &file_WAProto_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageKey) ProtoMessage() {}

func (x *MessageKey) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageKey.ProtoReflect.Descriptor instead.
func (*MessageKey) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{51}
}

func (x *MessageKey) GetRemoteJid() string {
	if x != nil && x.RemoteJid != nil {
		return *x.RemoteJid
	}
	return ""
}

func (x *MessageKey) GetFromMe() bool {
	if x != nil && x.FromMe != nil {
		return *x.FromMe
	}
	return false
}

func (x *MessageKey) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *MessageKey) GetParticipant() string {
	if x != nil && x.Participant != nil {
		return *x.Participant
	}
	return ""
}

type MessageSecretMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *int32                 `protobuf:"fixed32,1,opt,name=version" json:"version,omitempty"`
	EncIv         []byte                 `protobuf:"bytes,2,opt,name=encIv" json:"encIv,omitempty"`
	EncPayload    []byte                 `protobuf:"bytes,3,opt,name=encPayload" json:"encPayload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageSecretMessage) Reset() {
	*x = MessageSecretMessage{}
	mi := &file_WAProto_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageSecretMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSecretMessage) ProtoMessage() {}

func (x *MessageSecretMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSecretMessage.ProtoReflect.Descriptor instead.
func (*MessageSecretMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{52}
}

func (x *MessageSecretMessage) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *MessageSecretMessage) GetEncIv() []byte {
	if x != nil {
		return x.EncIv
	}
	return nil
}

func (x *MessageSecretMessage) GetEncPayload() []byte {
	if x != nil {
		return x.EncPayload
	}
	return nil
}

type Money struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *int64                 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Offset        *uint32                `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	CurrencyCode  *string                `protobuf:"bytes,3,opt,name=currencyCode" json:"currencyCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Money) Reset() {
	*x = Money{}
	mi := &file_WAProto_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money) ProtoMessage() {}

func (x *Money) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money.ProtoReflect.Descriptor instead.
func (*Money) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{53}
}

func (x *Money) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *Money) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *Money) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

type MsgOpaqueData struct {
	state                       protoimpl.MessageState      `protogen:"open.v1"`
	Body                        *string                     `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	Caption                     *string                     `protobuf:"bytes,3,opt,name=caption" json:"caption,omitempty"`
	Lng                         *float64                    `protobuf:"fixed64,5,opt,name=lng" json:"lng,omitempty"`
	IsLive                      *bool                       `protobuf:"varint,6,opt,name=isLive" json:"isLive,omitempty"`
	Lat                         *float64                    `protobuf:"fixed64,7,opt,name=lat" json:"lat,omitempty"`
	PaymentAmount1000           *int32                      `protobuf:"varint,8,opt,name=paymentAmount1000" json:"paymentAmount1000,omitempty"`
	PaymentNoteMsgBody          *string                     `protobuf:"bytes,9,opt,name=paymentNoteMsgBody" json:"paymentNoteMsgBody,omitempty"`
	CanonicalUrl                *string                     `protobuf:"bytes,10,opt,name=canonicalUrl" json:"canonicalUrl,omitempty"`
	MatchedText                 *string                     `protobuf:"bytes,11,opt,name=matchedText" json:"matchedText,omitempty"`
	Title                       *string                     `protobuf:"bytes,12,opt,name=title" json:"title,omitempty"`
	Description                 *string                     `protobuf:"bytes,13,opt,name=description" json:"description,omitempty"`
	FutureproofBuffer           []byte                      `protobuf:"bytes,14,opt,name=futureproofBuffer" json:"futureproofBuffer,omitempty"`
	ClientUrl                   *string                     `protobuf:"bytes,15,opt,name=clientUrl" json:"clientUrl,omitempty"`
	Loc                         *string                     `protobuf:"bytes,16,opt,name=loc" json:"loc,omitempty"`
	PollName                    *string                     `protobuf:"bytes,17,opt,name=pollName" json:"pollName,omitempty"`
	PollOptions                 []*MsgOpaqueData_PollOption `protobuf:"bytes,18,rep,name=pollOptions" json:"pollOptions,omitempty"`
	PollSelectableOptionsCount  *uint32                     `protobuf:"varint,20,opt,name=pollSelectableOptionsCount" json:"pollSelectableOptionsCount,omitempty"`
	MessageSecret               []byte                      `protobuf:"bytes,21,opt,name=messageSecret" json:"messageSecret,omitempty"`
	OriginalSelfAuthor          *string                     `protobuf:"bytes,51,opt,name=originalSelfAuthor" json:"originalSelfAuthor,omitempty"`
	SenderTimestampMs           *int64                      `protobuf:"varint,22,opt,name=senderTimestampMs" json:"senderTimestampMs,omitempty"`
	PollUpdateParentKey         *string                     `protobuf:"bytes,23,opt,name=pollUpdateParentKey" json:"pollUpdateParentKey,omitempty"`
	EncPollVote                 *PollEncValue               `protobuf:"bytes,24,opt,name=encPollVote" json:"encPollVote,omitempty"`
	IsSentCagPollCreation       *bool                       `protobuf:"varint,28,opt,name=isSentCagPollCreation" json:"isSentCagPollCreation,omitempty"`
	EncReactionTargetMessageKey *string                     `protobuf:"bytes,25,opt,name=encReactionTargetMessageKey" json:"encReactionTargetMessageKey,omitempty"`
	EncReactionEncPayload       []byte                      `protobuf:"bytes,26,opt,name=encReactionEncPayload" json:"encReactionEncPayload,omitempty"`
	EncReactionEncIv            []byte                      `protobuf:"bytes,27,opt,name=encReactionEncIv" json:"encReactionEncIv,omitempty"`
	BotMessageSecret            []byte                      `protobuf:"bytes,29,opt,name=botMessageSecret" json:"botMessageSecret,omitempty"`
	TargetMessageKey            *string                     `protobuf:"bytes,30,opt,name=targetMessageKey" json:"targetMessageKey,omitempty"`
	EncPayload                  []byte                      `protobuf:"bytes,31,opt,name=encPayload" json:"encPayload,omitempty"`
	EncIv                       []byte                      `protobuf:"bytes,32,opt,name=encIv" json:"encIv,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *MsgOpaqueData) Reset() {
	*x = MsgOpaqueData{}
	mi := &file_WAProto_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgOpaqueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgOpaqueData) ProtoMessage() {}

func (x *MsgOpaqueData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgOpaqueData.ProtoReflect.Descriptor instead.
func (*MsgOpaqueData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{54}
}

func (x *MsgOpaqueData) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *MsgOpaqueData) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

func (x *MsgOpaqueData) GetLng() float64 {
	if x != nil && x.Lng != nil {
		return *x.Lng
	}
	return 0
}

func (x *MsgOpaqueData) GetIsLive() bool {
	if x != nil && x.IsLive != nil {
		return *x.IsLive
	}
	return false
}

func (x *MsgOpaqueData) GetLat() float64 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *MsgOpaqueData) GetPaymentAmount1000() int32 {
	if x != nil && x.PaymentAmount1000 != nil {
		return *x.PaymentAmount1000
	}
	return 0
}

func (x *MsgOpaqueData) GetPaymentNoteMsgBody() string {
	if x != nil && x.PaymentNoteMsgBody != nil {
		return *x.PaymentNoteMsgBody
	}
	return ""
}

func (x *MsgOpaqueData) GetCanonicalUrl() string {
	if x != nil && x.CanonicalUrl != nil {
		return *x.CanonicalUrl
	}
	return ""
}

func (x *MsgOpaqueData) GetMatchedText() string {
	if x != nil && x.MatchedText != nil {
		return *x.MatchedText
	}
	return ""
}

func (x *MsgOpaqueData) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *MsgOpaqueData) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MsgOpaqueData) GetFutureproofBuffer() []byte {
	if x != nil {
		return x.FutureproofBuffer
	}
	return nil
}

func (x *MsgOpaqueData) GetClientUrl() string {
	if x != nil && x.ClientUrl != nil {
		return *x.ClientUrl
	}
	return ""
}

func (x *MsgOpaqueData) GetLoc() string {
	if x != nil && x.Loc != nil {
		return *x.Loc
	}
	return ""
}

func (x *MsgOpaqueData) GetPollName() string {
	if x != nil && x.PollName != nil {
		return *x.PollName
	}
	return ""
}

func (x *MsgOpaqueData) GetPollOptions() []*MsgOpaqueData_PollOption {
	if x != nil {
		return x.PollOptions
	}
	return nil
}

func (x *MsgOpaqueData) GetPollSelectableOptionsCount() uint32 {
	if x != nil && x.PollSelectableOptionsCount != nil {
		return *x.PollSelectableOptionsCount
	}
	return 0
}

func (x *MsgOpaqueData) GetMessageSecret() []byte {
	if x != nil {
		return x.MessageSecret
	}
	return nil
}

func (x *MsgOpaqueData) GetOriginalSelfAuthor() string {
	if x != nil && x.OriginalSelfAuthor != nil {
		return *x.OriginalSelfAuthor
	}
	return ""
}

func (x *MsgOpaqueData) GetSenderTimestampMs() int64 {
	if x != nil && x.SenderTimestampMs != nil {
		return *x.SenderTimestampMs
	}
	return 0
}

func (x *MsgOpaqueData) GetPollUpdateParentKey() string {
	if x != nil && x.PollUpdateParentKey != nil {
		return *x.PollUpdateParentKey
	}
	return ""
}

func (x *MsgOpaqueData) GetEncPollVote() *PollEncValue {
	if x != nil {
		return x.EncPollVote
	}
	return nil
}

func (x *MsgOpaqueData) GetIsSentCagPollCreation() bool {
	if x != nil && x.IsSentCagPollCreation != nil {
		return *x.IsSentCagPollCreation
	}
	return false
}

func (x *MsgOpaqueData) GetEncReactionTargetMessageKey() string {
	if x != nil && x.EncReactionTargetMessageKey != nil {
		return *x.EncReactionTargetMessageKey
	}
	return ""
}

func (x *MsgOpaqueData) GetEncReactionEncPayload() []byte {
	if x != nil {
		return x.EncReactionEncPayload
	}
	return nil
}

func (x *MsgOpaqueData) GetEncReactionEncIv() []byte {
	if x != nil {
		return x.EncReactionEncIv
	}
	return nil
}

func (x *MsgOpaqueData) GetBotMessageSecret() []byte {
	if x != nil {
		return x.BotMessageSecret
	}
	return nil
}

func (x *MsgOpaqueData) GetTargetMessageKey() string {
	if x != nil && x.TargetMessageKey != nil {
		return *x.TargetMessageKey
	}
	return ""
}

func (x *MsgOpaqueData) GetEncPayload() []byte {
	if x != nil {
		return x.EncPayload
	}
	return nil
}

func (x *MsgOpaqueData) GetEncIv() []byte {
	if x != nil {
		return x.EncIv
	}
	return nil
}

type MsgRowOpaqueData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrentMsg    *MsgOpaqueData         `protobuf:"bytes,1,opt,name=currentMsg" json:"currentMsg,omitempty"`
	QuotedMsg     *MsgOpaqueData         `protobuf:"bytes,2,opt,name=quotedMsg" json:"quotedMsg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MsgRowOpaqueData) Reset() {
	*x = MsgRowOpaqueData{}
	mi := &file_WAProto_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgRowOpaqueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRowOpaqueData) ProtoMessage() {}

func (x *MsgRowOpaqueData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRowOpaqueData.ProtoReflect.Descriptor instead.
func (*MsgRowOpaqueData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{55}
}

func (x *MsgRowOpaqueData) GetCurrentMsg() *MsgOpaqueData {
	if x != nil {
		return x.CurrentMsg
	}
	return nil
}

func (x *MsgRowOpaqueData) GetQuotedMsg() *MsgOpaqueData {
	if x != nil {
		return x.QuotedMsg
	}
	return nil
}

type NoiseCertificate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Details       []byte                 `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoiseCertificate) Reset() {
	*x = NoiseCertificate{}
	mi := &file_WAProto_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoiseCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseCertificate) ProtoMessage() {}

func (x *NoiseCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseCertificate.ProtoReflect.Descriptor instead.
func (*NoiseCertificate) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{56}
}

func (x *NoiseCertificate) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *NoiseCertificate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type NotificationMessageInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Key              *MessageKey            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Message          *Message               `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	MessageTimestamp *uint64                `protobuf:"varint,3,opt,name=messageTimestamp" json:"messageTimestamp,omitempty"`
	Participant      *string                `protobuf:"bytes,4,opt,name=participant" json:"participant,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NotificationMessageInfo) Reset() {
	*x = NotificationMessageInfo{}
	mi := &file_WAProto_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationMessageInfo) ProtoMessage() {}

func (x *NotificationMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationMessageInfo.ProtoReflect.Descriptor instead.
func (*NotificationMessageInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{57}
}

func (x *NotificationMessageInfo) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *NotificationMessageInfo) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *NotificationMessageInfo) GetMessageTimestamp() uint64 {
	if x != nil && x.MessageTimestamp != nil {
		return *x.MessageTimestamp
	}
	return 0
}

func (x *NotificationMessageInfo) GetParticipant() string {
	if x != nil && x.Participant != nil {
		return *x.Participant
	}
	return ""
}

type NotificationSettings struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	MessageVibrate           *string                `protobuf:"bytes,1,opt,name=messageVibrate" json:"messageVibrate,omitempty"`
	MessagePopup             *string                `protobuf:"bytes,2,opt,name=messagePopup" json:"messagePopup,omitempty"`
	MessageLight             *string                `protobuf:"bytes,3,opt,name=messageLight" json:"messageLight,omitempty"`
	LowPriorityNotifications *bool                  `protobuf:"varint,4,opt,name=lowPriorityNotifications" json:"lowPriorityNotifications,omitempty"`
	ReactionsMuted           *bool                  `protobuf:"varint,5,opt,name=reactionsMuted" json:"reactionsMuted,omitempty"`
	CallVibrate              *string                `protobuf:"bytes,6,opt,name=callVibrate" json:"callVibrate,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *NotificationSettings) Reset() {
	*x = NotificationSettings{}
	mi := &file_WAProto_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationSettings) ProtoMessage() {}

func (x *NotificationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationSettings.ProtoReflect.Descriptor instead.
func (*NotificationSettings) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{58}
}

func (x *NotificationSettings) GetMessageVibrate() string {
	if x != nil && x.MessageVibrate != nil {
		return *x.MessageVibrate
	}
	return ""
}

func (x *NotificationSettings) GetMessagePopup() string {
	if x != nil && x.MessagePopup != nil {
		return *x.MessagePopup
	}
	return ""
}

func (x *NotificationSettings) GetMessageLight() string {
	if x != nil && x.MessageLight != nil {
		return *x.MessageLight
	}
	return ""
}

func (x *NotificationSettings) GetLowPriorityNotifications() bool {
	if x != nil && x.LowPriorityNotifications != nil {
		return *x.LowPriorityNotifications
	}
	return false
}

func (x *NotificationSettings) GetReactionsMuted() bool {
	if x != nil && x.ReactionsMuted != nil {
		return *x.ReactionsMuted
	}
	return false
}

func (x *NotificationSettings) GetCallVibrate() string {
	if x != nil && x.CallVibrate != nil {
		return *x.CallVibrate
	}
	return ""
}

type PastParticipant struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	UserJid       *string                      `protobuf:"bytes,1,opt,name=userJid" json:"userJid,omitempty"`
	LeaveReason   *PastParticipant_LeaveReason `protobuf:"varint,2,opt,name=leaveReason,enum=proto.PastParticipant_LeaveReason" json:"leaveReason,omitempty"`
	LeaveTs       *uint64                      `protobuf:"varint,3,opt,name=leaveTs" json:"leaveTs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PastParticipant) Reset() {
	*x = PastParticipant{}
	mi := &file_WAProto_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PastParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PastParticipant) ProtoMessage() {}

func (x *PastParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PastParticipant.ProtoReflect.Descriptor instead.
func (*PastParticipant) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{59}
}

func (x *PastParticipant) GetUserJid() string {
	if x != nil && x.UserJid != nil {
		return *x.UserJid
	}
	return ""
}

func (x *PastParticipant) GetLeaveReason() PastParticipant_LeaveReason {
	if x != nil && x.LeaveReason != nil {
		return *x.LeaveReason
	}
	return PastParticipant_LEFT
}

func (x *PastParticipant) GetLeaveTs() uint64 {
	if x != nil && x.LeaveTs != nil {
		return *x.LeaveTs
	}
	return 0
}

type PastParticipants struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	GroupJid         *string                `protobuf:"bytes,1,opt,name=groupJid" json:"groupJid,omitempty"`
	PastParticipants []*PastParticipant     `protobuf:"bytes,2,rep,name=pastParticipants" json:"pastParticipants,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PastParticipants) Reset() {
	*x = PastParticipants{}
	mi := &file_WAProto_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PastParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PastParticipants) ProtoMessage() {}

func (x *PastParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PastParticipants.ProtoReflect.Descriptor instead.
func (*PastParticipants) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{60}
}

func (x *PastParticipants) GetGroupJid() string {
	if x != nil && x.GroupJid != nil {
		return *x.GroupJid
	}
	return ""
}

func (x *PastParticipants) GetPastParticipants() []*PastParticipant {
	if x != nil {
		return x.PastParticipants
	}
	return nil
}

type PatchDebugData struct {
	state                                   protoimpl.MessageState   `protogen:"open.v1"`
	CurrentLthash                           []byte                   `protobuf:"bytes,1,opt,name=currentLthash" json:"currentLthash,omitempty"`
	NewLthash                               []byte                   `protobuf:"bytes,2,opt,name=newLthash" json:"newLthash,omitempty"`
	PatchVersion                            []byte                   `protobuf:"bytes,3,opt,name=patchVersion" json:"patchVersion,omitempty"`
	CollectionName                          []byte                   `protobuf:"bytes,4,opt,name=collectionName" json:"collectionName,omitempty"`
	FirstFourBytesFromAHashOfSnapshotMacKey []byte                   `protobuf:"bytes,5,opt,name=firstFourBytesFromAHashOfSnapshotMacKey" json:"firstFourBytesFromAHashOfSnapshotMacKey,omitempty"`
	NewLthashSubtract                       []byte                   `protobuf:"bytes,6,opt,name=newLthashSubtract" json:"newLthashSubtract,omitempty"`
	NumberAdd                               *int32                   `protobuf:"varint,7,opt,name=numberAdd" json:"numberAdd,omitempty"`
	NumberRemove                            *int32                   `protobuf:"varint,8,opt,name=numberRemove" json:"numberRemove,omitempty"`
	NumberOverride                          *int32                   `protobuf:"varint,9,opt,name=numberOverride" json:"numberOverride,omitempty"`
	SenderPlatform                          *PatchDebugData_Platform `protobuf:"varint,10,opt,name=senderPlatform,enum=proto.PatchDebugData_Platform" json:"senderPlatform,omitempty"`
	IsSenderPrimary                         *bool                    `protobuf:"varint,11,opt,name=isSenderPrimary" json:"isSenderPrimary,omitempty"`
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *PatchDebugData) Reset() {
	*x = PatchDebugData{}
	mi := &file_WAProto_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchDebugData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchDebugData) ProtoMessage() {}

func (x *PatchDebugData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchDebugData.ProtoReflect.Descriptor instead.
func (*PatchDebugData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{61}
}

func (x *PatchDebugData) GetCurrentLthash() []byte {
	if x != nil {
		return x.CurrentLthash
	}
	return nil
}

func (x *PatchDebugData) GetNewLthash() []byte {
	if x != nil {
		return x.NewLthash
	}
	return nil
}

func (x *PatchDebugData) GetPatchVersion() []byte {
	if x != nil {
		return x.PatchVersion
	}
	return nil
}

func (x *PatchDebugData) GetCollectionName() []byte {
	if x != nil {
		return x.CollectionName
	}
	return nil
}

func (x *PatchDebugData) GetFirstFourBytesFromAHashOfSnapshotMacKey() []byte {
	if x != nil {
		return x.FirstFourBytesFromAHashOfSnapshotMacKey
	}
	return nil
}

func (x *PatchDebugData) GetNewLthashSubtract() []byte {
	if x != nil {
		return x.NewLthashSubtract
	}
	return nil
}

func (x *PatchDebugData) GetNumberAdd() int32 {
	if x != nil && x.NumberAdd != nil {
		return *x.NumberAdd
	}
	return 0
}

func (x *PatchDebugData) GetNumberRemove() int32 {
	if x != nil && x.NumberRemove != nil {
		return *x.NumberRemove
	}
	return 0
}

func (x *PatchDebugData) GetNumberOverride() int32 {
	if x != nil && x.NumberOverride != nil {
		return *x.NumberOverride
	}
	return 0
}

func (x *PatchDebugData) GetSenderPlatform() PatchDebugData_Platform {
	if x != nil && x.SenderPlatform != nil {
		return *x.SenderPlatform
	}
	return PatchDebugData_ANDROID
}

func (x *PatchDebugData) GetIsSenderPrimary() bool {
	if x != nil && x.IsSenderPrimary != nil {
		return *x.IsSenderPrimary
	}
	return false
}

type PaymentBackground struct {
	state           protoimpl.MessageState       `protogen:"open.v1"`
	Id              *string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	FileLength      *uint64                      `protobuf:"varint,2,opt,name=fileLength" json:"fileLength,omitempty"`
	Width           *uint32                      `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height          *uint32                      `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	Mimetype        *string                      `protobuf:"bytes,5,opt,name=mimetype" json:"mimetype,omitempty"`
	PlaceholderArgb *uint32                      `protobuf:"fixed32,6,opt,name=placeholderArgb" json:"placeholderArgb,omitempty"`
	TextArgb        *uint32                      `protobuf:"fixed32,7,opt,name=textArgb" json:"textArgb,omitempty"`
	SubtextArgb     *uint32                      `protobuf:"fixed32,8,opt,name=subtextArgb" json:"subtextArgb,omitempty"`
	MediaData       *PaymentBackground_MediaData `protobuf:"bytes,9,opt,name=mediaData" json:"mediaData,omitempty"`
	Type            *PaymentBackground_Type      `protobuf:"varint,10,opt,name=type,enum=proto.PaymentBackground_Type" json:"type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PaymentBackground) Reset() {
	*x = PaymentBackground{}
	mi := &file_WAProto_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentBackground) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentBackground) ProtoMessage() {}

func (x *PaymentBackground) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentBackground.ProtoReflect.Descriptor instead.
func (*PaymentBackground) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{62}
}

func (x *PaymentBackground) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *PaymentBackground) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *PaymentBackground) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *PaymentBackground) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *PaymentBackground) GetMimetype() string {
	if x != nil && x.Mimetype != nil {
		return *x.Mimetype
	}
	return ""
}

func (x *PaymentBackground) GetPlaceholderArgb() uint32 {
	if x != nil && x.PlaceholderArgb != nil {
		return *x.PlaceholderArgb
	}
	return 0
}

func (x *PaymentBackground) GetTextArgb() uint32 {
	if x != nil && x.TextArgb != nil {
		return *x.TextArgb
	}
	return 0
}

func (x *PaymentBackground) GetSubtextArgb() uint32 {
	if x != nil && x.SubtextArgb != nil {
		return *x.SubtextArgb
	}
	return 0
}

func (x *PaymentBackground) GetMediaData() *PaymentBackground_MediaData {
	if x != nil {
		return x.MediaData
	}
	return nil
}

func (x *PaymentBackground) GetType() PaymentBackground_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PaymentBackground_UNKNOWN
}

type PaymentInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	CurrencyDeprecated   *PaymentInfo_Currency  `protobuf:"varint,1,opt,name=currencyDeprecated,enum=proto.PaymentInfo_Currency" json:"currencyDeprecated,omitempty"`
	Amount1000           *uint64                `protobuf:"varint,2,opt,name=amount1000" json:"amount1000,omitempty"`
	ReceiverJid          *string                `protobuf:"bytes,3,opt,name=receiverJid" json:"receiverJid,omitempty"`
	Status               *PaymentInfo_Status    `protobuf:"varint,4,opt,name=status,enum=proto.PaymentInfo_Status" json:"status,omitempty"`
	TransactionTimestamp *uint64                `protobuf:"varint,5,opt,name=transactionTimestamp" json:"transactionTimestamp,omitempty"`
	RequestMessageKey    *MessageKey            `protobuf:"bytes,6,opt,name=requestMessageKey" json:"requestMessageKey,omitempty"`
	ExpiryTimestamp      *uint64                `protobuf:"varint,7,opt,name=expiryTimestamp" json:"expiryTimestamp,omitempty"`
	Futureproofed        *bool                  `protobuf:"varint,8,opt,name=futureproofed" json:"futureproofed,omitempty"`
	Currency             *string                `protobuf:"bytes,9,opt,name=currency" json:"currency,omitempty"`
	TxnStatus            *PaymentInfo_TxnStatus `protobuf:"varint,10,opt,name=txnStatus,enum=proto.PaymentInfo_TxnStatus" json:"txnStatus,omitempty"`
	UseNoviFiatFormat    *bool                  `protobuf:"varint,11,opt,name=useNoviFiatFormat" json:"useNoviFiatFormat,omitempty"`
	PrimaryAmount        *Money                 `protobuf:"bytes,12,opt,name=primaryAmount" json:"primaryAmount,omitempty"`
	ExchangeAmount       *Money                 `protobuf:"bytes,13,opt,name=exchangeAmount" json:"exchangeAmount,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PaymentInfo) Reset() {
	*x = PaymentInfo{}
	mi := &file_WAProto_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentInfo) ProtoMessage() {}

func (x *PaymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentInfo.ProtoReflect.Descriptor instead.
func (*PaymentInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{63}
}

func (x *PaymentInfo) GetCurrencyDeprecated() PaymentInfo_Currency {
	if x != nil && x.CurrencyDeprecated != nil {
		return *x.CurrencyDeprecated
	}
	return PaymentInfo_UNKNOWN_CURRENCY
}

func (x *PaymentInfo) GetAmount1000() uint64 {
	if x != nil && x.Amount1000 != nil {
		return *x.Amount1000
	}
	return 0
}

func (x *PaymentInfo) GetReceiverJid() string {
	if x != nil && x.ReceiverJid != nil {
		return *x.ReceiverJid
	}
	return ""
}

func (x *PaymentInfo) GetStatus() PaymentInfo_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return PaymentInfo_UNKNOWN_STATUS
}

func (x *PaymentInfo) GetTransactionTimestamp() uint64 {
	if x != nil && x.TransactionTimestamp != nil {
		return *x.TransactionTimestamp
	}
	return 0
}

func (x *PaymentInfo) GetRequestMessageKey() *MessageKey {
	if x != nil {
		return x.RequestMessageKey
	}
	return nil
}

func (x *PaymentInfo) GetExpiryTimestamp() uint64 {
	if x != nil && x.ExpiryTimestamp != nil {
		return *x.ExpiryTimestamp
	}
	return 0
}

func (x *PaymentInfo) GetFutureproofed() bool {
	if x != nil && x.Futureproofed != nil {
		return *x.Futureproofed
	}
	return false
}

func (x *PaymentInfo) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *PaymentInfo) GetTxnStatus() PaymentInfo_TxnStatus {
	if x != nil && x.TxnStatus != nil {
		return *x.TxnStatus
	}
	return PaymentInfo_UNKNOWN
}

func (x *PaymentInfo) GetUseNoviFiatFormat() bool {
	if x != nil && x.UseNoviFiatFormat != nil {
		return *x.UseNoviFiatFormat
	}
	return false
}

func (x *PaymentInfo) GetPrimaryAmount() *Money {
	if x != nil {
		return x.PrimaryAmount
	}
	return nil
}

func (x *PaymentInfo) GetExchangeAmount() *Money {
	if x != nil {
		return x.ExchangeAmount
	}
	return nil
}

type PhoneNumberToLIDMapping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PnJid         *string                `protobuf:"bytes,1,opt,name=pnJid" json:"pnJid,omitempty"`
	LidJid        *string                `protobuf:"bytes,2,opt,name=lidJid" json:"lidJid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PhoneNumberToLIDMapping) Reset() {
	*x = PhoneNumberToLIDMapping{}
	mi := &file_WAProto_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhoneNumberToLIDMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneNumberToLIDMapping) ProtoMessage() {}

func (x *PhoneNumberToLIDMapping) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneNumberToLIDMapping.ProtoReflect.Descriptor instead.
func (*PhoneNumberToLIDMapping) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{64}
}

func (x *PhoneNumberToLIDMapping) GetPnJid() string {
	if x != nil && x.PnJid != nil {
		return *x.PnJid
	}
	return ""
}

func (x *PhoneNumberToLIDMapping) GetLidJid() string {
	if x != nil && x.LidJid != nil {
		return *x.LidJid
	}
	return ""
}

type PhotoChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OldPhoto      []byte                 `protobuf:"bytes,1,opt,name=oldPhoto" json:"oldPhoto,omitempty"`
	NewPhoto      []byte                 `protobuf:"bytes,2,opt,name=newPhoto" json:"newPhoto,omitempty"`
	NewPhotoId    *uint32                `protobuf:"varint,3,opt,name=newPhotoId" json:"newPhotoId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PhotoChange) Reset() {
	*x = PhotoChange{}
	mi := &file_WAProto_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhotoChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoChange) ProtoMessage() {}

func (x *PhotoChange) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoChange.ProtoReflect.Descriptor instead.
func (*PhotoChange) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{65}
}

func (x *PhotoChange) GetOldPhoto() []byte {
	if x != nil {
		return x.OldPhoto
	}
	return nil
}

func (x *PhotoChange) GetNewPhoto() []byte {
	if x != nil {
		return x.NewPhoto
	}
	return nil
}

func (x *PhotoChange) GetNewPhotoId() uint32 {
	if x != nil && x.NewPhotoId != nil {
		return *x.NewPhotoId
	}
	return 0
}

type PinInChat struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	Type                    *PinInChat_Type          `protobuf:"varint,1,opt,name=type,enum=proto.PinInChat_Type" json:"type,omitempty"`
	Key                     *MessageKey              `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	SenderTimestampMs       *int64                   `protobuf:"varint,3,opt,name=senderTimestampMs" json:"senderTimestampMs,omitempty"`
	ServerTimestampMs       *int64                   `protobuf:"varint,4,opt,name=serverTimestampMs" json:"serverTimestampMs,omitempty"`
	MessageAddOnContextInfo *MessageAddOnContextInfo `protobuf:"bytes,5,opt,name=messageAddOnContextInfo" json:"messageAddOnContextInfo,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PinInChat) Reset() {
	*x = PinInChat{}
	mi := &file_WAProto_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinInChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinInChat) ProtoMessage() {}

func (x *PinInChat) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinInChat.ProtoReflect.Descriptor instead.
func (*PinInChat) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{66}
}

func (x *PinInChat) GetType() PinInChat_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PinInChat_UNKNOWN_TYPE
}

func (x *PinInChat) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PinInChat) GetSenderTimestampMs() int64 {
	if x != nil && x.SenderTimestampMs != nil {
		return *x.SenderTimestampMs
	}
	return 0
}

func (x *PinInChat) GetServerTimestampMs() int64 {
	if x != nil && x.ServerTimestampMs != nil {
		return *x.ServerTimestampMs
	}
	return 0
}

func (x *PinInChat) GetMessageAddOnContextInfo() *MessageAddOnContextInfo {
	if x != nil {
		return x.MessageAddOnContextInfo
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XDeprecated   *int32                 `protobuf:"varint,1,opt,name=xDeprecated" json:"xDeprecated,omitempty"`
	YDeprecated   *int32                 `protobuf:"varint,2,opt,name=yDeprecated" json:"yDeprecated,omitempty"`
	X             *float64               `protobuf:"fixed64,3,opt,name=x" json:"x,omitempty"`
	Y             *float64               `protobuf:"fixed64,4,opt,name=y" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Point) Reset() {
	*x = Point{}
	mi := &file_WAProto_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{67}
}

func (x *Point) GetXDeprecated() int32 {
	if x != nil && x.XDeprecated != nil {
		return *x.XDeprecated
	}
	return 0
}

func (x *Point) GetYDeprecated() int32 {
	if x != nil && x.YDeprecated != nil {
		return *x.YDeprecated
	}
	return 0
}

func (x *Point) GetX() float64 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Point) GetY() float64 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type PollAdditionalMetadata struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PollInvalidated *bool                  `protobuf:"varint,1,opt,name=pollInvalidated" json:"pollInvalidated,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PollAdditionalMetadata) Reset() {
	*x = PollAdditionalMetadata{}
	mi := &file_WAProto_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollAdditionalMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollAdditionalMetadata) ProtoMessage() {}

func (x *PollAdditionalMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollAdditionalMetadata.ProtoReflect.Descriptor instead.
func (*PollAdditionalMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{68}
}

func (x *PollAdditionalMetadata) GetPollInvalidated() bool {
	if x != nil && x.PollInvalidated != nil {
		return *x.PollInvalidated
	}
	return false
}

type PollEncValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncPayload    []byte                 `protobuf:"bytes,1,opt,name=encPayload" json:"encPayload,omitempty"`
	EncIv         []byte                 `protobuf:"bytes,2,opt,name=encIv" json:"encIv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollEncValue) Reset() {
	*x = PollEncValue{}
	mi := &file_WAProto_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollEncValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollEncValue) ProtoMessage() {}

func (x *PollEncValue) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollEncValue.ProtoReflect.Descriptor instead.
func (*PollEncValue) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{69}
}

func (x *PollEncValue) GetEncPayload() []byte {
	if x != nil {
		return x.EncPayload
	}
	return nil
}

func (x *PollEncValue) GetEncIv() []byte {
	if x != nil {
		return x.EncIv
	}
	return nil
}

type PollUpdate struct {
	state                protoimpl.MessageState   `protogen:"open.v1"`
	PollUpdateMessageKey *MessageKey              `protobuf:"bytes,1,opt,name=pollUpdateMessageKey" json:"pollUpdateMessageKey,omitempty"`
	Vote                 *Message_PollVoteMessage `protobuf:"bytes,2,opt,name=vote" json:"vote,omitempty"`
	SenderTimestampMs    *int64                   `protobuf:"varint,3,opt,name=senderTimestampMs" json:"senderTimestampMs,omitempty"`
	ServerTimestampMs    *int64                   `protobuf:"varint,4,opt,name=serverTimestampMs" json:"serverTimestampMs,omitempty"`
	Unread               *bool                    `protobuf:"varint,5,opt,name=unread" json:"unread,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PollUpdate) Reset() {
	*x = PollUpdate{}
	mi := &file_WAProto_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollUpdate) ProtoMessage() {}

func (x *PollUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollUpdate.ProtoReflect.Descriptor instead.
func (*PollUpdate) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{70}
}

func (x *PollUpdate) GetPollUpdateMessageKey() *MessageKey {
	if x != nil {
		return x.PollUpdateMessageKey
	}
	return nil
}

func (x *PollUpdate) GetVote() *Message_PollVoteMessage {
	if x != nil {
		return x.Vote
	}
	return nil
}

func (x *PollUpdate) GetSenderTimestampMs() int64 {
	if x != nil && x.SenderTimestampMs != nil {
		return *x.SenderTimestampMs
	}
	return 0
}

func (x *PollUpdate) GetServerTimestampMs() int64 {
	if x != nil && x.ServerTimestampMs != nil {
		return *x.ServerTimestampMs
	}
	return 0
}

func (x *PollUpdate) GetUnread() bool {
	if x != nil && x.Unread != nil {
		return *x.Unread
	}
	return false
}

type PreKeyRecordStructure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PublicKey     []byte                 `protobuf:"bytes,2,opt,name=publicKey" json:"publicKey,omitempty"`
	PrivateKey    []byte                 `protobuf:"bytes,3,opt,name=privateKey" json:"privateKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreKeyRecordStructure) Reset() {
	*x = PreKeyRecordStructure{}
	mi := &file_WAProto_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreKeyRecordStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreKeyRecordStructure) ProtoMessage() {}

func (x *PreKeyRecordStructure) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreKeyRecordStructure.ProtoReflect.Descriptor instead.
func (*PreKeyRecordStructure) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{71}
}

func (x *PreKeyRecordStructure) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PreKeyRecordStructure) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PreKeyRecordStructure) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type PreKeySignalMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RegistrationId *uint32                `protobuf:"varint,5,opt,name=registrationId" json:"registrationId,omitempty"`
	PreKeyId       *uint32                `protobuf:"varint,1,opt,name=preKeyId" json:"preKeyId,omitempty"`
	SignedPreKeyId *uint32                `protobuf:"varint,6,opt,name=signedPreKeyId" json:"signedPreKeyId,omitempty"`
	BaseKey        []byte                 `protobuf:"bytes,2,opt,name=baseKey" json:"baseKey,omitempty"`
	IdentityKey    []byte                 `protobuf:"bytes,3,opt,name=identityKey" json:"identityKey,omitempty"`
	Message        []byte                 `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PreKeySignalMessage) Reset() {
	*x = PreKeySignalMessage{}
	mi := &file_WAProto_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreKeySignalMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreKeySignalMessage) ProtoMessage() {}

func (x *PreKeySignalMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreKeySignalMessage.ProtoReflect.Descriptor instead.
func (*PreKeySignalMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{72}
}

func (x *PreKeySignalMessage) GetRegistrationId() uint32 {
	if x != nil && x.RegistrationId != nil {
		return *x.RegistrationId
	}
	return 0
}

func (x *PreKeySignalMessage) GetPreKeyId() uint32 {
	if x != nil && x.PreKeyId != nil {
		return *x.PreKeyId
	}
	return 0
}

func (x *PreKeySignalMessage) GetSignedPreKeyId() uint32 {
	if x != nil && x.SignedPreKeyId != nil {
		return *x.SignedPreKeyId
	}
	return 0
}

func (x *PreKeySignalMessage) GetBaseKey() []byte {
	if x != nil {
		return x.BaseKey
	}
	return nil
}

func (x *PreKeySignalMessage) GetIdentityKey() []byte {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *PreKeySignalMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type PremiumMessageInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServerCampaignId *string                `protobuf:"bytes,1,opt,name=serverCampaignId" json:"serverCampaignId,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PremiumMessageInfo) Reset() {
	*x = PremiumMessageInfo{}
	mi := &file_WAProto_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PremiumMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PremiumMessageInfo) ProtoMessage() {}

func (x *PremiumMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PremiumMessageInfo.ProtoReflect.Descriptor instead.
func (*PremiumMessageInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{73}
}

func (x *PremiumMessageInfo) GetServerCampaignId() string {
	if x != nil && x.ServerCampaignId != nil {
		return *x.ServerCampaignId
	}
	return ""
}

type Pushname struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Pushname      *string                `protobuf:"bytes,2,opt,name=pushname" json:"pushname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pushname) Reset() {
	*x = Pushname{}
	mi := &file_WAProto_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pushname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pushname) ProtoMessage() {}

func (x *Pushname) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pushname.ProtoReflect.Descriptor instead.
func (*Pushname) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{74}
}

func (x *Pushname) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Pushname) GetPushname() string {
	if x != nil && x.Pushname != nil {
		return *x.Pushname
	}
	return ""
}

type QP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QP) Reset() {
	*x = QP{}
	mi := &file_WAProto_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QP) ProtoMessage() {}

func (x *QP) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QP.ProtoReflect.Descriptor instead.
func (*QP) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{75}
}

type Reaction struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Key               *MessageKey            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Text              *string                `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	GroupingKey       *string                `protobuf:"bytes,3,opt,name=groupingKey" json:"groupingKey,omitempty"`
	SenderTimestampMs *int64                 `protobuf:"varint,4,opt,name=senderTimestampMs" json:"senderTimestampMs,omitempty"`
	Unread            *bool                  `protobuf:"varint,5,opt,name=unread" json:"unread,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Reaction) Reset() {
	*x = Reaction{}
	mi := &file_WAProto_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reaction) ProtoMessage() {}

func (x *Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reaction.ProtoReflect.Descriptor instead.
func (*Reaction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{76}
}

func (x *Reaction) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Reaction) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Reaction) GetGroupingKey() string {
	if x != nil && x.GroupingKey != nil {
		return *x.GroupingKey
	}
	return ""
}

func (x *Reaction) GetSenderTimestampMs() int64 {
	if x != nil && x.SenderTimestampMs != nil {
		return *x.SenderTimestampMs
	}
	return 0
}

func (x *Reaction) GetUnread() bool {
	if x != nil && x.Unread != nil {
		return *x.Unread
	}
	return false
}

type RecentEmojiWeight struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Emoji         *string                `protobuf:"bytes,1,opt,name=emoji" json:"emoji,omitempty"`
	Weight        *float32               `protobuf:"fixed32,2,opt,name=weight" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecentEmojiWeight) Reset() {
	*x = RecentEmojiWeight{}
	mi := &file_WAProto_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecentEmojiWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentEmojiWeight) ProtoMessage() {}

func (x *RecentEmojiWeight) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentEmojiWeight.ProtoReflect.Descriptor instead.
func (*RecentEmojiWeight) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{77}
}

func (x *RecentEmojiWeight) GetEmoji() string {
	if x != nil && x.Emoji != nil {
		return *x.Emoji
	}
	return ""
}

func (x *RecentEmojiWeight) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type RecordStructure struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CurrentSession   *SessionStructure      `protobuf:"bytes,1,opt,name=currentSession" json:"currentSession,omitempty"`
	PreviousSessions []*SessionStructure    `protobuf:"bytes,2,rep,name=previousSessions" json:"previousSessions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RecordStructure) Reset() {
	*x = RecordStructure{}
	mi := &file_WAProto_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordStructure) ProtoMessage() {}

func (x *RecordStructure) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordStructure.ProtoReflect.Descriptor instead.
func (*RecordStructure) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{78}
}

func (x *RecordStructure) GetCurrentSession() *SessionStructure {
	if x != nil {
		return x.CurrentSession
	}
	return nil
}

func (x *RecordStructure) GetPreviousSessions() []*SessionStructure {
	if x != nil {
		return x.PreviousSessions
	}
	return nil
}

type ReportingTokenInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportingTag  []byte                 `protobuf:"bytes,1,opt,name=reportingTag" json:"reportingTag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportingTokenInfo) Reset() {
	*x = ReportingTokenInfo{}
	mi := &file_WAProto_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportingTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingTokenInfo) ProtoMessage() {}

func (x *ReportingTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingTokenInfo.ProtoReflect.Descriptor instead.
func (*ReportingTokenInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{79}
}

func (x *ReportingTokenInfo) GetReportingTag() []byte {
	if x != nil {
		return x.ReportingTag
	}
	return nil
}

type SenderKeyDistributionMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Iteration     *uint32                `protobuf:"varint,2,opt,name=iteration" json:"iteration,omitempty"`
	ChainKey      []byte                 `protobuf:"bytes,3,opt,name=chainKey" json:"chainKey,omitempty"`
	SigningKey    []byte                 `protobuf:"bytes,4,opt,name=signingKey" json:"signingKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SenderKeyDistributionMessage) Reset() {
	*x = SenderKeyDistributionMessage{}
	mi := &file_WAProto_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SenderKeyDistributionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderKeyDistributionMessage) ProtoMessage() {}

func (x *SenderKeyDistributionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderKeyDistributionMessage.ProtoReflect.Descriptor instead.
func (*SenderKeyDistributionMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{80}
}

func (x *SenderKeyDistributionMessage) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SenderKeyDistributionMessage) GetIteration() uint32 {
	if x != nil && x.Iteration != nil {
		return *x.Iteration
	}
	return 0
}

func (x *SenderKeyDistributionMessage) GetChainKey() []byte {
	if x != nil {
		return x.ChainKey
	}
	return nil
}

func (x *SenderKeyDistributionMessage) GetSigningKey() []byte {
	if x != nil {
		return x.SigningKey
	}
	return nil
}

type SenderKeyMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Iteration     *uint32                `protobuf:"varint,2,opt,name=iteration" json:"iteration,omitempty"`
	Ciphertext    []byte                 `protobuf:"bytes,3,opt,name=ciphertext" json:"ciphertext,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SenderKeyMessage) Reset() {
	*x = SenderKeyMessage{}
	mi := &file_WAProto_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SenderKeyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderKeyMessage) ProtoMessage() {}

func (x *SenderKeyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderKeyMessage.ProtoReflect.Descriptor instead.
func (*SenderKeyMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{81}
}

func (x *SenderKeyMessage) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SenderKeyMessage) GetIteration() uint32 {
	if x != nil && x.Iteration != nil {
		return *x.Iteration
	}
	return 0
}

func (x *SenderKeyMessage) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SenderKeyRecordStructure struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	SenderKeyStates []*SenderKeyStateStructure `protobuf:"bytes,1,rep,name=senderKeyStates" json:"senderKeyStates,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SenderKeyRecordStructure) Reset() {
	*x = SenderKeyRecordStructure{}
	mi := &file_WAProto_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SenderKeyRecordStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderKeyRecordStructure) ProtoMessage() {}

func (x *SenderKeyRecordStructure) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderKeyRecordStructure.ProtoReflect.Descriptor instead.
func (*SenderKeyRecordStructure) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{82}
}

func (x *SenderKeyRecordStructure) GetSenderKeyStates() []*SenderKeyStateStructure {
	if x != nil {
		return x.SenderKeyStates
	}
	return nil
}

type SenderKeyStateStructure struct {
	state             protoimpl.MessageState                      `protogen:"open.v1"`
	SenderKeyId       *uint32                                     `protobuf:"varint,1,opt,name=senderKeyId" json:"senderKeyId,omitempty"`
	SenderChainKey    *SenderKeyStateStructure_SenderChainKey     `protobuf:"bytes,2,opt,name=senderChainKey" json:"senderChainKey,omitempty"`
	SenderSigningKey  *SenderKeyStateStructure_SenderSigningKey   `protobuf:"bytes,3,opt,name=senderSigningKey" json:"senderSigningKey,omitempty"`
	SenderMessageKeys []*SenderKeyStateStructure_SenderMessageKey `protobuf:"bytes,4,rep,name=senderMessageKeys" json:"senderMessageKeys,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SenderKeyStateStructure) Reset() {
	*x = SenderKeyStateStructure{}
	mi := &file_WAProto_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SenderKeyStateStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderKeyStateStructure) ProtoMessage() {}

func (x *SenderKeyStateStructure) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderKeyStateStructure.ProtoReflect.Descriptor instead.
func (*SenderKeyStateStructure) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{83}
}

func (x *SenderKeyStateStructure) GetSenderKeyId() uint32 {
	if x != nil && x.SenderKeyId != nil {
		return *x.SenderKeyId
	}
	return 0
}

func (x *SenderKeyStateStructure) GetSenderChainKey() *SenderKeyStateStructure_SenderChainKey {
	if x != nil {
		return x.SenderChainKey
	}
	return nil
}

func (x *SenderKeyStateStructure) GetSenderSigningKey() *SenderKeyStateStructure_SenderSigningKey {
	if x != nil {
		return x.SenderSigningKey
	}
	return nil
}

func (x *SenderKeyStateStructure) GetSenderMessageKeys() []*SenderKeyStateStructure_SenderMessageKey {
	if x != nil {
		return x.SenderMessageKeys
	}
	return nil
}

type ServerErrorReceipt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StanzaId      *string                `protobuf:"bytes,1,opt,name=stanzaId" json:"stanzaId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerErrorReceipt) Reset() {
	*x = ServerErrorReceipt{}
	mi := &file_WAProto_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerErrorReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerErrorReceipt) ProtoMessage() {}

func (x *ServerErrorReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerErrorReceipt.ProtoReflect.Descriptor instead.
func (*ServerErrorReceipt) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{84}
}

func (x *ServerErrorReceipt) GetStanzaId() string {
	if x != nil && x.StanzaId != nil {
		return *x.StanzaId
	}
	return ""
}

type SessionStructure struct {
	state                protoimpl.MessageState               `protogen:"open.v1"`
	SessionVersion       *uint32                              `protobuf:"varint,1,opt,name=sessionVersion" json:"sessionVersion,omitempty"`
	LocalIdentityPublic  []byte                               `protobuf:"bytes,2,opt,name=localIdentityPublic" json:"localIdentityPublic,omitempty"`
	RemoteIdentityPublic []byte                               `protobuf:"bytes,3,opt,name=remoteIdentityPublic" json:"remoteIdentityPublic,omitempty"`
	RootKey              []byte                               `protobuf:"bytes,4,opt,name=rootKey" json:"rootKey,omitempty"`
	PreviousCounter      *uint32                              `protobuf:"varint,5,opt,name=previousCounter" json:"previousCounter,omitempty"`
	SenderChain          *SessionStructure_Chain              `protobuf:"bytes,6,opt,name=senderChain" json:"senderChain,omitempty"`
	ReceiverChains       []*SessionStructure_Chain            `protobuf:"bytes,7,rep,name=receiverChains" json:"receiverChains,omitempty"`
	PendingKeyExchange   *SessionStructure_PendingKeyExchange `protobuf:"bytes,8,opt,name=pendingKeyExchange" json:"pendingKeyExchange,omitempty"`
	PendingPreKey        *SessionStructure_PendingPreKey      `protobuf:"bytes,9,opt,name=pendingPreKey" json:"pendingPreKey,omitempty"`
	RemoteRegistrationId *uint32                              `protobuf:"varint,10,opt,name=remoteRegistrationId" json:"remoteRegistrationId,omitempty"`
	LocalRegistrationId  *uint32                              `protobuf:"varint,11,opt,name=localRegistrationId" json:"localRegistrationId,omitempty"`
	NeedsRefresh         *bool                                `protobuf:"varint,12,opt,name=needsRefresh" json:"needsRefresh,omitempty"`
	AliceBaseKey         []byte                               `protobuf:"bytes,13,opt,name=aliceBaseKey" json:"aliceBaseKey,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SessionStructure) Reset() {
	*x = SessionStructure{}
	mi := &file_WAProto_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStructure) ProtoMessage() {}

func (x *SessionStructure) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStructure.ProtoReflect.Descriptor instead.
func (*SessionStructure) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{85}
}

func (x *SessionStructure) GetSessionVersion() uint32 {
	if x != nil && x.SessionVersion != nil {
		return *x.SessionVersion
	}
	return 0
}

func (x *SessionStructure) GetLocalIdentityPublic() []byte {
	if x != nil {
		return x.LocalIdentityPublic
	}
	return nil
}

func (x *SessionStructure) GetRemoteIdentityPublic() []byte {
	if x != nil {
		return x.RemoteIdentityPublic
	}
	return nil
}

func (x *SessionStructure) GetRootKey() []byte {
	if x != nil {
		return x.RootKey
	}
	return nil
}

func (x *SessionStructure) GetPreviousCounter() uint32 {
	if x != nil && x.PreviousCounter != nil {
		return *x.PreviousCounter
	}
	return 0
}

func (x *SessionStructure) GetSenderChain() *SessionStructure_Chain {
	if x != nil {
		return x.SenderChain
	}
	return nil
}

func (x *SessionStructure) GetReceiverChains() []*SessionStructure_Chain {
	if x != nil {
		return x.ReceiverChains
	}
	return nil
}

func (x *SessionStructure) GetPendingKeyExchange() *SessionStructure_PendingKeyExchange {
	if x != nil {
		return x.PendingKeyExchange
	}
	return nil
}

func (x *SessionStructure) GetPendingPreKey() *SessionStructure_PendingPreKey {
	if x != nil {
		return x.PendingPreKey
	}
	return nil
}

func (x *SessionStructure) GetRemoteRegistrationId() uint32 {
	if x != nil && x.RemoteRegistrationId != nil {
		return *x.RemoteRegistrationId
	}
	return 0
}

func (x *SessionStructure) GetLocalRegistrationId() uint32 {
	if x != nil && x.LocalRegistrationId != nil {
		return *x.LocalRegistrationId
	}
	return 0
}

func (x *SessionStructure) GetNeedsRefresh() bool {
	if x != nil && x.NeedsRefresh != nil {
		return *x.NeedsRefresh
	}
	return false
}

func (x *SessionStructure) GetAliceBaseKey() []byte {
	if x != nil {
		return x.AliceBaseKey
	}
	return nil
}

type SignalMessage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RatchetKey      []byte                 `protobuf:"bytes,1,opt,name=ratchetKey" json:"ratchetKey,omitempty"`
	Counter         *uint32                `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
	PreviousCounter *uint32                `protobuf:"varint,3,opt,name=previousCounter" json:"previousCounter,omitempty"`
	Ciphertext      []byte                 `protobuf:"bytes,4,opt,name=ciphertext" json:"ciphertext,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SignalMessage) Reset() {
	*x = SignalMessage{}
	mi := &file_WAProto_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalMessage) ProtoMessage() {}

func (x *SignalMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalMessage.ProtoReflect.Descriptor instead.
func (*SignalMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{86}
}

func (x *SignalMessage) GetRatchetKey() []byte {
	if x != nil {
		return x.RatchetKey
	}
	return nil
}

func (x *SignalMessage) GetCounter() uint32 {
	if x != nil && x.Counter != nil {
		return *x.Counter
	}
	return 0
}

func (x *SignalMessage) GetPreviousCounter() uint32 {
	if x != nil && x.PreviousCounter != nil {
		return *x.PreviousCounter
	}
	return 0
}

func (x *SignalMessage) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SignedPreKeyRecordStructure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PublicKey     []byte                 `protobuf:"bytes,2,opt,name=publicKey" json:"publicKey,omitempty"`
	PrivateKey    []byte                 `protobuf:"bytes,3,opt,name=privateKey" json:"privateKey,omitempty"`
	Signature     []byte                 `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	Timestamp     *uint64                `protobuf:"fixed64,5,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedPreKeyRecordStructure) Reset() {
	*x = SignedPreKeyRecordStructure{}
	mi := &file_WAProto_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedPreKeyRecordStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedPreKeyRecordStructure) ProtoMessage() {}

func (x *SignedPreKeyRecordStructure) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedPreKeyRecordStructure.ProtoReflect.Descriptor instead.
func (*SignedPreKeyRecordStructure) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{87}
}

func (x *SignedPreKeyRecordStructure) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SignedPreKeyRecordStructure) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SignedPreKeyRecordStructure) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SignedPreKeyRecordStructure) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedPreKeyRecordStructure) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type StatusPSA struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	CampaignId                  *uint64                `protobuf:"varint,44,req,name=campaignId" json:"campaignId,omitempty"`
	CampaignExpirationTimestamp *uint64                `protobuf:"varint,45,opt,name=campaignExpirationTimestamp" json:"campaignExpirationTimestamp,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *StatusPSA) Reset() {
	*x = StatusPSA{}
	mi := &file_WAProto_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusPSA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusPSA) ProtoMessage() {}

func (x *StatusPSA) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusPSA.ProtoReflect.Descriptor instead.
func (*StatusPSA) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{88}
}

func (x *StatusPSA) GetCampaignId() uint64 {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return 0
}

func (x *StatusPSA) GetCampaignExpirationTimestamp() uint64 {
	if x != nil && x.CampaignExpirationTimestamp != nil {
		return *x.CampaignExpirationTimestamp
	}
	return 0
}

type StickerMetadata struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Url               *string                `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	FileSha256        []byte                 `protobuf:"bytes,2,opt,name=fileSha256" json:"fileSha256,omitempty"`
	FileEncSha256     []byte                 `protobuf:"bytes,3,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	MediaKey          []byte                 `protobuf:"bytes,4,opt,name=mediaKey" json:"mediaKey,omitempty"`
	Mimetype          *string                `protobuf:"bytes,5,opt,name=mimetype" json:"mimetype,omitempty"`
	Height            *uint32                `protobuf:"varint,6,opt,name=height" json:"height,omitempty"`
	Width             *uint32                `protobuf:"varint,7,opt,name=width" json:"width,omitempty"`
	DirectPath        *string                `protobuf:"bytes,8,opt,name=directPath" json:"directPath,omitempty"`
	FileLength        *uint64                `protobuf:"varint,9,opt,name=fileLength" json:"fileLength,omitempty"`
	Weight            *float32               `protobuf:"fixed32,10,opt,name=weight" json:"weight,omitempty"`
	LastStickerSentTs *int64                 `protobuf:"varint,11,opt,name=lastStickerSentTs" json:"lastStickerSentTs,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StickerMetadata) Reset() {
	*x = StickerMetadata{}
	mi := &file_WAProto_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StickerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerMetadata) ProtoMessage() {}

func (x *StickerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerMetadata.ProtoReflect.Descriptor instead.
func (*StickerMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{89}
}

func (x *StickerMetadata) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *StickerMetadata) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *StickerMetadata) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *StickerMetadata) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *StickerMetadata) GetMimetype() string {
	if x != nil && x.Mimetype != nil {
		return *x.Mimetype
	}
	return ""
}

func (x *StickerMetadata) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *StickerMetadata) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *StickerMetadata) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *StickerMetadata) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *StickerMetadata) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *StickerMetadata) GetLastStickerSentTs() int64 {
	if x != nil && x.LastStickerSentTs != nil {
		return *x.LastStickerSentTs
	}
	return 0
}

type SyncActionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         []byte                 `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Value         *SyncActionValue       `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Padding       []byte                 `protobuf:"bytes,3,opt,name=padding" json:"padding,omitempty"`
	Version       *int32                 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionData) Reset() {
	*x = SyncActionData{}
	mi := &file_WAProto_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionData) ProtoMessage() {}

func (x *SyncActionData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionData.ProtoReflect.Descriptor instead.
func (*SyncActionData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{90}
}

func (x *SyncActionData) GetIndex() []byte {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *SyncActionData) GetValue() *SyncActionValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SyncActionData) GetPadding() []byte {
	if x != nil {
		return x.Padding
	}
	return nil
}

func (x *SyncActionData) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type SyncActionValue struct {
	state                           protoimpl.MessageState                            `protogen:"open.v1"`
	Timestamp                       *int64                                            `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	StarAction                      *SyncActionValue_StarAction                       `protobuf:"bytes,2,opt,name=starAction" json:"starAction,omitempty"`
	ContactAction                   *SyncActionValue_ContactAction                    `protobuf:"bytes,3,opt,name=contactAction" json:"contactAction,omitempty"`
	MuteAction                      *SyncActionValue_MuteAction                       `protobuf:"bytes,4,opt,name=muteAction" json:"muteAction,omitempty"`
	PinAction                       *SyncActionValue_PinAction                        `protobuf:"bytes,5,opt,name=pinAction" json:"pinAction,omitempty"`
	SecurityNotificationSetting     *SyncActionValue_SecurityNotificationSetting      `protobuf:"bytes,6,opt,name=securityNotificationSetting" json:"securityNotificationSetting,omitempty"`
	PushNameSetting                 *SyncActionValue_PushNameSetting                  `protobuf:"bytes,7,opt,name=pushNameSetting" json:"pushNameSetting,omitempty"`
	QuickReplyAction                *SyncActionValue_QuickReplyAction                 `protobuf:"bytes,8,opt,name=quickReplyAction" json:"quickReplyAction,omitempty"`
	RecentEmojiWeightsAction        *SyncActionValue_RecentEmojiWeightsAction         `protobuf:"bytes,11,opt,name=recentEmojiWeightsAction" json:"recentEmojiWeightsAction,omitempty"`
	LabelEditAction                 *SyncActionValue_LabelEditAction                  `protobuf:"bytes,14,opt,name=labelEditAction" json:"labelEditAction,omitempty"`
	LabelAssociationAction          *SyncActionValue_LabelAssociationAction           `protobuf:"bytes,15,opt,name=labelAssociationAction" json:"labelAssociationAction,omitempty"`
	LocaleSetting                   *SyncActionValue_LocaleSetting                    `protobuf:"bytes,16,opt,name=localeSetting" json:"localeSetting,omitempty"`
	ArchiveChatAction               *SyncActionValue_ArchiveChatAction                `protobuf:"bytes,17,opt,name=archiveChatAction" json:"archiveChatAction,omitempty"`
	DeleteMessageForMeAction        *SyncActionValue_DeleteMessageForMeAction         `protobuf:"bytes,18,opt,name=deleteMessageForMeAction" json:"deleteMessageForMeAction,omitempty"`
	KeyExpiration                   *SyncActionValue_KeyExpiration                    `protobuf:"bytes,19,opt,name=keyExpiration" json:"keyExpiration,omitempty"`
	MarkChatAsReadAction            *SyncActionValue_MarkChatAsReadAction             `protobuf:"bytes,20,opt,name=markChatAsReadAction" json:"markChatAsReadAction,omitempty"`
	ClearChatAction                 *SyncActionValue_ClearChatAction                  `protobuf:"bytes,21,opt,name=clearChatAction" json:"clearChatAction,omitempty"`
	DeleteChatAction                *SyncActionValue_DeleteChatAction                 `protobuf:"bytes,22,opt,name=deleteChatAction" json:"deleteChatAction,omitempty"`
	UnarchiveChatsSetting           *SyncActionValue_UnarchiveChatsSetting            `protobuf:"bytes,23,opt,name=unarchiveChatsSetting" json:"unarchiveChatsSetting,omitempty"`
	PrimaryFeature                  *SyncActionValue_PrimaryFeature                   `protobuf:"bytes,24,opt,name=primaryFeature" json:"primaryFeature,omitempty"`
	AndroidUnsupportedActions       *SyncActionValue_AndroidUnsupportedActions        `protobuf:"bytes,26,opt,name=androidUnsupportedActions" json:"androidUnsupportedActions,omitempty"`
	AgentAction                     *SyncActionValue_AgentAction                      `protobuf:"bytes,27,opt,name=agentAction" json:"agentAction,omitempty"`
	SubscriptionAction              *SyncActionValue_SubscriptionAction               `protobuf:"bytes,28,opt,name=subscriptionAction" json:"subscriptionAction,omitempty"`
	UserStatusMuteAction            *SyncActionValue_UserStatusMuteAction             `protobuf:"bytes,29,opt,name=userStatusMuteAction" json:"userStatusMuteAction,omitempty"`
	TimeFormatAction                *SyncActionValue_TimeFormatAction                 `protobuf:"bytes,30,opt,name=timeFormatAction" json:"timeFormatAction,omitempty"`
	NuxAction                       *SyncActionValue_NuxAction                        `protobuf:"bytes,31,opt,name=nuxAction" json:"nuxAction,omitempty"`
	PrimaryVersionAction            *SyncActionValue_PrimaryVersionAction             `protobuf:"bytes,32,opt,name=primaryVersionAction" json:"primaryVersionAction,omitempty"`
	StickerAction                   *SyncActionValue_StickerAction                    `protobuf:"bytes,33,opt,name=stickerAction" json:"stickerAction,omitempty"`
	RemoveRecentStickerAction       *SyncActionValue_RemoveRecentStickerAction        `protobuf:"bytes,34,opt,name=removeRecentStickerAction" json:"removeRecentStickerAction,omitempty"`
	ChatAssignment                  *SyncActionValue_ChatAssignmentAction             `protobuf:"bytes,35,opt,name=chatAssignment" json:"chatAssignment,omitempty"`
	ChatAssignmentOpenedStatus      *SyncActionValue_ChatAssignmentOpenedStatusAction `protobuf:"bytes,36,opt,name=chatAssignmentOpenedStatus" json:"chatAssignmentOpenedStatus,omitempty"`
	PnForLidChatAction              *SyncActionValue_PnForLidChatAction               `protobuf:"bytes,37,opt,name=pnForLidChatAction" json:"pnForLidChatAction,omitempty"`
	MarketingMessageAction          *SyncActionValue_MarketingMessageAction           `protobuf:"bytes,38,opt,name=marketingMessageAction" json:"marketingMessageAction,omitempty"`
	MarketingMessageBroadcastAction *SyncActionValue_MarketingMessageBroadcastAction  `protobuf:"bytes,39,opt,name=marketingMessageBroadcastAction" json:"marketingMessageBroadcastAction,omitempty"`
	ExternalWebBetaAction           *SyncActionValue_ExternalWebBetaAction            `protobuf:"bytes,40,opt,name=externalWebBetaAction" json:"externalWebBetaAction,omitempty"`
	PrivacySettingRelayAllCalls     *SyncActionValue_PrivacySettingRelayAllCalls      `protobuf:"bytes,41,opt,name=privacySettingRelayAllCalls" json:"privacySettingRelayAllCalls,omitempty"`
	CallLogAction                   *SyncActionValue_CallLogAction                    `protobuf:"bytes,42,opt,name=callLogAction" json:"callLogAction,omitempty"`
	StatusPrivacy                   *SyncActionValue_StatusPrivacyAction              `protobuf:"bytes,44,opt,name=statusPrivacy" json:"statusPrivacy,omitempty"`
	BotWelcomeRequestAction         *SyncActionValue_BotWelcomeRequestAction          `protobuf:"bytes,45,opt,name=botWelcomeRequestAction" json:"botWelcomeRequestAction,omitempty"`
	DeleteIndividualCallLog         *SyncActionValue_DeleteIndividualCallLogAction    `protobuf:"bytes,46,opt,name=deleteIndividualCallLog" json:"deleteIndividualCallLog,omitempty"`
	LabelReorderingAction           *SyncActionValue_LabelReorderingAction            `protobuf:"bytes,47,opt,name=labelReorderingAction" json:"labelReorderingAction,omitempty"`
	PaymentInfoAction               *SyncActionValue_PaymentInfoAction                `protobuf:"bytes,48,opt,name=paymentInfoAction" json:"paymentInfoAction,omitempty"`
	CustomPaymentMethodsAction      *SyncActionValue_CustomPaymentMethodsAction       `protobuf:"bytes,49,opt,name=customPaymentMethodsAction" json:"customPaymentMethodsAction,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *SyncActionValue) Reset() {
	*x = SyncActionValue{}
	mi := &file_WAProto_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue) ProtoMessage() {}

func (x *SyncActionValue) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue.ProtoReflect.Descriptor instead.
func (*SyncActionValue) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91}
}

func (x *SyncActionValue) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *SyncActionValue) GetStarAction() *SyncActionValue_StarAction {
	if x != nil {
		return x.StarAction
	}
	return nil
}

func (x *SyncActionValue) GetContactAction() *SyncActionValue_ContactAction {
	if x != nil {
		return x.ContactAction
	}
	return nil
}

func (x *SyncActionValue) GetMuteAction() *SyncActionValue_MuteAction {
	if x != nil {
		return x.MuteAction
	}
	return nil
}

func (x *SyncActionValue) GetPinAction() *SyncActionValue_PinAction {
	if x != nil {
		return x.PinAction
	}
	return nil
}

func (x *SyncActionValue) GetSecurityNotificationSetting() *SyncActionValue_SecurityNotificationSetting {
	if x != nil {
		return x.SecurityNotificationSetting
	}
	return nil
}

func (x *SyncActionValue) GetPushNameSetting() *SyncActionValue_PushNameSetting {
	if x != nil {
		return x.PushNameSetting
	}
	return nil
}

func (x *SyncActionValue) GetQuickReplyAction() *SyncActionValue_QuickReplyAction {
	if x != nil {
		return x.QuickReplyAction
	}
	return nil
}

func (x *SyncActionValue) GetRecentEmojiWeightsAction() *SyncActionValue_RecentEmojiWeightsAction {
	if x != nil {
		return x.RecentEmojiWeightsAction
	}
	return nil
}

func (x *SyncActionValue) GetLabelEditAction() *SyncActionValue_LabelEditAction {
	if x != nil {
		return x.LabelEditAction
	}
	return nil
}

func (x *SyncActionValue) GetLabelAssociationAction() *SyncActionValue_LabelAssociationAction {
	if x != nil {
		return x.LabelAssociationAction
	}
	return nil
}

func (x *SyncActionValue) GetLocaleSetting() *SyncActionValue_LocaleSetting {
	if x != nil {
		return x.LocaleSetting
	}
	return nil
}

func (x *SyncActionValue) GetArchiveChatAction() *SyncActionValue_ArchiveChatAction {
	if x != nil {
		return x.ArchiveChatAction
	}
	return nil
}

func (x *SyncActionValue) GetDeleteMessageForMeAction() *SyncActionValue_DeleteMessageForMeAction {
	if x != nil {
		return x.DeleteMessageForMeAction
	}
	return nil
}

func (x *SyncActionValue) GetKeyExpiration() *SyncActionValue_KeyExpiration {
	if x != nil {
		return x.KeyExpiration
	}
	return nil
}

func (x *SyncActionValue) GetMarkChatAsReadAction() *SyncActionValue_MarkChatAsReadAction {
	if x != nil {
		return x.MarkChatAsReadAction
	}
	return nil
}

func (x *SyncActionValue) GetClearChatAction() *SyncActionValue_ClearChatAction {
	if x != nil {
		return x.ClearChatAction
	}
	return nil
}

func (x *SyncActionValue) GetDeleteChatAction() *SyncActionValue_DeleteChatAction {
	if x != nil {
		return x.DeleteChatAction
	}
	return nil
}

func (x *SyncActionValue) GetUnarchiveChatsSetting() *SyncActionValue_UnarchiveChatsSetting {
	if x != nil {
		return x.UnarchiveChatsSetting
	}
	return nil
}

func (x *SyncActionValue) GetPrimaryFeature() *SyncActionValue_PrimaryFeature {
	if x != nil {
		return x.PrimaryFeature
	}
	return nil
}

func (x *SyncActionValue) GetAndroidUnsupportedActions() *SyncActionValue_AndroidUnsupportedActions {
	if x != nil {
		return x.AndroidUnsupportedActions
	}
	return nil
}

func (x *SyncActionValue) GetAgentAction() *SyncActionValue_AgentAction {
	if x != nil {
		return x.AgentAction
	}
	return nil
}

func (x *SyncActionValue) GetSubscriptionAction() *SyncActionValue_SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return nil
}

func (x *SyncActionValue) GetUserStatusMuteAction() *SyncActionValue_UserStatusMuteAction {
	if x != nil {
		return x.UserStatusMuteAction
	}
	return nil
}

func (x *SyncActionValue) GetTimeFormatAction() *SyncActionValue_TimeFormatAction {
	if x != nil {
		return x.TimeFormatAction
	}
	return nil
}

func (x *SyncActionValue) GetNuxAction() *SyncActionValue_NuxAction {
	if x != nil {
		return x.NuxAction
	}
	return nil
}

func (x *SyncActionValue) GetPrimaryVersionAction() *SyncActionValue_PrimaryVersionAction {
	if x != nil {
		return x.PrimaryVersionAction
	}
	return nil
}

func (x *SyncActionValue) GetStickerAction() *SyncActionValue_StickerAction {
	if x != nil {
		return x.StickerAction
	}
	return nil
}

func (x *SyncActionValue) GetRemoveRecentStickerAction() *SyncActionValue_RemoveRecentStickerAction {
	if x != nil {
		return x.RemoveRecentStickerAction
	}
	return nil
}

func (x *SyncActionValue) GetChatAssignment() *SyncActionValue_ChatAssignmentAction {
	if x != nil {
		return x.ChatAssignment
	}
	return nil
}

func (x *SyncActionValue) GetChatAssignmentOpenedStatus() *SyncActionValue_ChatAssignmentOpenedStatusAction {
	if x != nil {
		return x.ChatAssignmentOpenedStatus
	}
	return nil
}

func (x *SyncActionValue) GetPnForLidChatAction() *SyncActionValue_PnForLidChatAction {
	if x != nil {
		return x.PnForLidChatAction
	}
	return nil
}

func (x *SyncActionValue) GetMarketingMessageAction() *SyncActionValue_MarketingMessageAction {
	if x != nil {
		return x.MarketingMessageAction
	}
	return nil
}

func (x *SyncActionValue) GetMarketingMessageBroadcastAction() *SyncActionValue_MarketingMessageBroadcastAction {
	if x != nil {
		return x.MarketingMessageBroadcastAction
	}
	return nil
}

func (x *SyncActionValue) GetExternalWebBetaAction() *SyncActionValue_ExternalWebBetaAction {
	if x != nil {
		return x.ExternalWebBetaAction
	}
	return nil
}

func (x *SyncActionValue) GetPrivacySettingRelayAllCalls() *SyncActionValue_PrivacySettingRelayAllCalls {
	if x != nil {
		return x.PrivacySettingRelayAllCalls
	}
	return nil
}

func (x *SyncActionValue) GetCallLogAction() *SyncActionValue_CallLogAction {
	if x != nil {
		return x.CallLogAction
	}
	return nil
}

func (x *SyncActionValue) GetStatusPrivacy() *SyncActionValue_StatusPrivacyAction {
	if x != nil {
		return x.StatusPrivacy
	}
	return nil
}

func (x *SyncActionValue) GetBotWelcomeRequestAction() *SyncActionValue_BotWelcomeRequestAction {
	if x != nil {
		return x.BotWelcomeRequestAction
	}
	return nil
}

func (x *SyncActionValue) GetDeleteIndividualCallLog() *SyncActionValue_DeleteIndividualCallLogAction {
	if x != nil {
		return x.DeleteIndividualCallLog
	}
	return nil
}

func (x *SyncActionValue) GetLabelReorderingAction() *SyncActionValue_LabelReorderingAction {
	if x != nil {
		return x.LabelReorderingAction
	}
	return nil
}

func (x *SyncActionValue) GetPaymentInfoAction() *SyncActionValue_PaymentInfoAction {
	if x != nil {
		return x.PaymentInfoAction
	}
	return nil
}

func (x *SyncActionValue) GetCustomPaymentMethodsAction() *SyncActionValue_CustomPaymentMethodsAction {
	if x != nil {
		return x.CustomPaymentMethodsAction
	}
	return nil
}

type SyncdIndex struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blob          []byte                 `protobuf:"bytes,1,opt,name=blob" json:"blob,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncdIndex) Reset() {
	*x = SyncdIndex{}
	mi := &file_WAProto_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncdIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncdIndex) ProtoMessage() {}

func (x *SyncdIndex) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncdIndex.ProtoReflect.Descriptor instead.
func (*SyncdIndex) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{92}
}

func (x *SyncdIndex) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type SyncdMutation struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Operation     *SyncdMutation_SyncdOperation `protobuf:"varint,1,opt,name=operation,enum=proto.SyncdMutation_SyncdOperation" json:"operation,omitempty"`
	Record        *SyncdRecord                  `protobuf:"bytes,2,opt,name=record" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncdMutation) Reset() {
	*x = SyncdMutation{}
	mi := &file_WAProto_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncdMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncdMutation) ProtoMessage() {}

func (x *SyncdMutation) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncdMutation.ProtoReflect.Descriptor instead.
func (*SyncdMutation) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{93}
}

func (x *SyncdMutation) GetOperation() SyncdMutation_SyncdOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return SyncdMutation_SET
}

func (x *SyncdMutation) GetRecord() *SyncdRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type SyncdMutations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mutations     []*SyncdMutation       `protobuf:"bytes,1,rep,name=mutations" json:"mutations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncdMutations) Reset() {
	*x = SyncdMutations{}
	mi := &file_WAProto_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncdMutations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncdMutations) ProtoMessage() {}

func (x *SyncdMutations) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncdMutations.ProtoReflect.Descriptor instead.
func (*SyncdMutations) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{94}
}

func (x *SyncdMutations) GetMutations() []*SyncdMutation {
	if x != nil {
		return x.Mutations
	}
	return nil
}

type SyncdPatch struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Version           *SyncdVersion          `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Mutations         []*SyncdMutation       `protobuf:"bytes,2,rep,name=mutations" json:"mutations,omitempty"`
	ExternalMutations *ExternalBlobReference `protobuf:"bytes,3,opt,name=externalMutations" json:"externalMutations,omitempty"`
	SnapshotMac       []byte                 `protobuf:"bytes,4,opt,name=snapshotMac" json:"snapshotMac,omitempty"`
	PatchMac          []byte                 `protobuf:"bytes,5,opt,name=patchMac" json:"patchMac,omitempty"`
	KeyId             *KeyId                 `protobuf:"bytes,6,opt,name=keyId" json:"keyId,omitempty"`
	ExitCode          *ExitCode              `protobuf:"bytes,7,opt,name=exitCode" json:"exitCode,omitempty"`
	DeviceIndex       *uint32                `protobuf:"varint,8,opt,name=deviceIndex" json:"deviceIndex,omitempty"`
	ClientDebugData   []byte                 `protobuf:"bytes,9,opt,name=clientDebugData" json:"clientDebugData,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SyncdPatch) Reset() {
	*x = SyncdPatch{}
	mi := &file_WAProto_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncdPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncdPatch) ProtoMessage() {}

func (x *SyncdPatch) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncdPatch.ProtoReflect.Descriptor instead.
func (*SyncdPatch) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{95}
}

func (x *SyncdPatch) GetVersion() *SyncdVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *SyncdPatch) GetMutations() []*SyncdMutation {
	if x != nil {
		return x.Mutations
	}
	return nil
}

func (x *SyncdPatch) GetExternalMutations() *ExternalBlobReference {
	if x != nil {
		return x.ExternalMutations
	}
	return nil
}

func (x *SyncdPatch) GetSnapshotMac() []byte {
	if x != nil {
		return x.SnapshotMac
	}
	return nil
}

func (x *SyncdPatch) GetPatchMac() []byte {
	if x != nil {
		return x.PatchMac
	}
	return nil
}

func (x *SyncdPatch) GetKeyId() *KeyId {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SyncdPatch) GetExitCode() *ExitCode {
	if x != nil {
		return x.ExitCode
	}
	return nil
}

func (x *SyncdPatch) GetDeviceIndex() uint32 {
	if x != nil && x.DeviceIndex != nil {
		return *x.DeviceIndex
	}
	return 0
}

func (x *SyncdPatch) GetClientDebugData() []byte {
	if x != nil {
		return x.ClientDebugData
	}
	return nil
}

type SyncdRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         *SyncdIndex            `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Value         *SyncdValue            `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	KeyId         *KeyId                 `protobuf:"bytes,3,opt,name=keyId" json:"keyId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncdRecord) Reset() {
	*x = SyncdRecord{}
	mi := &file_WAProto_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncdRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncdRecord) ProtoMessage() {}

func (x *SyncdRecord) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncdRecord.ProtoReflect.Descriptor instead.
func (*SyncdRecord) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{96}
}

func (x *SyncdRecord) GetIndex() *SyncdIndex {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *SyncdRecord) GetValue() *SyncdValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SyncdRecord) GetKeyId() *KeyId {
	if x != nil {
		return x.KeyId
	}
	return nil
}

type SyncdSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *SyncdVersion          `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Records       []*SyncdRecord         `protobuf:"bytes,2,rep,name=records" json:"records,omitempty"`
	Mac           []byte                 `protobuf:"bytes,3,opt,name=mac" json:"mac,omitempty"`
	KeyId         *KeyId                 `protobuf:"bytes,4,opt,name=keyId" json:"keyId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncdSnapshot) Reset() {
	*x = SyncdSnapshot{}
	mi := &file_WAProto_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncdSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncdSnapshot) ProtoMessage() {}

func (x *SyncdSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncdSnapshot.ProtoReflect.Descriptor instead.
func (*SyncdSnapshot) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{97}
}

func (x *SyncdSnapshot) GetVersion() *SyncdVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *SyncdSnapshot) GetRecords() []*SyncdRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *SyncdSnapshot) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *SyncdSnapshot) GetKeyId() *KeyId {
	if x != nil {
		return x.KeyId
	}
	return nil
}

type SyncdValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blob          []byte                 `protobuf:"bytes,1,opt,name=blob" json:"blob,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncdValue) Reset() {
	*x = SyncdValue{}
	mi := &file_WAProto_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncdValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncdValue) ProtoMessage() {}

func (x *SyncdValue) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncdValue.ProtoReflect.Descriptor instead.
func (*SyncdValue) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{98}
}

func (x *SyncdValue) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type SyncdVersion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *uint64                `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncdVersion) Reset() {
	*x = SyncdVersion{}
	mi := &file_WAProto_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncdVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncdVersion) ProtoMessage() {}

func (x *SyncdVersion) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncdVersion.ProtoReflect.Descriptor instead.
func (*SyncdVersion) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{99}
}

func (x *SyncdVersion) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type TemplateButton struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Index *uint32                `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	// Types that are valid to be assigned to Button:
	//
	//	*TemplateButton_QuickReplyButton_
	//	*TemplateButton_UrlButton
	//	*TemplateButton_CallButton_
	Button        isTemplateButton_Button `protobuf_oneof:"button"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateButton) Reset() {
	*x = TemplateButton{}
	mi := &file_WAProto_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateButton) ProtoMessage() {}

func (x *TemplateButton) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateButton.ProtoReflect.Descriptor instead.
func (*TemplateButton) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{100}
}

func (x *TemplateButton) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *TemplateButton) GetButton() isTemplateButton_Button {
	if x != nil {
		return x.Button
	}
	return nil
}

func (x *TemplateButton) GetQuickReplyButton() *TemplateButton_QuickReplyButton {
	if x != nil {
		if x, ok := x.Button.(*TemplateButton_QuickReplyButton_); ok {
			return x.QuickReplyButton
		}
	}
	return nil
}

func (x *TemplateButton) GetUrlButton() *TemplateButton_URLButton {
	if x != nil {
		if x, ok := x.Button.(*TemplateButton_UrlButton); ok {
			return x.UrlButton
		}
	}
	return nil
}

func (x *TemplateButton) GetCallButton() *TemplateButton_CallButton {
	if x != nil {
		if x, ok := x.Button.(*TemplateButton_CallButton_); ok {
			return x.CallButton
		}
	}
	return nil
}

type isTemplateButton_Button interface {
	isTemplateButton_Button()
}

type TemplateButton_QuickReplyButton_ struct {
	QuickReplyButton *TemplateButton_QuickReplyButton `protobuf:"bytes,1,opt,name=quickReplyButton,oneof"`
}

type TemplateButton_UrlButton struct {
	UrlButton *TemplateButton_URLButton `protobuf:"bytes,2,opt,name=urlButton,oneof"`
}

type TemplateButton_CallButton_ struct {
	CallButton *TemplateButton_CallButton `protobuf:"bytes,3,opt,name=callButton,oneof"`
}

func (*TemplateButton_QuickReplyButton_) isTemplateButton_Button() {}

func (*TemplateButton_UrlButton) isTemplateButton_Button() {}

func (*TemplateButton_CallButton_) isTemplateButton_Button() {}

type UserReceipt struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserJid            *string                `protobuf:"bytes,1,req,name=userJid" json:"userJid,omitempty"`
	ReceiptTimestamp   *int64                 `protobuf:"varint,2,opt,name=receiptTimestamp" json:"receiptTimestamp,omitempty"`
	ReadTimestamp      *int64                 `protobuf:"varint,3,opt,name=readTimestamp" json:"readTimestamp,omitempty"`
	PlayedTimestamp    *int64                 `protobuf:"varint,4,opt,name=playedTimestamp" json:"playedTimestamp,omitempty"`
	PendingDeviceJid   []string               `protobuf:"bytes,5,rep,name=pendingDeviceJid" json:"pendingDeviceJid,omitempty"`
	DeliveredDeviceJid []string               `protobuf:"bytes,6,rep,name=deliveredDeviceJid" json:"deliveredDeviceJid,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserReceipt) Reset() {
	*x = UserReceipt{}
	mi := &file_WAProto_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReceipt) ProtoMessage() {}

func (x *UserReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReceipt.ProtoReflect.Descriptor instead.
func (*UserReceipt) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{101}
}

func (x *UserReceipt) GetUserJid() string {
	if x != nil && x.UserJid != nil {
		return *x.UserJid
	}
	return ""
}

func (x *UserReceipt) GetReceiptTimestamp() int64 {
	if x != nil && x.ReceiptTimestamp != nil {
		return *x.ReceiptTimestamp
	}
	return 0
}

func (x *UserReceipt) GetReadTimestamp() int64 {
	if x != nil && x.ReadTimestamp != nil {
		return *x.ReadTimestamp
	}
	return 0
}

func (x *UserReceipt) GetPlayedTimestamp() int64 {
	if x != nil && x.PlayedTimestamp != nil {
		return *x.PlayedTimestamp
	}
	return 0
}

func (x *UserReceipt) GetPendingDeviceJid() []string {
	if x != nil {
		return x.PendingDeviceJid
	}
	return nil
}

func (x *UserReceipt) GetDeliveredDeviceJid() []string {
	if x != nil {
		return x.DeliveredDeviceJid
	}
	return nil
}

type VerifiedNameCertificate struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Details         []byte                 `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	Signature       []byte                 `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	ServerSignature []byte                 `protobuf:"bytes,3,opt,name=serverSignature" json:"serverSignature,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VerifiedNameCertificate) Reset() {
	*x = VerifiedNameCertificate{}
	mi := &file_WAProto_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifiedNameCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiedNameCertificate) ProtoMessage() {}

func (x *VerifiedNameCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiedNameCertificate.ProtoReflect.Descriptor instead.
func (*VerifiedNameCertificate) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{102}
}

func (x *VerifiedNameCertificate) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *VerifiedNameCertificate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *VerifiedNameCertificate) GetServerSignature() []byte {
	if x != nil {
		return x.ServerSignature
	}
	return nil
}

type WallpaperSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      *string                `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Opacity       *uint32                `protobuf:"varint,2,opt,name=opacity" json:"opacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WallpaperSettings) Reset() {
	*x = WallpaperSettings{}
	mi := &file_WAProto_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WallpaperSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WallpaperSettings) ProtoMessage() {}

func (x *WallpaperSettings) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WallpaperSettings.ProtoReflect.Descriptor instead.
func (*WallpaperSettings) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{103}
}

func (x *WallpaperSettings) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *WallpaperSettings) GetOpacity() uint32 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

type WebFeatures struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	LabelsDisplay                *WebFeatures_Flag      `protobuf:"varint,1,opt,name=labelsDisplay,enum=proto.WebFeatures_Flag" json:"labelsDisplay,omitempty"`
	VoipIndividualOutgoing       *WebFeatures_Flag      `protobuf:"varint,2,opt,name=voipIndividualOutgoing,enum=proto.WebFeatures_Flag" json:"voipIndividualOutgoing,omitempty"`
	GroupsV3                     *WebFeatures_Flag      `protobuf:"varint,3,opt,name=groupsV3,enum=proto.WebFeatures_Flag" json:"groupsV3,omitempty"`
	GroupsV3Create               *WebFeatures_Flag      `protobuf:"varint,4,opt,name=groupsV3Create,enum=proto.WebFeatures_Flag" json:"groupsV3Create,omitempty"`
	ChangeNumberV2               *WebFeatures_Flag      `protobuf:"varint,5,opt,name=changeNumberV2,enum=proto.WebFeatures_Flag" json:"changeNumberV2,omitempty"`
	QueryStatusV3Thumbnail       *WebFeatures_Flag      `protobuf:"varint,6,opt,name=queryStatusV3Thumbnail,enum=proto.WebFeatures_Flag" json:"queryStatusV3Thumbnail,omitempty"`
	LiveLocations                *WebFeatures_Flag      `protobuf:"varint,7,opt,name=liveLocations,enum=proto.WebFeatures_Flag" json:"liveLocations,omitempty"`
	QueryVname                   *WebFeatures_Flag      `protobuf:"varint,8,opt,name=queryVname,enum=proto.WebFeatures_Flag" json:"queryVname,omitempty"`
	VoipIndividualIncoming       *WebFeatures_Flag      `protobuf:"varint,9,opt,name=voipIndividualIncoming,enum=proto.WebFeatures_Flag" json:"voipIndividualIncoming,omitempty"`
	QuickRepliesQuery            *WebFeatures_Flag      `protobuf:"varint,10,opt,name=quickRepliesQuery,enum=proto.WebFeatures_Flag" json:"quickRepliesQuery,omitempty"`
	Payments                     *WebFeatures_Flag      `protobuf:"varint,11,opt,name=payments,enum=proto.WebFeatures_Flag" json:"payments,omitempty"`
	StickerPackQuery             *WebFeatures_Flag      `protobuf:"varint,12,opt,name=stickerPackQuery,enum=proto.WebFeatures_Flag" json:"stickerPackQuery,omitempty"`
	LiveLocationsFinal           *WebFeatures_Flag      `protobuf:"varint,13,opt,name=liveLocationsFinal,enum=proto.WebFeatures_Flag" json:"liveLocationsFinal,omitempty"`
	LabelsEdit                   *WebFeatures_Flag      `protobuf:"varint,14,opt,name=labelsEdit,enum=proto.WebFeatures_Flag" json:"labelsEdit,omitempty"`
	MediaUpload                  *WebFeatures_Flag      `protobuf:"varint,15,opt,name=mediaUpload,enum=proto.WebFeatures_Flag" json:"mediaUpload,omitempty"`
	MediaUploadRichQuickReplies  *WebFeatures_Flag      `protobuf:"varint,18,opt,name=mediaUploadRichQuickReplies,enum=proto.WebFeatures_Flag" json:"mediaUploadRichQuickReplies,omitempty"`
	VnameV2                      *WebFeatures_Flag      `protobuf:"varint,19,opt,name=vnameV2,enum=proto.WebFeatures_Flag" json:"vnameV2,omitempty"`
	VideoPlaybackUrl             *WebFeatures_Flag      `protobuf:"varint,20,opt,name=videoPlaybackUrl,enum=proto.WebFeatures_Flag" json:"videoPlaybackUrl,omitempty"`
	StatusRanking                *WebFeatures_Flag      `protobuf:"varint,21,opt,name=statusRanking,enum=proto.WebFeatures_Flag" json:"statusRanking,omitempty"`
	VoipIndividualVideo          *WebFeatures_Flag      `protobuf:"varint,22,opt,name=voipIndividualVideo,enum=proto.WebFeatures_Flag" json:"voipIndividualVideo,omitempty"`
	ThirdPartyStickers           *WebFeatures_Flag      `protobuf:"varint,23,opt,name=thirdPartyStickers,enum=proto.WebFeatures_Flag" json:"thirdPartyStickers,omitempty"`
	FrequentlyForwardedSetting   *WebFeatures_Flag      `protobuf:"varint,24,opt,name=frequentlyForwardedSetting,enum=proto.WebFeatures_Flag" json:"frequentlyForwardedSetting,omitempty"`
	GroupsV4JoinPermission       *WebFeatures_Flag      `protobuf:"varint,25,opt,name=groupsV4JoinPermission,enum=proto.WebFeatures_Flag" json:"groupsV4JoinPermission,omitempty"`
	RecentStickers               *WebFeatures_Flag      `protobuf:"varint,26,opt,name=recentStickers,enum=proto.WebFeatures_Flag" json:"recentStickers,omitempty"`
	Catalog                      *WebFeatures_Flag      `protobuf:"varint,27,opt,name=catalog,enum=proto.WebFeatures_Flag" json:"catalog,omitempty"`
	StarredStickers              *WebFeatures_Flag      `protobuf:"varint,28,opt,name=starredStickers,enum=proto.WebFeatures_Flag" json:"starredStickers,omitempty"`
	VoipGroupCall                *WebFeatures_Flag      `protobuf:"varint,29,opt,name=voipGroupCall,enum=proto.WebFeatures_Flag" json:"voipGroupCall,omitempty"`
	TemplateMessage              *WebFeatures_Flag      `protobuf:"varint,30,opt,name=templateMessage,enum=proto.WebFeatures_Flag" json:"templateMessage,omitempty"`
	TemplateMessageInteractivity *WebFeatures_Flag      `protobuf:"varint,31,opt,name=templateMessageInteractivity,enum=proto.WebFeatures_Flag" json:"templateMessageInteractivity,omitempty"`
	EphemeralMessages            *WebFeatures_Flag      `protobuf:"varint,32,opt,name=ephemeralMessages,enum=proto.WebFeatures_Flag" json:"ephemeralMessages,omitempty"`
	E2ENotificationSync          *WebFeatures_Flag      `protobuf:"varint,33,opt,name=e2ENotificationSync,enum=proto.WebFeatures_Flag" json:"e2ENotificationSync,omitempty"`
	RecentStickersV2             *WebFeatures_Flag      `protobuf:"varint,34,opt,name=recentStickersV2,enum=proto.WebFeatures_Flag" json:"recentStickersV2,omitempty"`
	RecentStickersV3             *WebFeatures_Flag      `protobuf:"varint,36,opt,name=recentStickersV3,enum=proto.WebFeatures_Flag" json:"recentStickersV3,omitempty"`
	UserNotice                   *WebFeatures_Flag      `protobuf:"varint,37,opt,name=userNotice,enum=proto.WebFeatures_Flag" json:"userNotice,omitempty"`
	Support                      *WebFeatures_Flag      `protobuf:"varint,39,opt,name=support,enum=proto.WebFeatures_Flag" json:"support,omitempty"`
	GroupUiiCleanup              *WebFeatures_Flag      `protobuf:"varint,40,opt,name=groupUiiCleanup,enum=proto.WebFeatures_Flag" json:"groupUiiCleanup,omitempty"`
	GroupDogfoodingInternalOnly  *WebFeatures_Flag      `protobuf:"varint,41,opt,name=groupDogfoodingInternalOnly,enum=proto.WebFeatures_Flag" json:"groupDogfoodingInternalOnly,omitempty"`
	SettingsSync                 *WebFeatures_Flag      `protobuf:"varint,42,opt,name=settingsSync,enum=proto.WebFeatures_Flag" json:"settingsSync,omitempty"`
	ArchiveV2                    *WebFeatures_Flag      `protobuf:"varint,43,opt,name=archiveV2,enum=proto.WebFeatures_Flag" json:"archiveV2,omitempty"`
	EphemeralAllowGroupMembers   *WebFeatures_Flag      `protobuf:"varint,44,opt,name=ephemeralAllowGroupMembers,enum=proto.WebFeatures_Flag" json:"ephemeralAllowGroupMembers,omitempty"`
	Ephemeral24HDuration         *WebFeatures_Flag      `protobuf:"varint,45,opt,name=ephemeral24HDuration,enum=proto.WebFeatures_Flag" json:"ephemeral24HDuration,omitempty"`
	MdForceUpgrade               *WebFeatures_Flag      `protobuf:"varint,46,opt,name=mdForceUpgrade,enum=proto.WebFeatures_Flag" json:"mdForceUpgrade,omitempty"`
	DisappearingMode             *WebFeatures_Flag      `protobuf:"varint,47,opt,name=disappearingMode,enum=proto.WebFeatures_Flag" json:"disappearingMode,omitempty"`
	ExternalMdOptInAvailable     *WebFeatures_Flag      `protobuf:"varint,48,opt,name=externalMdOptInAvailable,enum=proto.WebFeatures_Flag" json:"externalMdOptInAvailable,omitempty"`
	NoDeleteMessageTimeLimit     *WebFeatures_Flag      `protobuf:"varint,49,opt,name=noDeleteMessageTimeLimit,enum=proto.WebFeatures_Flag" json:"noDeleteMessageTimeLimit,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *WebFeatures) Reset() {
	*x = WebFeatures{}
	mi := &file_WAProto_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebFeatures) ProtoMessage() {}

func (x *WebFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebFeatures.ProtoReflect.Descriptor instead.
func (*WebFeatures) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{104}
}

func (x *WebFeatures) GetLabelsDisplay() WebFeatures_Flag {
	if x != nil && x.LabelsDisplay != nil {
		return *x.LabelsDisplay
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetVoipIndividualOutgoing() WebFeatures_Flag {
	if x != nil && x.VoipIndividualOutgoing != nil {
		return *x.VoipIndividualOutgoing
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetGroupsV3() WebFeatures_Flag {
	if x != nil && x.GroupsV3 != nil {
		return *x.GroupsV3
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetGroupsV3Create() WebFeatures_Flag {
	if x != nil && x.GroupsV3Create != nil {
		return *x.GroupsV3Create
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetChangeNumberV2() WebFeatures_Flag {
	if x != nil && x.ChangeNumberV2 != nil {
		return *x.ChangeNumberV2
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetQueryStatusV3Thumbnail() WebFeatures_Flag {
	if x != nil && x.QueryStatusV3Thumbnail != nil {
		return *x.QueryStatusV3Thumbnail
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetLiveLocations() WebFeatures_Flag {
	if x != nil && x.LiveLocations != nil {
		return *x.LiveLocations
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetQueryVname() WebFeatures_Flag {
	if x != nil && x.QueryVname != nil {
		return *x.QueryVname
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetVoipIndividualIncoming() WebFeatures_Flag {
	if x != nil && x.VoipIndividualIncoming != nil {
		return *x.VoipIndividualIncoming
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetQuickRepliesQuery() WebFeatures_Flag {
	if x != nil && x.QuickRepliesQuery != nil {
		return *x.QuickRepliesQuery
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetPayments() WebFeatures_Flag {
	if x != nil && x.Payments != nil {
		return *x.Payments
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetStickerPackQuery() WebFeatures_Flag {
	if x != nil && x.StickerPackQuery != nil {
		return *x.StickerPackQuery
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetLiveLocationsFinal() WebFeatures_Flag {
	if x != nil && x.LiveLocationsFinal != nil {
		return *x.LiveLocationsFinal
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetLabelsEdit() WebFeatures_Flag {
	if x != nil && x.LabelsEdit != nil {
		return *x.LabelsEdit
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetMediaUpload() WebFeatures_Flag {
	if x != nil && x.MediaUpload != nil {
		return *x.MediaUpload
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetMediaUploadRichQuickReplies() WebFeatures_Flag {
	if x != nil && x.MediaUploadRichQuickReplies != nil {
		return *x.MediaUploadRichQuickReplies
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetVnameV2() WebFeatures_Flag {
	if x != nil && x.VnameV2 != nil {
		return *x.VnameV2
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetVideoPlaybackUrl() WebFeatures_Flag {
	if x != nil && x.VideoPlaybackUrl != nil {
		return *x.VideoPlaybackUrl
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetStatusRanking() WebFeatures_Flag {
	if x != nil && x.StatusRanking != nil {
		return *x.StatusRanking
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetVoipIndividualVideo() WebFeatures_Flag {
	if x != nil && x.VoipIndividualVideo != nil {
		return *x.VoipIndividualVideo
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetThirdPartyStickers() WebFeatures_Flag {
	if x != nil && x.ThirdPartyStickers != nil {
		return *x.ThirdPartyStickers
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetFrequentlyForwardedSetting() WebFeatures_Flag {
	if x != nil && x.FrequentlyForwardedSetting != nil {
		return *x.FrequentlyForwardedSetting
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetGroupsV4JoinPermission() WebFeatures_Flag {
	if x != nil && x.GroupsV4JoinPermission != nil {
		return *x.GroupsV4JoinPermission
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetRecentStickers() WebFeatures_Flag {
	if x != nil && x.RecentStickers != nil {
		return *x.RecentStickers
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetCatalog() WebFeatures_Flag {
	if x != nil && x.Catalog != nil {
		return *x.Catalog
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetStarredStickers() WebFeatures_Flag {
	if x != nil && x.StarredStickers != nil {
		return *x.StarredStickers
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetVoipGroupCall() WebFeatures_Flag {
	if x != nil && x.VoipGroupCall != nil {
		return *x.VoipGroupCall
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetTemplateMessage() WebFeatures_Flag {
	if x != nil && x.TemplateMessage != nil {
		return *x.TemplateMessage
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetTemplateMessageInteractivity() WebFeatures_Flag {
	if x != nil && x.TemplateMessageInteractivity != nil {
		return *x.TemplateMessageInteractivity
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetEphemeralMessages() WebFeatures_Flag {
	if x != nil && x.EphemeralMessages != nil {
		return *x.EphemeralMessages
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetE2ENotificationSync() WebFeatures_Flag {
	if x != nil && x.E2ENotificationSync != nil {
		return *x.E2ENotificationSync
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetRecentStickersV2() WebFeatures_Flag {
	if x != nil && x.RecentStickersV2 != nil {
		return *x.RecentStickersV2
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetRecentStickersV3() WebFeatures_Flag {
	if x != nil && x.RecentStickersV3 != nil {
		return *x.RecentStickersV3
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetUserNotice() WebFeatures_Flag {
	if x != nil && x.UserNotice != nil {
		return *x.UserNotice
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetSupport() WebFeatures_Flag {
	if x != nil && x.Support != nil {
		return *x.Support
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetGroupUiiCleanup() WebFeatures_Flag {
	if x != nil && x.GroupUiiCleanup != nil {
		return *x.GroupUiiCleanup
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetGroupDogfoodingInternalOnly() WebFeatures_Flag {
	if x != nil && x.GroupDogfoodingInternalOnly != nil {
		return *x.GroupDogfoodingInternalOnly
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetSettingsSync() WebFeatures_Flag {
	if x != nil && x.SettingsSync != nil {
		return *x.SettingsSync
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetArchiveV2() WebFeatures_Flag {
	if x != nil && x.ArchiveV2 != nil {
		return *x.ArchiveV2
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetEphemeralAllowGroupMembers() WebFeatures_Flag {
	if x != nil && x.EphemeralAllowGroupMembers != nil {
		return *x.EphemeralAllowGroupMembers
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetEphemeral24HDuration() WebFeatures_Flag {
	if x != nil && x.Ephemeral24HDuration != nil {
		return *x.Ephemeral24HDuration
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetMdForceUpgrade() WebFeatures_Flag {
	if x != nil && x.MdForceUpgrade != nil {
		return *x.MdForceUpgrade
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetDisappearingMode() WebFeatures_Flag {
	if x != nil && x.DisappearingMode != nil {
		return *x.DisappearingMode
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetExternalMdOptInAvailable() WebFeatures_Flag {
	if x != nil && x.ExternalMdOptInAvailable != nil {
		return *x.ExternalMdOptInAvailable
	}
	return WebFeatures_NOT_STARTED
}

func (x *WebFeatures) GetNoDeleteMessageTimeLimit() WebFeatures_Flag {
	if x != nil && x.NoDeleteMessageTimeLimit != nil {
		return *x.NoDeleteMessageTimeLimit
	}
	return WebFeatures_NOT_STARTED
}

type WebMessageInfo struct {
	state                           protoimpl.MessageState           `protogen:"open.v1"`
	Key                             *MessageKey                      `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Message                         *Message                         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	MessageTimestamp                *uint64                          `protobuf:"varint,3,opt,name=messageTimestamp" json:"messageTimestamp,omitempty"`
	Status                          *WebMessageInfo_Status           `protobuf:"varint,4,opt,name=status,enum=proto.WebMessageInfo_Status" json:"status,omitempty"`
	Participant                     *string                          `protobuf:"bytes,5,opt,name=participant" json:"participant,omitempty"`
	MessageC2STimestamp             *uint64                          `protobuf:"varint,6,opt,name=messageC2STimestamp" json:"messageC2STimestamp,omitempty"`
	Ignore                          *bool                            `protobuf:"varint,16,opt,name=ignore" json:"ignore,omitempty"`
	Starred                         *bool                            `protobuf:"varint,17,opt,name=starred" json:"starred,omitempty"`
	Broadcast                       *bool                            `protobuf:"varint,18,opt,name=broadcast" json:"broadcast,omitempty"`
	PushName                        *string                          `protobuf:"bytes,19,opt,name=pushName" json:"pushName,omitempty"`
	MediaCiphertextSha256           []byte                           `protobuf:"bytes,20,opt,name=mediaCiphertextSha256" json:"mediaCiphertextSha256,omitempty"`
	Multicast                       *bool                            `protobuf:"varint,21,opt,name=multicast" json:"multicast,omitempty"`
	UrlText                         *bool                            `protobuf:"varint,22,opt,name=urlText" json:"urlText,omitempty"`
	UrlNumber                       *bool                            `protobuf:"varint,23,opt,name=urlNumber" json:"urlNumber,omitempty"`
	MessageStubType                 *WebMessageInfo_StubType         `protobuf:"varint,24,opt,name=messageStubType,enum=proto.WebMessageInfo_StubType" json:"messageStubType,omitempty"`
	ClearMedia                      *bool                            `protobuf:"varint,25,opt,name=clearMedia" json:"clearMedia,omitempty"`
	MessageStubParameters           []string                         `protobuf:"bytes,26,rep,name=messageStubParameters" json:"messageStubParameters,omitempty"`
	Duration                        *uint32                          `protobuf:"varint,27,opt,name=duration" json:"duration,omitempty"`
	Labels                          []string                         `protobuf:"bytes,28,rep,name=labels" json:"labels,omitempty"`
	PaymentInfo                     *PaymentInfo                     `protobuf:"bytes,29,opt,name=paymentInfo" json:"paymentInfo,omitempty"`
	FinalLiveLocation               *Message_LiveLocationMessage     `protobuf:"bytes,30,opt,name=finalLiveLocation" json:"finalLiveLocation,omitempty"`
	QuotedPaymentInfo               *PaymentInfo                     `protobuf:"bytes,31,opt,name=quotedPaymentInfo" json:"quotedPaymentInfo,omitempty"`
	EphemeralStartTimestamp         *uint64                          `protobuf:"varint,32,opt,name=ephemeralStartTimestamp" json:"ephemeralStartTimestamp,omitempty"`
	EphemeralDuration               *uint32                          `protobuf:"varint,33,opt,name=ephemeralDuration" json:"ephemeralDuration,omitempty"`
	EphemeralOffToOn                *bool                            `protobuf:"varint,34,opt,name=ephemeralOffToOn" json:"ephemeralOffToOn,omitempty"`
	EphemeralOutOfSync              *bool                            `protobuf:"varint,35,opt,name=ephemeralOutOfSync" json:"ephemeralOutOfSync,omitempty"`
	BizPrivacyStatus                *WebMessageInfo_BizPrivacyStatus `protobuf:"varint,36,opt,name=bizPrivacyStatus,enum=proto.WebMessageInfo_BizPrivacyStatus" json:"bizPrivacyStatus,omitempty"`
	VerifiedBizName                 *string                          `protobuf:"bytes,37,opt,name=verifiedBizName" json:"verifiedBizName,omitempty"`
	MediaData                       *MediaData                       `protobuf:"bytes,38,opt,name=mediaData" json:"mediaData,omitempty"`
	PhotoChange                     *PhotoChange                     `protobuf:"bytes,39,opt,name=photoChange" json:"photoChange,omitempty"`
	UserReceipt                     []*UserReceipt                   `protobuf:"bytes,40,rep,name=userReceipt" json:"userReceipt,omitempty"`
	Reactions                       []*Reaction                      `protobuf:"bytes,41,rep,name=reactions" json:"reactions,omitempty"`
	QuotedStickerData               *MediaData                       `protobuf:"bytes,42,opt,name=quotedStickerData" json:"quotedStickerData,omitempty"`
	FutureproofData                 []byte                           `protobuf:"bytes,43,opt,name=futureproofData" json:"futureproofData,omitempty"`
	StatusPsa                       *StatusPSA                       `protobuf:"bytes,44,opt,name=statusPsa" json:"statusPsa,omitempty"`
	PollUpdates                     []*PollUpdate                    `protobuf:"bytes,45,rep,name=pollUpdates" json:"pollUpdates,omitempty"`
	PollAdditionalMetadata          *PollAdditionalMetadata          `protobuf:"bytes,46,opt,name=pollAdditionalMetadata" json:"pollAdditionalMetadata,omitempty"`
	AgentId                         *string                          `protobuf:"bytes,47,opt,name=agentId" json:"agentId,omitempty"`
	StatusAlreadyViewed             *bool                            `protobuf:"varint,48,opt,name=statusAlreadyViewed" json:"statusAlreadyViewed,omitempty"`
	MessageSecret                   []byte                           `protobuf:"bytes,49,opt,name=messageSecret" json:"messageSecret,omitempty"`
	KeepInChat                      *KeepInChat                      `protobuf:"bytes,50,opt,name=keepInChat" json:"keepInChat,omitempty"`
	OriginalSelfAuthorUserJidString *string                          `protobuf:"bytes,51,opt,name=originalSelfAuthorUserJidString" json:"originalSelfAuthorUserJidString,omitempty"`
	RevokeMessageTimestamp          *uint64                          `protobuf:"varint,52,opt,name=revokeMessageTimestamp" json:"revokeMessageTimestamp,omitempty"`
	PinInChat                       *PinInChat                       `protobuf:"bytes,54,opt,name=pinInChat" json:"pinInChat,omitempty"`
	PremiumMessageInfo              *PremiumMessageInfo              `protobuf:"bytes,55,opt,name=premiumMessageInfo" json:"premiumMessageInfo,omitempty"`
	Is1PBizBotMessage               *bool                            `protobuf:"varint,56,opt,name=is1PBizBotMessage" json:"is1PBizBotMessage,omitempty"`
	IsGroupHistoryMessage           *bool                            `protobuf:"varint,57,opt,name=isGroupHistoryMessage" json:"isGroupHistoryMessage,omitempty"`
	BotMessageInvokerJid            *string                          `protobuf:"bytes,58,opt,name=botMessageInvokerJid" json:"botMessageInvokerJid,omitempty"`
	CommentMetadata                 *CommentMetadata                 `protobuf:"bytes,59,opt,name=commentMetadata" json:"commentMetadata,omitempty"`
	EventResponses                  []*EventResponse                 `protobuf:"bytes,61,rep,name=eventResponses" json:"eventResponses,omitempty"`
	ReportingTokenInfo              *ReportingTokenInfo              `protobuf:"bytes,62,opt,name=reportingTokenInfo" json:"reportingTokenInfo,omitempty"`
	NewsletterServerId              *uint64                          `protobuf:"varint,63,opt,name=newsletterServerId" json:"newsletterServerId,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *WebMessageInfo) Reset() {
	*x = WebMessageInfo{}
	mi := &file_WAProto_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebMessageInfo) ProtoMessage() {}

func (x *WebMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebMessageInfo.ProtoReflect.Descriptor instead.
func (*WebMessageInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{105}
}

func (x *WebMessageInfo) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WebMessageInfo) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *WebMessageInfo) GetMessageTimestamp() uint64 {
	if x != nil && x.MessageTimestamp != nil {
		return *x.MessageTimestamp
	}
	return 0
}

func (x *WebMessageInfo) GetStatus() WebMessageInfo_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return WebMessageInfo_ERROR
}

func (x *WebMessageInfo) GetParticipant() string {
	if x != nil && x.Participant != nil {
		return *x.Participant
	}
	return ""
}

func (x *WebMessageInfo) GetMessageC2STimestamp() uint64 {
	if x != nil && x.MessageC2STimestamp != nil {
		return *x.MessageC2STimestamp
	}
	return 0
}

func (x *WebMessageInfo) GetIgnore() bool {
	if x != nil && x.Ignore != nil {
		return *x.Ignore
	}
	return false
}

func (x *WebMessageInfo) GetStarred() bool {
	if x != nil && x.Starred != nil {
		return *x.Starred
	}
	return false
}

func (x *WebMessageInfo) GetBroadcast() bool {
	if x != nil && x.Broadcast != nil {
		return *x.Broadcast
	}
	return false
}

func (x *WebMessageInfo) GetPushName() string {
	if x != nil && x.PushName != nil {
		return *x.PushName
	}
	return ""
}

func (x *WebMessageInfo) GetMediaCiphertextSha256() []byte {
	if x != nil {
		return x.MediaCiphertextSha256
	}
	return nil
}

func (x *WebMessageInfo) GetMulticast() bool {
	if x != nil && x.Multicast != nil {
		return *x.Multicast
	}
	return false
}

func (x *WebMessageInfo) GetUrlText() bool {
	if x != nil && x.UrlText != nil {
		return *x.UrlText
	}
	return false
}

func (x *WebMessageInfo) GetUrlNumber() bool {
	if x != nil && x.UrlNumber != nil {
		return *x.UrlNumber
	}
	return false
}

func (x *WebMessageInfo) GetMessageStubType() WebMessageInfo_StubType {
	if x != nil && x.MessageStubType != nil {
		return *x.MessageStubType
	}
	return WebMessageInfo_UNKNOWN
}

func (x *WebMessageInfo) GetClearMedia() bool {
	if x != nil && x.ClearMedia != nil {
		return *x.ClearMedia
	}
	return false
}

func (x *WebMessageInfo) GetMessageStubParameters() []string {
	if x != nil {
		return x.MessageStubParameters
	}
	return nil
}

func (x *WebMessageInfo) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *WebMessageInfo) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WebMessageInfo) GetPaymentInfo() *PaymentInfo {
	if x != nil {
		return x.PaymentInfo
	}
	return nil
}

func (x *WebMessageInfo) GetFinalLiveLocation() *Message_LiveLocationMessage {
	if x != nil {
		return x.FinalLiveLocation
	}
	return nil
}

func (x *WebMessageInfo) GetQuotedPaymentInfo() *PaymentInfo {
	if x != nil {
		return x.QuotedPaymentInfo
	}
	return nil
}

func (x *WebMessageInfo) GetEphemeralStartTimestamp() uint64 {
	if x != nil && x.EphemeralStartTimestamp != nil {
		return *x.EphemeralStartTimestamp
	}
	return 0
}

func (x *WebMessageInfo) GetEphemeralDuration() uint32 {
	if x != nil && x.EphemeralDuration != nil {
		return *x.EphemeralDuration
	}
	return 0
}

func (x *WebMessageInfo) GetEphemeralOffToOn() bool {
	if x != nil && x.EphemeralOffToOn != nil {
		return *x.EphemeralOffToOn
	}
	return false
}

func (x *WebMessageInfo) GetEphemeralOutOfSync() bool {
	if x != nil && x.EphemeralOutOfSync != nil {
		return *x.EphemeralOutOfSync
	}
	return false
}

func (x *WebMessageInfo) GetBizPrivacyStatus() WebMessageInfo_BizPrivacyStatus {
	if x != nil && x.BizPrivacyStatus != nil {
		return *x.BizPrivacyStatus
	}
	return WebMessageInfo_E2EE
}

func (x *WebMessageInfo) GetVerifiedBizName() string {
	if x != nil && x.VerifiedBizName != nil {
		return *x.VerifiedBizName
	}
	return ""
}

func (x *WebMessageInfo) GetMediaData() *MediaData {
	if x != nil {
		return x.MediaData
	}
	return nil
}

func (x *WebMessageInfo) GetPhotoChange() *PhotoChange {
	if x != nil {
		return x.PhotoChange
	}
	return nil
}

func (x *WebMessageInfo) GetUserReceipt() []*UserReceipt {
	if x != nil {
		return x.UserReceipt
	}
	return nil
}

func (x *WebMessageInfo) GetReactions() []*Reaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *WebMessageInfo) GetQuotedStickerData() *MediaData {
	if x != nil {
		return x.QuotedStickerData
	}
	return nil
}

func (x *WebMessageInfo) GetFutureproofData() []byte {
	if x != nil {
		return x.FutureproofData
	}
	return nil
}

func (x *WebMessageInfo) GetStatusPsa() *StatusPSA {
	if x != nil {
		return x.StatusPsa
	}
	return nil
}

func (x *WebMessageInfo) GetPollUpdates() []*PollUpdate {
	if x != nil {
		return x.PollUpdates
	}
	return nil
}

func (x *WebMessageInfo) GetPollAdditionalMetadata() *PollAdditionalMetadata {
	if x != nil {
		return x.PollAdditionalMetadata
	}
	return nil
}

func (x *WebMessageInfo) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *WebMessageInfo) GetStatusAlreadyViewed() bool {
	if x != nil && x.StatusAlreadyViewed != nil {
		return *x.StatusAlreadyViewed
	}
	return false
}

func (x *WebMessageInfo) GetMessageSecret() []byte {
	if x != nil {
		return x.MessageSecret
	}
	return nil
}

func (x *WebMessageInfo) GetKeepInChat() *KeepInChat {
	if x != nil {
		return x.KeepInChat
	}
	return nil
}

func (x *WebMessageInfo) GetOriginalSelfAuthorUserJidString() string {
	if x != nil && x.OriginalSelfAuthorUserJidString != nil {
		return *x.OriginalSelfAuthorUserJidString
	}
	return ""
}

func (x *WebMessageInfo) GetRevokeMessageTimestamp() uint64 {
	if x != nil && x.RevokeMessageTimestamp != nil {
		return *x.RevokeMessageTimestamp
	}
	return 0
}

func (x *WebMessageInfo) GetPinInChat() *PinInChat {
	if x != nil {
		return x.PinInChat
	}
	return nil
}

func (x *WebMessageInfo) GetPremiumMessageInfo() *PremiumMessageInfo {
	if x != nil {
		return x.PremiumMessageInfo
	}
	return nil
}

func (x *WebMessageInfo) GetIs1PBizBotMessage() bool {
	if x != nil && x.Is1PBizBotMessage != nil {
		return *x.Is1PBizBotMessage
	}
	return false
}

func (x *WebMessageInfo) GetIsGroupHistoryMessage() bool {
	if x != nil && x.IsGroupHistoryMessage != nil {
		return *x.IsGroupHistoryMessage
	}
	return false
}

func (x *WebMessageInfo) GetBotMessageInvokerJid() string {
	if x != nil && x.BotMessageInvokerJid != nil {
		return *x.BotMessageInvokerJid
	}
	return ""
}

func (x *WebMessageInfo) GetCommentMetadata() *CommentMetadata {
	if x != nil {
		return x.CommentMetadata
	}
	return nil
}

func (x *WebMessageInfo) GetEventResponses() []*EventResponse {
	if x != nil {
		return x.EventResponses
	}
	return nil
}

func (x *WebMessageInfo) GetReportingTokenInfo() *ReportingTokenInfo {
	if x != nil {
		return x.ReportingTokenInfo
	}
	return nil
}

func (x *WebMessageInfo) GetNewsletterServerId() uint64 {
	if x != nil && x.NewsletterServerId != nil {
		return *x.NewsletterServerId
	}
	return 0
}

type WebNotificationsInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Timestamp          *uint64                `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	UnreadChats        *uint32                `protobuf:"varint,3,opt,name=unreadChats" json:"unreadChats,omitempty"`
	NotifyMessageCount *uint32                `protobuf:"varint,4,opt,name=notifyMessageCount" json:"notifyMessageCount,omitempty"`
	NotifyMessages     []*WebMessageInfo      `protobuf:"bytes,5,rep,name=notifyMessages" json:"notifyMessages,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *WebNotificationsInfo) Reset() {
	*x = WebNotificationsInfo{}
	mi := &file_WAProto_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebNotificationsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebNotificationsInfo) ProtoMessage() {}

func (x *WebNotificationsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebNotificationsInfo.ProtoReflect.Descriptor instead.
func (*WebNotificationsInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{106}
}

func (x *WebNotificationsInfo) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *WebNotificationsInfo) GetUnreadChats() uint32 {
	if x != nil && x.UnreadChats != nil {
		return *x.UnreadChats
	}
	return 0
}

func (x *WebNotificationsInfo) GetNotifyMessageCount() uint32 {
	if x != nil && x.NotifyMessageCount != nil {
		return *x.NotifyMessageCount
	}
	return 0
}

func (x *WebNotificationsInfo) GetNotifyMessages() []*WebMessageInfo {
	if x != nil {
		return x.NotifyMessages
	}
	return nil
}

type CallLogRecord_ParticipantInfo struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	UserJid       *string                   `protobuf:"bytes,1,opt,name=userJid" json:"userJid,omitempty"`
	CallResult    *CallLogRecord_CallResult `protobuf:"varint,2,opt,name=callResult,enum=proto.CallLogRecord_CallResult" json:"callResult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallLogRecord_ParticipantInfo) Reset() {
	*x = CallLogRecord_ParticipantInfo{}
	mi := &file_WAProto_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallLogRecord_ParticipantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallLogRecord_ParticipantInfo) ProtoMessage() {}

func (x *CallLogRecord_ParticipantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallLogRecord_ParticipantInfo.ProtoReflect.Descriptor instead.
func (*CallLogRecord_ParticipantInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CallLogRecord_ParticipantInfo) GetUserJid() string {
	if x != nil && x.UserJid != nil {
		return *x.UserJid
	}
	return ""
}

func (x *CallLogRecord_ParticipantInfo) GetCallResult() CallLogRecord_CallResult {
	if x != nil && x.CallResult != nil {
		return *x.CallResult
	}
	return CallLogRecord_CONNECTED
}

type CertChain_NoiseCertificate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Details       []byte                 `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertChain_NoiseCertificate) Reset() {
	*x = CertChain_NoiseCertificate{}
	mi := &file_WAProto_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertChain_NoiseCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertChain_NoiseCertificate) ProtoMessage() {}

func (x *CertChain_NoiseCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertChain_NoiseCertificate.ProtoReflect.Descriptor instead.
func (*CertChain_NoiseCertificate) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CertChain_NoiseCertificate) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CertChain_NoiseCertificate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CertChain_NoiseCertificate_Details struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Serial        *uint32                `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	IssuerSerial  *uint32                `protobuf:"varint,2,opt,name=issuerSerial" json:"issuerSerial,omitempty"`
	Key           []byte                 `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	NotBefore     *uint64                `protobuf:"varint,4,opt,name=notBefore" json:"notBefore,omitempty"`
	NotAfter      *uint64                `protobuf:"varint,5,opt,name=notAfter" json:"notAfter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertChain_NoiseCertificate_Details) Reset() {
	*x = CertChain_NoiseCertificate_Details{}
	mi := &file_WAProto_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertChain_NoiseCertificate_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertChain_NoiseCertificate_Details) ProtoMessage() {}

func (x *CertChain_NoiseCertificate_Details) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertChain_NoiseCertificate_Details.ProtoReflect.Descriptor instead.
func (*CertChain_NoiseCertificate_Details) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{16, 0, 0}
}

func (x *CertChain_NoiseCertificate_Details) GetSerial() uint32 {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return 0
}

func (x *CertChain_NoiseCertificate_Details) GetIssuerSerial() uint32 {
	if x != nil && x.IssuerSerial != nil {
		return *x.IssuerSerial
	}
	return 0
}

func (x *CertChain_NoiseCertificate_Details) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CertChain_NoiseCertificate_Details) GetNotBefore() uint64 {
	if x != nil && x.NotBefore != nil {
		return *x.NotBefore
	}
	return 0
}

func (x *CertChain_NoiseCertificate_Details) GetNotAfter() uint64 {
	if x != nil && x.NotAfter != nil {
		return *x.NotAfter
	}
	return 0
}

type ChatRowOpaqueData_DraftMessage struct {
	state               protoimpl.MessageState                              `protogen:"open.v1"`
	Text                *string                                             `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	OmittedUrl          *string                                             `protobuf:"bytes,2,opt,name=omittedUrl" json:"omittedUrl,omitempty"`
	CtwaContextLinkData *ChatRowOpaqueData_DraftMessage_CtwaContextLinkData `protobuf:"bytes,3,opt,name=ctwaContextLinkData" json:"ctwaContextLinkData,omitempty"`
	CtwaContext         *ChatRowOpaqueData_DraftMessage_CtwaContextData     `protobuf:"bytes,4,opt,name=ctwaContext" json:"ctwaContext,omitempty"`
	Timestamp           *int64                                              `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ChatRowOpaqueData_DraftMessage) Reset() {
	*x = ChatRowOpaqueData_DraftMessage{}
	mi := &file_WAProto_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRowOpaqueData_DraftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRowOpaqueData_DraftMessage) ProtoMessage() {}

func (x *ChatRowOpaqueData_DraftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRowOpaqueData_DraftMessage.ProtoReflect.Descriptor instead.
func (*ChatRowOpaqueData_DraftMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ChatRowOpaqueData_DraftMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage) GetOmittedUrl() string {
	if x != nil && x.OmittedUrl != nil {
		return *x.OmittedUrl
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage) GetCtwaContextLinkData() *ChatRowOpaqueData_DraftMessage_CtwaContextLinkData {
	if x != nil {
		return x.CtwaContextLinkData
	}
	return nil
}

func (x *ChatRowOpaqueData_DraftMessage) GetCtwaContext() *ChatRowOpaqueData_DraftMessage_CtwaContextData {
	if x != nil {
		return x.CtwaContext
	}
	return nil
}

func (x *ChatRowOpaqueData_DraftMessage) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type ChatRowOpaqueData_DraftMessage_CtwaContextData struct {
	state            protoimpl.MessageState                                                                  `protogen:"open.v1"`
	ConversionSource *string                                                                                 `protobuf:"bytes,1,opt,name=conversionSource" json:"conversionSource,omitempty"`
	ConversionData   []byte                                                                                  `protobuf:"bytes,2,opt,name=conversionData" json:"conversionData,omitempty"`
	SourceUrl        *string                                                                                 `protobuf:"bytes,3,opt,name=sourceUrl" json:"sourceUrl,omitempty"`
	SourceId         *string                                                                                 `protobuf:"bytes,4,opt,name=sourceId" json:"sourceId,omitempty"`
	SourceType       *string                                                                                 `protobuf:"bytes,5,opt,name=sourceType" json:"sourceType,omitempty"`
	Title            *string                                                                                 `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	Description      *string                                                                                 `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	Thumbnail        *string                                                                                 `protobuf:"bytes,8,opt,name=thumbnail" json:"thumbnail,omitempty"`
	ThumbnailUrl     *string                                                                                 `protobuf:"bytes,9,opt,name=thumbnailUrl" json:"thumbnailUrl,omitempty"`
	MediaType        *ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType `protobuf:"varint,10,opt,name=mediaType,enum=proto.ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType" json:"mediaType,omitempty"`
	MediaUrl         *string                                                                                 `protobuf:"bytes,11,opt,name=mediaUrl" json:"mediaUrl,omitempty"`
	IsSuspiciousLink *bool                                                                                   `protobuf:"varint,12,opt,name=isSuspiciousLink" json:"isSuspiciousLink,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) Reset() {
	*x = ChatRowOpaqueData_DraftMessage_CtwaContextData{}
	mi := &file_WAProto_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRowOpaqueData_DraftMessage_CtwaContextData) ProtoMessage() {}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRowOpaqueData_DraftMessage_CtwaContextData.ProtoReflect.Descriptor instead.
func (*ChatRowOpaqueData_DraftMessage_CtwaContextData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{17, 0, 0}
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetConversionSource() string {
	if x != nil && x.ConversionSource != nil {
		return *x.ConversionSource
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetConversionData() []byte {
	if x != nil {
		return x.ConversionData
	}
	return nil
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetSourceUrl() string {
	if x != nil && x.SourceUrl != nil {
		return *x.SourceUrl
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetSourceId() string {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetSourceType() string {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetThumbnail() string {
	if x != nil && x.Thumbnail != nil {
		return *x.Thumbnail
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetMediaType() ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return ChatRowOpaqueData_DraftMessage_CtwaContextData_NONE
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetMediaUrl() string {
	if x != nil && x.MediaUrl != nil {
		return *x.MediaUrl
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextData) GetIsSuspiciousLink() bool {
	if x != nil && x.IsSuspiciousLink != nil {
		return *x.IsSuspiciousLink
	}
	return false
}

type ChatRowOpaqueData_DraftMessage_CtwaContextLinkData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Context       *string                `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	SourceUrl     *string                `protobuf:"bytes,2,opt,name=sourceUrl" json:"sourceUrl,omitempty"`
	Icebreaker    *string                `protobuf:"bytes,3,opt,name=icebreaker" json:"icebreaker,omitempty"`
	Phone         *string                `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextLinkData) Reset() {
	*x = ChatRowOpaqueData_DraftMessage_CtwaContextLinkData{}
	mi := &file_WAProto_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextLinkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRowOpaqueData_DraftMessage_CtwaContextLinkData) ProtoMessage() {}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextLinkData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRowOpaqueData_DraftMessage_CtwaContextLinkData.ProtoReflect.Descriptor instead.
func (*ChatRowOpaqueData_DraftMessage_CtwaContextLinkData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{17, 0, 1}
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextLinkData) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextLinkData) GetSourceUrl() string {
	if x != nil && x.SourceUrl != nil {
		return *x.SourceUrl
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextLinkData) GetIcebreaker() string {
	if x != nil && x.Icebreaker != nil {
		return *x.Icebreaker
	}
	return ""
}

func (x *ChatRowOpaqueData_DraftMessage_CtwaContextLinkData) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

type ClientPayload_DNSSource struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	DnsMethod     *ClientPayload_DNSSource_DNSResolutionMethod `protobuf:"varint,15,opt,name=dnsMethod,enum=proto.ClientPayload_DNSSource_DNSResolutionMethod" json:"dnsMethod,omitempty"`
	AppCached     *bool                                        `protobuf:"varint,16,opt,name=appCached" json:"appCached,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientPayload_DNSSource) Reset() {
	*x = ClientPayload_DNSSource{}
	mi := &file_WAProto_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPayload_DNSSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPayload_DNSSource) ProtoMessage() {}

func (x *ClientPayload_DNSSource) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPayload_DNSSource.ProtoReflect.Descriptor instead.
func (*ClientPayload_DNSSource) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ClientPayload_DNSSource) GetDnsMethod() ClientPayload_DNSSource_DNSResolutionMethod {
	if x != nil && x.DnsMethod != nil {
		return *x.DnsMethod
	}
	return ClientPayload_DNSSource_SYSTEM
}

func (x *ClientPayload_DNSSource) GetAppCached() bool {
	if x != nil && x.AppCached != nil {
		return *x.AppCached
	}
	return false
}

type ClientPayload_DevicePairingRegistrationData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ERegid        []byte                 `protobuf:"bytes,1,opt,name=eRegid" json:"eRegid,omitempty"`
	EKeytype      []byte                 `protobuf:"bytes,2,opt,name=eKeytype" json:"eKeytype,omitempty"`
	EIdent        []byte                 `protobuf:"bytes,3,opt,name=eIdent" json:"eIdent,omitempty"`
	ESkeyId       []byte                 `protobuf:"bytes,4,opt,name=eSkeyId" json:"eSkeyId,omitempty"`
	ESkeyVal      []byte                 `protobuf:"bytes,5,opt,name=eSkeyVal" json:"eSkeyVal,omitempty"`
	ESkeySig      []byte                 `protobuf:"bytes,6,opt,name=eSkeySig" json:"eSkeySig,omitempty"`
	BuildHash     []byte                 `protobuf:"bytes,7,opt,name=buildHash" json:"buildHash,omitempty"`
	DeviceProps   []byte                 `protobuf:"bytes,8,opt,name=deviceProps" json:"deviceProps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientPayload_DevicePairingRegistrationData) Reset() {
	*x = ClientPayload_DevicePairingRegistrationData{}
	mi := &file_WAProto_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPayload_DevicePairingRegistrationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPayload_DevicePairingRegistrationData) ProtoMessage() {}

func (x *ClientPayload_DevicePairingRegistrationData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPayload_DevicePairingRegistrationData.ProtoReflect.Descriptor instead.
func (*ClientPayload_DevicePairingRegistrationData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 1}
}

func (x *ClientPayload_DevicePairingRegistrationData) GetERegid() []byte {
	if x != nil {
		return x.ERegid
	}
	return nil
}

func (x *ClientPayload_DevicePairingRegistrationData) GetEKeytype() []byte {
	if x != nil {
		return x.EKeytype
	}
	return nil
}

func (x *ClientPayload_DevicePairingRegistrationData) GetEIdent() []byte {
	if x != nil {
		return x.EIdent
	}
	return nil
}

func (x *ClientPayload_DevicePairingRegistrationData) GetESkeyId() []byte {
	if x != nil {
		return x.ESkeyId
	}
	return nil
}

func (x *ClientPayload_DevicePairingRegistrationData) GetESkeyVal() []byte {
	if x != nil {
		return x.ESkeyVal
	}
	return nil
}

func (x *ClientPayload_DevicePairingRegistrationData) GetESkeySig() []byte {
	if x != nil {
		return x.ESkeySig
	}
	return nil
}

func (x *ClientPayload_DevicePairingRegistrationData) GetBuildHash() []byte {
	if x != nil {
		return x.BuildHash
	}
	return nil
}

func (x *ClientPayload_DevicePairingRegistrationData) GetDeviceProps() []byte {
	if x != nil {
		return x.DeviceProps
	}
	return nil
}

type ClientPayload_InteropData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint64                `protobuf:"varint,1,opt,name=accountId" json:"accountId,omitempty"`
	Token         []byte                 `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientPayload_InteropData) Reset() {
	*x = ClientPayload_InteropData{}
	mi := &file_WAProto_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPayload_InteropData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPayload_InteropData) ProtoMessage() {}

func (x *ClientPayload_InteropData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPayload_InteropData.ProtoReflect.Descriptor instead.
func (*ClientPayload_InteropData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 2}
}

func (x *ClientPayload_InteropData) GetAccountId() uint64 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *ClientPayload_InteropData) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type ClientPayload_UserAgent struct {
	state                       protoimpl.MessageState                  `protogen:"open.v1"`
	Platform                    *ClientPayload_UserAgent_Platform       `protobuf:"varint,1,opt,name=platform,enum=proto.ClientPayload_UserAgent_Platform" json:"platform,omitempty"`
	AppVersion                  *ClientPayload_UserAgent_AppVersion     `protobuf:"bytes,2,opt,name=appVersion" json:"appVersion,omitempty"`
	Mcc                         *string                                 `protobuf:"bytes,3,opt,name=mcc" json:"mcc,omitempty"`
	Mnc                         *string                                 `protobuf:"bytes,4,opt,name=mnc" json:"mnc,omitempty"`
	OsVersion                   *string                                 `protobuf:"bytes,5,opt,name=osVersion" json:"osVersion,omitempty"`
	Manufacturer                *string                                 `protobuf:"bytes,6,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Device                      *string                                 `protobuf:"bytes,7,opt,name=device" json:"device,omitempty"`
	OsBuildNumber               *string                                 `protobuf:"bytes,8,opt,name=osBuildNumber" json:"osBuildNumber,omitempty"`
	PhoneId                     *string                                 `protobuf:"bytes,9,opt,name=phoneId" json:"phoneId,omitempty"`
	ReleaseChannel              *ClientPayload_UserAgent_ReleaseChannel `protobuf:"varint,10,opt,name=releaseChannel,enum=proto.ClientPayload_UserAgent_ReleaseChannel" json:"releaseChannel,omitempty"`
	LocaleLanguageIso6391       *string                                 `protobuf:"bytes,11,opt,name=localeLanguageIso6391" json:"localeLanguageIso6391,omitempty"`
	LocaleCountryIso31661Alpha2 *string                                 `protobuf:"bytes,12,opt,name=localeCountryIso31661Alpha2" json:"localeCountryIso31661Alpha2,omitempty"`
	DeviceBoard                 *string                                 `protobuf:"bytes,13,opt,name=deviceBoard" json:"deviceBoard,omitempty"`
	DeviceExpId                 *string                                 `protobuf:"bytes,14,opt,name=deviceExpId" json:"deviceExpId,omitempty"`
	DeviceType                  *ClientPayload_UserAgent_DeviceType     `protobuf:"varint,15,opt,name=deviceType,enum=proto.ClientPayload_UserAgent_DeviceType" json:"deviceType,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *ClientPayload_UserAgent) Reset() {
	*x = ClientPayload_UserAgent{}
	mi := &file_WAProto_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPayload_UserAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPayload_UserAgent) ProtoMessage() {}

func (x *ClientPayload_UserAgent) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPayload_UserAgent.ProtoReflect.Descriptor instead.
func (*ClientPayload_UserAgent) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 3}
}

func (x *ClientPayload_UserAgent) GetPlatform() ClientPayload_UserAgent_Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ClientPayload_UserAgent_ANDROID
}

func (x *ClientPayload_UserAgent) GetAppVersion() *ClientPayload_UserAgent_AppVersion {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

func (x *ClientPayload_UserAgent) GetMcc() string {
	if x != nil && x.Mcc != nil {
		return *x.Mcc
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetMnc() string {
	if x != nil && x.Mnc != nil {
		return *x.Mnc
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetManufacturer() string {
	if x != nil && x.Manufacturer != nil {
		return *x.Manufacturer
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetDevice() string {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetOsBuildNumber() string {
	if x != nil && x.OsBuildNumber != nil {
		return *x.OsBuildNumber
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetPhoneId() string {
	if x != nil && x.PhoneId != nil {
		return *x.PhoneId
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetReleaseChannel() ClientPayload_UserAgent_ReleaseChannel {
	if x != nil && x.ReleaseChannel != nil {
		return *x.ReleaseChannel
	}
	return ClientPayload_UserAgent_RELEASE
}

func (x *ClientPayload_UserAgent) GetLocaleLanguageIso6391() string {
	if x != nil && x.LocaleLanguageIso6391 != nil {
		return *x.LocaleLanguageIso6391
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetLocaleCountryIso31661Alpha2() string {
	if x != nil && x.LocaleCountryIso31661Alpha2 != nil {
		return *x.LocaleCountryIso31661Alpha2
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetDeviceBoard() string {
	if x != nil && x.DeviceBoard != nil {
		return *x.DeviceBoard
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetDeviceExpId() string {
	if x != nil && x.DeviceExpId != nil {
		return *x.DeviceExpId
	}
	return ""
}

func (x *ClientPayload_UserAgent) GetDeviceType() ClientPayload_UserAgent_DeviceType {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ClientPayload_UserAgent_PHONE
}

type ClientPayload_WebInfo struct {
	state          protoimpl.MessageState                `protogen:"open.v1"`
	RefToken       *string                               `protobuf:"bytes,1,opt,name=refToken" json:"refToken,omitempty"`
	Version        *string                               `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	WebdPayload    *ClientPayload_WebInfo_WebdPayload    `protobuf:"bytes,3,opt,name=webdPayload" json:"webdPayload,omitempty"`
	WebSubPlatform *ClientPayload_WebInfo_WebSubPlatform `protobuf:"varint,4,opt,name=webSubPlatform,enum=proto.ClientPayload_WebInfo_WebSubPlatform" json:"webSubPlatform,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClientPayload_WebInfo) Reset() {
	*x = ClientPayload_WebInfo{}
	mi := &file_WAProto_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPayload_WebInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPayload_WebInfo) ProtoMessage() {}

func (x *ClientPayload_WebInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPayload_WebInfo.ProtoReflect.Descriptor instead.
func (*ClientPayload_WebInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 4}
}

func (x *ClientPayload_WebInfo) GetRefToken() string {
	if x != nil && x.RefToken != nil {
		return *x.RefToken
	}
	return ""
}

func (x *ClientPayload_WebInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ClientPayload_WebInfo) GetWebdPayload() *ClientPayload_WebInfo_WebdPayload {
	if x != nil {
		return x.WebdPayload
	}
	return nil
}

func (x *ClientPayload_WebInfo) GetWebSubPlatform() ClientPayload_WebInfo_WebSubPlatform {
	if x != nil && x.WebSubPlatform != nil {
		return *x.WebSubPlatform
	}
	return ClientPayload_WebInfo_WEB_BROWSER
}

type ClientPayload_UserAgent_AppVersion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Primary       *uint32                `protobuf:"varint,1,opt,name=primary" json:"primary,omitempty"`
	Secondary     *uint32                `protobuf:"varint,2,opt,name=secondary" json:"secondary,omitempty"`
	Tertiary      *uint32                `protobuf:"varint,3,opt,name=tertiary" json:"tertiary,omitempty"`
	Quaternary    *uint32                `protobuf:"varint,4,opt,name=quaternary" json:"quaternary,omitempty"`
	Quinary       *uint32                `protobuf:"varint,5,opt,name=quinary" json:"quinary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientPayload_UserAgent_AppVersion) Reset() {
	*x = ClientPayload_UserAgent_AppVersion{}
	mi := &file_WAProto_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPayload_UserAgent_AppVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPayload_UserAgent_AppVersion) ProtoMessage() {}

func (x *ClientPayload_UserAgent_AppVersion) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPayload_UserAgent_AppVersion.ProtoReflect.Descriptor instead.
func (*ClientPayload_UserAgent_AppVersion) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 3, 0}
}

func (x *ClientPayload_UserAgent_AppVersion) GetPrimary() uint32 {
	if x != nil && x.Primary != nil {
		return *x.Primary
	}
	return 0
}

func (x *ClientPayload_UserAgent_AppVersion) GetSecondary() uint32 {
	if x != nil && x.Secondary != nil {
		return *x.Secondary
	}
	return 0
}

func (x *ClientPayload_UserAgent_AppVersion) GetTertiary() uint32 {
	if x != nil && x.Tertiary != nil {
		return *x.Tertiary
	}
	return 0
}

func (x *ClientPayload_UserAgent_AppVersion) GetQuaternary() uint32 {
	if x != nil && x.Quaternary != nil {
		return *x.Quaternary
	}
	return 0
}

func (x *ClientPayload_UserAgent_AppVersion) GetQuinary() uint32 {
	if x != nil && x.Quinary != nil {
		return *x.Quinary
	}
	return 0
}

type ClientPayload_WebInfo_WebdPayload struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	UsesParticipantInKey     *bool                  `protobuf:"varint,1,opt,name=usesParticipantInKey" json:"usesParticipantInKey,omitempty"`
	SupportsStarredMessages  *bool                  `protobuf:"varint,2,opt,name=supportsStarredMessages" json:"supportsStarredMessages,omitempty"`
	SupportsDocumentMessages *bool                  `protobuf:"varint,3,opt,name=supportsDocumentMessages" json:"supportsDocumentMessages,omitempty"`
	SupportsUrlMessages      *bool                  `protobuf:"varint,4,opt,name=supportsUrlMessages" json:"supportsUrlMessages,omitempty"`
	SupportsMediaRetry       *bool                  `protobuf:"varint,5,opt,name=supportsMediaRetry" json:"supportsMediaRetry,omitempty"`
	SupportsE2EImage         *bool                  `protobuf:"varint,6,opt,name=supportsE2EImage" json:"supportsE2EImage,omitempty"`
	SupportsE2EVideo         *bool                  `protobuf:"varint,7,opt,name=supportsE2EVideo" json:"supportsE2EVideo,omitempty"`
	SupportsE2EAudio         *bool                  `protobuf:"varint,8,opt,name=supportsE2EAudio" json:"supportsE2EAudio,omitempty"`
	SupportsE2EDocument      *bool                  `protobuf:"varint,9,opt,name=supportsE2EDocument" json:"supportsE2EDocument,omitempty"`
	DocumentTypes            *string                `protobuf:"bytes,10,opt,name=documentTypes" json:"documentTypes,omitempty"`
	Features                 []byte                 `protobuf:"bytes,11,opt,name=features" json:"features,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ClientPayload_WebInfo_WebdPayload) Reset() {
	*x = ClientPayload_WebInfo_WebdPayload{}
	mi := &file_WAProto_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPayload_WebInfo_WebdPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPayload_WebInfo_WebdPayload) ProtoMessage() {}

func (x *ClientPayload_WebInfo_WebdPayload) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPayload_WebInfo_WebdPayload.ProtoReflect.Descriptor instead.
func (*ClientPayload_WebInfo_WebdPayload) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{18, 4, 0}
}

func (x *ClientPayload_WebInfo_WebdPayload) GetUsesParticipantInKey() bool {
	if x != nil && x.UsesParticipantInKey != nil {
		return *x.UsesParticipantInKey
	}
	return false
}

func (x *ClientPayload_WebInfo_WebdPayload) GetSupportsStarredMessages() bool {
	if x != nil && x.SupportsStarredMessages != nil {
		return *x.SupportsStarredMessages
	}
	return false
}

func (x *ClientPayload_WebInfo_WebdPayload) GetSupportsDocumentMessages() bool {
	if x != nil && x.SupportsDocumentMessages != nil {
		return *x.SupportsDocumentMessages
	}
	return false
}

func (x *ClientPayload_WebInfo_WebdPayload) GetSupportsUrlMessages() bool {
	if x != nil && x.SupportsUrlMessages != nil {
		return *x.SupportsUrlMessages
	}
	return false
}

func (x *ClientPayload_WebInfo_WebdPayload) GetSupportsMediaRetry() bool {
	if x != nil && x.SupportsMediaRetry != nil {
		return *x.SupportsMediaRetry
	}
	return false
}

func (x *ClientPayload_WebInfo_WebdPayload) GetSupportsE2EImage() bool {
	if x != nil && x.SupportsE2EImage != nil {
		return *x.SupportsE2EImage
	}
	return false
}

func (x *ClientPayload_WebInfo_WebdPayload) GetSupportsE2EVideo() bool {
	if x != nil && x.SupportsE2EVideo != nil {
		return *x.SupportsE2EVideo
	}
	return false
}

func (x *ClientPayload_WebInfo_WebdPayload) GetSupportsE2EAudio() bool {
	if x != nil && x.SupportsE2EAudio != nil {
		return *x.SupportsE2EAudio
	}
	return false
}

func (x *ClientPayload_WebInfo_WebdPayload) GetSupportsE2EDocument() bool {
	if x != nil && x.SupportsE2EDocument != nil {
		return *x.SupportsE2EDocument
	}
	return false
}

func (x *ClientPayload_WebInfo_WebdPayload) GetDocumentTypes() string {
	if x != nil && x.DocumentTypes != nil {
		return *x.DocumentTypes
	}
	return ""
}

func (x *ClientPayload_WebInfo_WebdPayload) GetFeatures() []byte {
	if x != nil {
		return x.Features
	}
	return nil
}

type ContextInfo_AdReplyInfo struct {
	state          protoimpl.MessageState             `protogen:"open.v1"`
	AdvertiserName *string                            `protobuf:"bytes,1,opt,name=advertiserName" json:"advertiserName,omitempty"`
	MediaType      *ContextInfo_AdReplyInfo_MediaType `protobuf:"varint,2,opt,name=mediaType,enum=proto.ContextInfo_AdReplyInfo_MediaType" json:"mediaType,omitempty"`
	JpegThumbnail  []byte                             `protobuf:"bytes,16,opt,name=jpegThumbnail" json:"jpegThumbnail,omitempty"`
	Caption        *string                            `protobuf:"bytes,17,opt,name=caption" json:"caption,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ContextInfo_AdReplyInfo) Reset() {
	*x = ContextInfo_AdReplyInfo{}
	mi := &file_WAProto_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextInfo_AdReplyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextInfo_AdReplyInfo) ProtoMessage() {}

func (x *ContextInfo_AdReplyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextInfo_AdReplyInfo.ProtoReflect.Descriptor instead.
func (*ContextInfo_AdReplyInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ContextInfo_AdReplyInfo) GetAdvertiserName() string {
	if x != nil && x.AdvertiserName != nil {
		return *x.AdvertiserName
	}
	return ""
}

func (x *ContextInfo_AdReplyInfo) GetMediaType() ContextInfo_AdReplyInfo_MediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return ContextInfo_AdReplyInfo_NONE
}

func (x *ContextInfo_AdReplyInfo) GetJpegThumbnail() []byte {
	if x != nil {
		return x.JpegThumbnail
	}
	return nil
}

func (x *ContextInfo_AdReplyInfo) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

type ContextInfo_BusinessMessageForwardInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BusinessOwnerJid *string                `protobuf:"bytes,1,opt,name=businessOwnerJid" json:"businessOwnerJid,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ContextInfo_BusinessMessageForwardInfo) Reset() {
	*x = ContextInfo_BusinessMessageForwardInfo{}
	mi := &file_WAProto_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextInfo_BusinessMessageForwardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextInfo_BusinessMessageForwardInfo) ProtoMessage() {}

func (x *ContextInfo_BusinessMessageForwardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextInfo_BusinessMessageForwardInfo.ProtoReflect.Descriptor instead.
func (*ContextInfo_BusinessMessageForwardInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{20, 1}
}

func (x *ContextInfo_BusinessMessageForwardInfo) GetBusinessOwnerJid() string {
	if x != nil && x.BusinessOwnerJid != nil {
		return *x.BusinessOwnerJid
	}
	return ""
}

type ContextInfo_DataSharingContext struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ShowMmDisclosure *bool                  `protobuf:"varint,1,opt,name=showMmDisclosure" json:"showMmDisclosure,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ContextInfo_DataSharingContext) Reset() {
	*x = ContextInfo_DataSharingContext{}
	mi := &file_WAProto_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextInfo_DataSharingContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextInfo_DataSharingContext) ProtoMessage() {}

func (x *ContextInfo_DataSharingContext) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextInfo_DataSharingContext.ProtoReflect.Descriptor instead.
func (*ContextInfo_DataSharingContext) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{20, 2}
}

func (x *ContextInfo_DataSharingContext) GetShowMmDisclosure() bool {
	if x != nil && x.ShowMmDisclosure != nil {
		return *x.ShowMmDisclosure
	}
	return false
}

type ContextInfo_ExternalAdReplyInfo struct {
	state                 protoimpl.MessageState                     `protogen:"open.v1"`
	Title                 *string                                    `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Body                  *string                                    `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	MediaType             *ContextInfo_ExternalAdReplyInfo_MediaType `protobuf:"varint,3,opt,name=mediaType,enum=proto.ContextInfo_ExternalAdReplyInfo_MediaType" json:"mediaType,omitempty"`
	ThumbnailUrl          *string                                    `protobuf:"bytes,4,opt,name=thumbnailUrl" json:"thumbnailUrl,omitempty"`
	MediaUrl              *string                                    `protobuf:"bytes,5,opt,name=mediaUrl" json:"mediaUrl,omitempty"`
	Thumbnail             []byte                                     `protobuf:"bytes,6,opt,name=thumbnail" json:"thumbnail,omitempty"`
	SourceType            *string                                    `protobuf:"bytes,7,opt,name=sourceType" json:"sourceType,omitempty"`
	SourceId              *string                                    `protobuf:"bytes,8,opt,name=sourceId" json:"sourceId,omitempty"`
	SourceUrl             *string                                    `protobuf:"bytes,9,opt,name=sourceUrl" json:"sourceUrl,omitempty"`
	ContainsAutoReply     *bool                                      `protobuf:"varint,10,opt,name=containsAutoReply" json:"containsAutoReply,omitempty"`
	RenderLargerThumbnail *bool                                      `protobuf:"varint,11,opt,name=renderLargerThumbnail" json:"renderLargerThumbnail,omitempty"`
	ShowAdAttribution     *bool                                      `protobuf:"varint,12,opt,name=showAdAttribution" json:"showAdAttribution,omitempty"`
	CtwaClid              *string                                    `protobuf:"bytes,13,opt,name=ctwaClid" json:"ctwaClid,omitempty"`
	Ref                   *string                                    `protobuf:"bytes,14,opt,name=ref" json:"ref,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ContextInfo_ExternalAdReplyInfo) Reset() {
	*x = ContextInfo_ExternalAdReplyInfo{}
	mi := &file_WAProto_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextInfo_ExternalAdReplyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextInfo_ExternalAdReplyInfo) ProtoMessage() {}

func (x *ContextInfo_ExternalAdReplyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextInfo_ExternalAdReplyInfo.ProtoReflect.Descriptor instead.
func (*ContextInfo_ExternalAdReplyInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{20, 3}
}

func (x *ContextInfo_ExternalAdReplyInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ContextInfo_ExternalAdReplyInfo) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *ContextInfo_ExternalAdReplyInfo) GetMediaType() ContextInfo_ExternalAdReplyInfo_MediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return ContextInfo_ExternalAdReplyInfo_NONE
}

func (x *ContextInfo_ExternalAdReplyInfo) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *ContextInfo_ExternalAdReplyInfo) GetMediaUrl() string {
	if x != nil && x.MediaUrl != nil {
		return *x.MediaUrl
	}
	return ""
}

func (x *ContextInfo_ExternalAdReplyInfo) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *ContextInfo_ExternalAdReplyInfo) GetSourceType() string {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return ""
}

func (x *ContextInfo_ExternalAdReplyInfo) GetSourceId() string {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return ""
}

func (x *ContextInfo_ExternalAdReplyInfo) GetSourceUrl() string {
	if x != nil && x.SourceUrl != nil {
		return *x.SourceUrl
	}
	return ""
}

func (x *ContextInfo_ExternalAdReplyInfo) GetContainsAutoReply() bool {
	if x != nil && x.ContainsAutoReply != nil {
		return *x.ContainsAutoReply
	}
	return false
}

func (x *ContextInfo_ExternalAdReplyInfo) GetRenderLargerThumbnail() bool {
	if x != nil && x.RenderLargerThumbnail != nil {
		return *x.RenderLargerThumbnail
	}
	return false
}

func (x *ContextInfo_ExternalAdReplyInfo) GetShowAdAttribution() bool {
	if x != nil && x.ShowAdAttribution != nil {
		return *x.ShowAdAttribution
	}
	return false
}

func (x *ContextInfo_ExternalAdReplyInfo) GetCtwaClid() string {
	if x != nil && x.CtwaClid != nil {
		return *x.CtwaClid
	}
	return ""
}

func (x *ContextInfo_ExternalAdReplyInfo) GetRef() string {
	if x != nil && x.Ref != nil {
		return *x.Ref
	}
	return ""
}

type ContextInfo_ForwardedNewsletterMessageInfo struct {
	state             protoimpl.MessageState                                  `protogen:"open.v1"`
	NewsletterJid     *string                                                 `protobuf:"bytes,1,opt,name=newsletterJid" json:"newsletterJid,omitempty"`
	ServerMessageId   *int32                                                  `protobuf:"varint,2,opt,name=serverMessageId" json:"serverMessageId,omitempty"`
	NewsletterName    *string                                                 `protobuf:"bytes,3,opt,name=newsletterName" json:"newsletterName,omitempty"`
	ContentType       *ContextInfo_ForwardedNewsletterMessageInfo_ContentType `protobuf:"varint,4,opt,name=contentType,enum=proto.ContextInfo_ForwardedNewsletterMessageInfo_ContentType" json:"contentType,omitempty"`
	AccessibilityText *string                                                 `protobuf:"bytes,5,opt,name=accessibilityText" json:"accessibilityText,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ContextInfo_ForwardedNewsletterMessageInfo) Reset() {
	*x = ContextInfo_ForwardedNewsletterMessageInfo{}
	mi := &file_WAProto_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextInfo_ForwardedNewsletterMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextInfo_ForwardedNewsletterMessageInfo) ProtoMessage() {}

func (x *ContextInfo_ForwardedNewsletterMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextInfo_ForwardedNewsletterMessageInfo.ProtoReflect.Descriptor instead.
func (*ContextInfo_ForwardedNewsletterMessageInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{20, 4}
}

func (x *ContextInfo_ForwardedNewsletterMessageInfo) GetNewsletterJid() string {
	if x != nil && x.NewsletterJid != nil {
		return *x.NewsletterJid
	}
	return ""
}

func (x *ContextInfo_ForwardedNewsletterMessageInfo) GetServerMessageId() int32 {
	if x != nil && x.ServerMessageId != nil {
		return *x.ServerMessageId
	}
	return 0
}

func (x *ContextInfo_ForwardedNewsletterMessageInfo) GetNewsletterName() string {
	if x != nil && x.NewsletterName != nil {
		return *x.NewsletterName
	}
	return ""
}

func (x *ContextInfo_ForwardedNewsletterMessageInfo) GetContentType() ContextInfo_ForwardedNewsletterMessageInfo_ContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return ContextInfo_ForwardedNewsletterMessageInfo_UPDATE
}

func (x *ContextInfo_ForwardedNewsletterMessageInfo) GetAccessibilityText() string {
	if x != nil && x.AccessibilityText != nil {
		return *x.AccessibilityText
	}
	return ""
}

type ContextInfo_UTMInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UtmSource     *string                `protobuf:"bytes,1,opt,name=utmSource" json:"utmSource,omitempty"`
	UtmCampaign   *string                `protobuf:"bytes,2,opt,name=utmCampaign" json:"utmCampaign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextInfo_UTMInfo) Reset() {
	*x = ContextInfo_UTMInfo{}
	mi := &file_WAProto_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextInfo_UTMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextInfo_UTMInfo) ProtoMessage() {}

func (x *ContextInfo_UTMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextInfo_UTMInfo.ProtoReflect.Descriptor instead.
func (*ContextInfo_UTMInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{20, 5}
}

func (x *ContextInfo_UTMInfo) GetUtmSource() string {
	if x != nil && x.UtmSource != nil {
		return *x.UtmSource
	}
	return ""
}

func (x *ContextInfo_UTMInfo) GetUtmCampaign() string {
	if x != nil && x.UtmCampaign != nil {
		return *x.UtmCampaign
	}
	return ""
}

type DeviceProps_AppVersion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Primary       *uint32                `protobuf:"varint,1,opt,name=primary" json:"primary,omitempty"`
	Secondary     *uint32                `protobuf:"varint,2,opt,name=secondary" json:"secondary,omitempty"`
	Tertiary      *uint32                `protobuf:"varint,3,opt,name=tertiary" json:"tertiary,omitempty"`
	Quaternary    *uint32                `protobuf:"varint,4,opt,name=quaternary" json:"quaternary,omitempty"`
	Quinary       *uint32                `protobuf:"varint,5,opt,name=quinary" json:"quinary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceProps_AppVersion) Reset() {
	*x = DeviceProps_AppVersion{}
	mi := &file_WAProto_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceProps_AppVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProps_AppVersion) ProtoMessage() {}

func (x *DeviceProps_AppVersion) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProps_AppVersion.ProtoReflect.Descriptor instead.
func (*DeviceProps_AppVersion) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{24, 0}
}

func (x *DeviceProps_AppVersion) GetPrimary() uint32 {
	if x != nil && x.Primary != nil {
		return *x.Primary
	}
	return 0
}

func (x *DeviceProps_AppVersion) GetSecondary() uint32 {
	if x != nil && x.Secondary != nil {
		return *x.Secondary
	}
	return 0
}

func (x *DeviceProps_AppVersion) GetTertiary() uint32 {
	if x != nil && x.Tertiary != nil {
		return *x.Tertiary
	}
	return 0
}

func (x *DeviceProps_AppVersion) GetQuaternary() uint32 {
	if x != nil && x.Quaternary != nil {
		return *x.Quaternary
	}
	return 0
}

func (x *DeviceProps_AppVersion) GetQuinary() uint32 {
	if x != nil && x.Quinary != nil {
		return *x.Quinary
	}
	return 0
}

type DeviceProps_HistorySyncConfig struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	FullSyncDaysLimit              *uint32                `protobuf:"varint,1,opt,name=fullSyncDaysLimit" json:"fullSyncDaysLimit,omitempty"`
	FullSyncSizeMbLimit            *uint32                `protobuf:"varint,2,opt,name=fullSyncSizeMbLimit" json:"fullSyncSizeMbLimit,omitempty"`
	StorageQuotaMb                 *uint32                `protobuf:"varint,3,opt,name=storageQuotaMb" json:"storageQuotaMb,omitempty"`
	InlineInitialPayloadInE2EeMsg  *bool                  `protobuf:"varint,4,opt,name=inlineInitialPayloadInE2EeMsg" json:"inlineInitialPayloadInE2EeMsg,omitempty"`
	RecentSyncDaysLimit            *uint32                `protobuf:"varint,5,opt,name=recentSyncDaysLimit" json:"recentSyncDaysLimit,omitempty"`
	SupportCallLogHistory          *bool                  `protobuf:"varint,6,opt,name=supportCallLogHistory" json:"supportCallLogHistory,omitempty"`
	SupportBotUserAgentChatHistory *bool                  `protobuf:"varint,7,opt,name=supportBotUserAgentChatHistory" json:"supportBotUserAgentChatHistory,omitempty"`
	SupportCagReactionsAndPolls    *bool                  `protobuf:"varint,8,opt,name=supportCagReactionsAndPolls" json:"supportCagReactionsAndPolls,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *DeviceProps_HistorySyncConfig) Reset() {
	*x = DeviceProps_HistorySyncConfig{}
	mi := &file_WAProto_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceProps_HistorySyncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProps_HistorySyncConfig) ProtoMessage() {}

func (x *DeviceProps_HistorySyncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProps_HistorySyncConfig.ProtoReflect.Descriptor instead.
func (*DeviceProps_HistorySyncConfig) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{24, 1}
}

func (x *DeviceProps_HistorySyncConfig) GetFullSyncDaysLimit() uint32 {
	if x != nil && x.FullSyncDaysLimit != nil {
		return *x.FullSyncDaysLimit
	}
	return 0
}

func (x *DeviceProps_HistorySyncConfig) GetFullSyncSizeMbLimit() uint32 {
	if x != nil && x.FullSyncSizeMbLimit != nil {
		return *x.FullSyncSizeMbLimit
	}
	return 0
}

func (x *DeviceProps_HistorySyncConfig) GetStorageQuotaMb() uint32 {
	if x != nil && x.StorageQuotaMb != nil {
		return *x.StorageQuotaMb
	}
	return 0
}

func (x *DeviceProps_HistorySyncConfig) GetInlineInitialPayloadInE2EeMsg() bool {
	if x != nil && x.InlineInitialPayloadInE2EeMsg != nil {
		return *x.InlineInitialPayloadInE2EeMsg
	}
	return false
}

func (x *DeviceProps_HistorySyncConfig) GetRecentSyncDaysLimit() uint32 {
	if x != nil && x.RecentSyncDaysLimit != nil {
		return *x.RecentSyncDaysLimit
	}
	return 0
}

func (x *DeviceProps_HistorySyncConfig) GetSupportCallLogHistory() bool {
	if x != nil && x.SupportCallLogHistory != nil {
		return *x.SupportCallLogHistory
	}
	return false
}

func (x *DeviceProps_HistorySyncConfig) GetSupportBotUserAgentChatHistory() bool {
	if x != nil && x.SupportBotUserAgentChatHistory != nil {
		return *x.SupportBotUserAgentChatHistory
	}
	return false
}

func (x *DeviceProps_HistorySyncConfig) GetSupportCagReactionsAndPolls() bool {
	if x != nil && x.SupportCagReactionsAndPolls != nil {
		return *x.SupportCagReactionsAndPolls
	}
	return false
}

type HandshakeMessage_ClientFinish struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Static        []byte                 `protobuf:"bytes,1,opt,name=static" json:"static,omitempty"`
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandshakeMessage_ClientFinish) Reset() {
	*x = HandshakeMessage_ClientFinish{}
	mi := &file_WAProto_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandshakeMessage_ClientFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeMessage_ClientFinish) ProtoMessage() {}

func (x *HandshakeMessage_ClientFinish) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeMessage_ClientFinish.ProtoReflect.Descriptor instead.
func (*HandshakeMessage_ClientFinish) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{33, 0}
}

func (x *HandshakeMessage_ClientFinish) GetStatic() []byte {
	if x != nil {
		return x.Static
	}
	return nil
}

func (x *HandshakeMessage_ClientFinish) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type HandshakeMessage_ClientHello struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ephemeral     []byte                 `protobuf:"bytes,1,opt,name=ephemeral" json:"ephemeral,omitempty"`
	Static        []byte                 `protobuf:"bytes,2,opt,name=static" json:"static,omitempty"`
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandshakeMessage_ClientHello) Reset() {
	*x = HandshakeMessage_ClientHello{}
	mi := &file_WAProto_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandshakeMessage_ClientHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeMessage_ClientHello) ProtoMessage() {}

func (x *HandshakeMessage_ClientHello) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeMessage_ClientHello.ProtoReflect.Descriptor instead.
func (*HandshakeMessage_ClientHello) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{33, 1}
}

func (x *HandshakeMessage_ClientHello) GetEphemeral() []byte {
	if x != nil {
		return x.Ephemeral
	}
	return nil
}

func (x *HandshakeMessage_ClientHello) GetStatic() []byte {
	if x != nil {
		return x.Static
	}
	return nil
}

func (x *HandshakeMessage_ClientHello) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type HandshakeMessage_ServerHello struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ephemeral     []byte                 `protobuf:"bytes,1,opt,name=ephemeral" json:"ephemeral,omitempty"`
	Static        []byte                 `protobuf:"bytes,2,opt,name=static" json:"static,omitempty"`
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandshakeMessage_ServerHello) Reset() {
	*x = HandshakeMessage_ServerHello{}
	mi := &file_WAProto_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandshakeMessage_ServerHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeMessage_ServerHello) ProtoMessage() {}

func (x *HandshakeMessage_ServerHello) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeMessage_ServerHello.ProtoReflect.Descriptor instead.
func (*HandshakeMessage_ServerHello) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{33, 2}
}

func (x *HandshakeMessage_ServerHello) GetEphemeral() []byte {
	if x != nil {
		return x.Ephemeral
	}
	return nil
}

func (x *HandshakeMessage_ServerHello) GetStatic() []byte {
	if x != nil {
		return x.Static
	}
	return nil
}

func (x *HandshakeMessage_ServerHello) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type HydratedTemplateButton_HydratedCallButton struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayText   *string                `protobuf:"bytes,1,opt,name=displayText" json:"displayText,omitempty"`
	PhoneNumber   *string                `protobuf:"bytes,2,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HydratedTemplateButton_HydratedCallButton) Reset() {
	*x = HydratedTemplateButton_HydratedCallButton{}
	mi := &file_WAProto_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HydratedTemplateButton_HydratedCallButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedTemplateButton_HydratedCallButton) ProtoMessage() {}

func (x *HydratedTemplateButton_HydratedCallButton) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedTemplateButton_HydratedCallButton.ProtoReflect.Descriptor instead.
func (*HydratedTemplateButton_HydratedCallButton) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{36, 0}
}

func (x *HydratedTemplateButton_HydratedCallButton) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

func (x *HydratedTemplateButton_HydratedCallButton) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

type HydratedTemplateButton_HydratedQuickReplyButton struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayText   *string                `protobuf:"bytes,1,opt,name=displayText" json:"displayText,omitempty"`
	Id            *string                `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HydratedTemplateButton_HydratedQuickReplyButton) Reset() {
	*x = HydratedTemplateButton_HydratedQuickReplyButton{}
	mi := &file_WAProto_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HydratedTemplateButton_HydratedQuickReplyButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedTemplateButton_HydratedQuickReplyButton) ProtoMessage() {}

func (x *HydratedTemplateButton_HydratedQuickReplyButton) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedTemplateButton_HydratedQuickReplyButton.ProtoReflect.Descriptor instead.
func (*HydratedTemplateButton_HydratedQuickReplyButton) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{36, 1}
}

func (x *HydratedTemplateButton_HydratedQuickReplyButton) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

func (x *HydratedTemplateButton_HydratedQuickReplyButton) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type HydratedTemplateButton_HydratedURLButton struct {
	state               protoimpl.MessageState                                            `protogen:"open.v1"`
	DisplayText         *string                                                           `protobuf:"bytes,1,opt,name=displayText" json:"displayText,omitempty"`
	Url                 *string                                                           `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	ConsentedUsersUrl   *string                                                           `protobuf:"bytes,3,opt,name=consentedUsersUrl" json:"consentedUsersUrl,omitempty"`
	WebviewPresentation *HydratedTemplateButton_HydratedURLButton_WebviewPresentationType `protobuf:"varint,4,opt,name=webviewPresentation,enum=proto.HydratedTemplateButton_HydratedURLButton_WebviewPresentationType" json:"webviewPresentation,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HydratedTemplateButton_HydratedURLButton) Reset() {
	*x = HydratedTemplateButton_HydratedURLButton{}
	mi := &file_WAProto_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HydratedTemplateButton_HydratedURLButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedTemplateButton_HydratedURLButton) ProtoMessage() {}

func (x *HydratedTemplateButton_HydratedURLButton) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedTemplateButton_HydratedURLButton.ProtoReflect.Descriptor instead.
func (*HydratedTemplateButton_HydratedURLButton) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{36, 2}
}

func (x *HydratedTemplateButton_HydratedURLButton) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

func (x *HydratedTemplateButton_HydratedURLButton) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *HydratedTemplateButton_HydratedURLButton) GetConsentedUsersUrl() string {
	if x != nil && x.ConsentedUsersUrl != nil {
		return *x.ConsentedUsersUrl
	}
	return ""
}

func (x *HydratedTemplateButton_HydratedURLButton) GetWebviewPresentation() HydratedTemplateButton_HydratedURLButton_WebviewPresentationType {
	if x != nil && x.WebviewPresentation != nil {
		return *x.WebviewPresentation
	}
	return HydratedTemplateButton_HydratedURLButton_FULL
}

type MediaEntry_DownloadableThumbnail struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FileSha256        []byte                 `protobuf:"bytes,1,opt,name=fileSha256" json:"fileSha256,omitempty"`
	FileEncSha256     []byte                 `protobuf:"bytes,2,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	DirectPath        *string                `protobuf:"bytes,3,opt,name=directPath" json:"directPath,omitempty"`
	MediaKey          []byte                 `protobuf:"bytes,4,opt,name=mediaKey" json:"mediaKey,omitempty"`
	MediaKeyTimestamp *int64                 `protobuf:"varint,5,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	ObjectId          *string                `protobuf:"bytes,6,opt,name=objectId" json:"objectId,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MediaEntry_DownloadableThumbnail) Reset() {
	*x = MediaEntry_DownloadableThumbnail{}
	mi := &file_WAProto_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaEntry_DownloadableThumbnail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaEntry_DownloadableThumbnail) ProtoMessage() {}

func (x *MediaEntry_DownloadableThumbnail) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaEntry_DownloadableThumbnail.ProtoReflect.Descriptor instead.
func (*MediaEntry_DownloadableThumbnail) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{45, 0}
}

func (x *MediaEntry_DownloadableThumbnail) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *MediaEntry_DownloadableThumbnail) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *MediaEntry_DownloadableThumbnail) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *MediaEntry_DownloadableThumbnail) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *MediaEntry_DownloadableThumbnail) GetMediaKeyTimestamp() int64 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *MediaEntry_DownloadableThumbnail) GetObjectId() string {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return ""
}

type MediaEntry_ProgressiveJpegDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScanLengths   []int64                `protobuf:"varint,1,rep,name=scanLengths" json:"scanLengths,omitempty"`
	Sidecar       []byte                 `protobuf:"bytes,2,opt,name=sidecar" json:"sidecar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaEntry_ProgressiveJpegDetails) Reset() {
	*x = MediaEntry_ProgressiveJpegDetails{}
	mi := &file_WAProto_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaEntry_ProgressiveJpegDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaEntry_ProgressiveJpegDetails) ProtoMessage() {}

func (x *MediaEntry_ProgressiveJpegDetails) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaEntry_ProgressiveJpegDetails.ProtoReflect.Descriptor instead.
func (*MediaEntry_ProgressiveJpegDetails) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{45, 1}
}

func (x *MediaEntry_ProgressiveJpegDetails) GetScanLengths() []int64 {
	if x != nil {
		return x.ScanLengths
	}
	return nil
}

func (x *MediaEntry_ProgressiveJpegDetails) GetSidecar() []byte {
	if x != nil {
		return x.Sidecar
	}
	return nil
}

type Message_AppStateFatalExceptionNotification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CollectionNames []string               `protobuf:"bytes,1,rep,name=collectionNames" json:"collectionNames,omitempty"`
	Timestamp       *int64                 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Message_AppStateFatalExceptionNotification) Reset() {
	*x = Message_AppStateFatalExceptionNotification{}
	mi := &file_WAProto_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_AppStateFatalExceptionNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_AppStateFatalExceptionNotification) ProtoMessage() {}

func (x *Message_AppStateFatalExceptionNotification) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_AppStateFatalExceptionNotification.ProtoReflect.Descriptor instead.
func (*Message_AppStateFatalExceptionNotification) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 0}
}

func (x *Message_AppStateFatalExceptionNotification) GetCollectionNames() []string {
	if x != nil {
		return x.CollectionNames
	}
	return nil
}

func (x *Message_AppStateFatalExceptionNotification) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type Message_AppStateSyncKey struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	KeyId         *Message_AppStateSyncKeyId   `protobuf:"bytes,1,opt,name=keyId" json:"keyId,omitempty"`
	KeyData       *Message_AppStateSyncKeyData `protobuf:"bytes,2,opt,name=keyData" json:"keyData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_AppStateSyncKey) Reset() {
	*x = Message_AppStateSyncKey{}
	mi := &file_WAProto_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_AppStateSyncKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_AppStateSyncKey) ProtoMessage() {}

func (x *Message_AppStateSyncKey) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_AppStateSyncKey.ProtoReflect.Descriptor instead.
func (*Message_AppStateSyncKey) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 1}
}

func (x *Message_AppStateSyncKey) GetKeyId() *Message_AppStateSyncKeyId {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *Message_AppStateSyncKey) GetKeyData() *Message_AppStateSyncKeyData {
	if x != nil {
		return x.KeyData
	}
	return nil
}

type Message_AppStateSyncKeyData struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	KeyData       []byte                              `protobuf:"bytes,1,opt,name=keyData" json:"keyData,omitempty"`
	Fingerprint   *Message_AppStateSyncKeyFingerprint `protobuf:"bytes,2,opt,name=fingerprint" json:"fingerprint,omitempty"`
	Timestamp     *int64                              `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_AppStateSyncKeyData) Reset() {
	*x = Message_AppStateSyncKeyData{}
	mi := &file_WAProto_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_AppStateSyncKeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_AppStateSyncKeyData) ProtoMessage() {}

func (x *Message_AppStateSyncKeyData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_AppStateSyncKeyData.ProtoReflect.Descriptor instead.
func (*Message_AppStateSyncKeyData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 2}
}

func (x *Message_AppStateSyncKeyData) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *Message_AppStateSyncKeyData) GetFingerprint() *Message_AppStateSyncKeyFingerprint {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

func (x *Message_AppStateSyncKeyData) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type Message_AppStateSyncKeyFingerprint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawId         *uint32                `protobuf:"varint,1,opt,name=rawId" json:"rawId,omitempty"`
	CurrentIndex  *uint32                `protobuf:"varint,2,opt,name=currentIndex" json:"currentIndex,omitempty"`
	DeviceIndexes []uint32               `protobuf:"varint,3,rep,packed,name=deviceIndexes" json:"deviceIndexes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_AppStateSyncKeyFingerprint) Reset() {
	*x = Message_AppStateSyncKeyFingerprint{}
	mi := &file_WAProto_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_AppStateSyncKeyFingerprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_AppStateSyncKeyFingerprint) ProtoMessage() {}

func (x *Message_AppStateSyncKeyFingerprint) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_AppStateSyncKeyFingerprint.ProtoReflect.Descriptor instead.
func (*Message_AppStateSyncKeyFingerprint) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 3}
}

func (x *Message_AppStateSyncKeyFingerprint) GetRawId() uint32 {
	if x != nil && x.RawId != nil {
		return *x.RawId
	}
	return 0
}

func (x *Message_AppStateSyncKeyFingerprint) GetCurrentIndex() uint32 {
	if x != nil && x.CurrentIndex != nil {
		return *x.CurrentIndex
	}
	return 0
}

func (x *Message_AppStateSyncKeyFingerprint) GetDeviceIndexes() []uint32 {
	if x != nil {
		return x.DeviceIndexes
	}
	return nil
}

type Message_AppStateSyncKeyId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyId         []byte                 `protobuf:"bytes,1,opt,name=keyId" json:"keyId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_AppStateSyncKeyId) Reset() {
	*x = Message_AppStateSyncKeyId{}
	mi := &file_WAProto_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_AppStateSyncKeyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_AppStateSyncKeyId) ProtoMessage() {}

func (x *Message_AppStateSyncKeyId) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_AppStateSyncKeyId.ProtoReflect.Descriptor instead.
func (*Message_AppStateSyncKeyId) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 4}
}

func (x *Message_AppStateSyncKeyId) GetKeyId() []byte {
	if x != nil {
		return x.KeyId
	}
	return nil
}

type Message_AppStateSyncKeyRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	KeyIds        []*Message_AppStateSyncKeyId `protobuf:"bytes,1,rep,name=keyIds" json:"keyIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_AppStateSyncKeyRequest) Reset() {
	*x = Message_AppStateSyncKeyRequest{}
	mi := &file_WAProto_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_AppStateSyncKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_AppStateSyncKeyRequest) ProtoMessage() {}

func (x *Message_AppStateSyncKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_AppStateSyncKeyRequest.ProtoReflect.Descriptor instead.
func (*Message_AppStateSyncKeyRequest) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 5}
}

func (x *Message_AppStateSyncKeyRequest) GetKeyIds() []*Message_AppStateSyncKeyId {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

type Message_AppStateSyncKeyShare struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Keys          []*Message_AppStateSyncKey `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_AppStateSyncKeyShare) Reset() {
	*x = Message_AppStateSyncKeyShare{}
	mi := &file_WAProto_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_AppStateSyncKeyShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_AppStateSyncKeyShare) ProtoMessage() {}

func (x *Message_AppStateSyncKeyShare) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_AppStateSyncKeyShare.ProtoReflect.Descriptor instead.
func (*Message_AppStateSyncKeyShare) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 6}
}

func (x *Message_AppStateSyncKeyShare) GetKeys() []*Message_AppStateSyncKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Message_AudioMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Url               *string                `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Mimetype          *string                `protobuf:"bytes,2,opt,name=mimetype" json:"mimetype,omitempty"`
	FileSha256        []byte                 `protobuf:"bytes,3,opt,name=fileSha256" json:"fileSha256,omitempty"`
	FileLength        *uint64                `protobuf:"varint,4,opt,name=fileLength" json:"fileLength,omitempty"`
	Seconds           *uint32                `protobuf:"varint,5,opt,name=seconds" json:"seconds,omitempty"`
	Ptt               *bool                  `protobuf:"varint,6,opt,name=ptt" json:"ptt,omitempty"`
	MediaKey          []byte                 `protobuf:"bytes,7,opt,name=mediaKey" json:"mediaKey,omitempty"`
	FileEncSha256     []byte                 `protobuf:"bytes,8,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	DirectPath        *string                `protobuf:"bytes,9,opt,name=directPath" json:"directPath,omitempty"`
	MediaKeyTimestamp *int64                 `protobuf:"varint,10,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	ContextInfo       *ContextInfo           `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	StreamingSidecar  []byte                 `protobuf:"bytes,18,opt,name=streamingSidecar" json:"streamingSidecar,omitempty"`
	Waveform          []byte                 `protobuf:"bytes,19,opt,name=waveform" json:"waveform,omitempty"`
	BackgroundArgb    *uint32                `protobuf:"fixed32,20,opt,name=backgroundArgb" json:"backgroundArgb,omitempty"`
	ViewOnce          *bool                  `protobuf:"varint,21,opt,name=viewOnce" json:"viewOnce,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Message_AudioMessage) Reset() {
	*x = Message_AudioMessage{}
	mi := &file_WAProto_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_AudioMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_AudioMessage) ProtoMessage() {}

func (x *Message_AudioMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_AudioMessage.ProtoReflect.Descriptor instead.
func (*Message_AudioMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 7}
}

func (x *Message_AudioMessage) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Message_AudioMessage) GetMimetype() string {
	if x != nil && x.Mimetype != nil {
		return *x.Mimetype
	}
	return ""
}

func (x *Message_AudioMessage) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *Message_AudioMessage) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *Message_AudioMessage) GetSeconds() uint32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *Message_AudioMessage) GetPtt() bool {
	if x != nil && x.Ptt != nil {
		return *x.Ptt
	}
	return false
}

func (x *Message_AudioMessage) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Message_AudioMessage) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *Message_AudioMessage) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Message_AudioMessage) GetMediaKeyTimestamp() int64 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *Message_AudioMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_AudioMessage) GetStreamingSidecar() []byte {
	if x != nil {
		return x.StreamingSidecar
	}
	return nil
}

func (x *Message_AudioMessage) GetWaveform() []byte {
	if x != nil {
		return x.Waveform
	}
	return nil
}

func (x *Message_AudioMessage) GetBackgroundArgb() uint32 {
	if x != nil && x.BackgroundArgb != nil {
		return *x.BackgroundArgb
	}
	return 0
}

func (x *Message_AudioMessage) GetViewOnce() bool {
	if x != nil && x.ViewOnce != nil {
		return *x.ViewOnce
	}
	return false
}

type Message_BCallMessage struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	SessionId     *string                         `protobuf:"bytes,1,opt,name=sessionId" json:"sessionId,omitempty"`
	MediaType     *Message_BCallMessage_MediaType `protobuf:"varint,2,opt,name=mediaType,enum=proto.Message_BCallMessage_MediaType" json:"mediaType,omitempty"`
	MasterKey     []byte                          `protobuf:"bytes,3,opt,name=masterKey" json:"masterKey,omitempty"`
	Caption       *string                         `protobuf:"bytes,4,opt,name=caption" json:"caption,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_BCallMessage) Reset() {
	*x = Message_BCallMessage{}
	mi := &file_WAProto_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_BCallMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_BCallMessage) ProtoMessage() {}

func (x *Message_BCallMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_BCallMessage.ProtoReflect.Descriptor instead.
func (*Message_BCallMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 8}
}

func (x *Message_BCallMessage) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *Message_BCallMessage) GetMediaType() Message_BCallMessage_MediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return Message_BCallMessage_UNKNOWN
}

func (x *Message_BCallMessage) GetMasterKey() []byte {
	if x != nil {
		return x.MasterKey
	}
	return nil
}

func (x *Message_BCallMessage) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

type Message_BotFeedbackMessage struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	MessageKey    *MessageKey                                 `protobuf:"bytes,1,opt,name=messageKey" json:"messageKey,omitempty"`
	Kind          *Message_BotFeedbackMessage_BotFeedbackKind `protobuf:"varint,2,opt,name=kind,enum=proto.Message_BotFeedbackMessage_BotFeedbackKind" json:"kind,omitempty"`
	Text          *string                                     `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	KindNegative  *uint64                                     `protobuf:"varint,4,opt,name=kindNegative" json:"kindNegative,omitempty"`
	KindPositive  *uint64                                     `protobuf:"varint,5,opt,name=kindPositive" json:"kindPositive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_BotFeedbackMessage) Reset() {
	*x = Message_BotFeedbackMessage{}
	mi := &file_WAProto_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_BotFeedbackMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_BotFeedbackMessage) ProtoMessage() {}

func (x *Message_BotFeedbackMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_BotFeedbackMessage.ProtoReflect.Descriptor instead.
func (*Message_BotFeedbackMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 9}
}

func (x *Message_BotFeedbackMessage) GetMessageKey() *MessageKey {
	if x != nil {
		return x.MessageKey
	}
	return nil
}

func (x *Message_BotFeedbackMessage) GetKind() Message_BotFeedbackMessage_BotFeedbackKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Message_BotFeedbackMessage_BOT_FEEDBACK_POSITIVE
}

func (x *Message_BotFeedbackMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Message_BotFeedbackMessage) GetKindNegative() uint64 {
	if x != nil && x.KindNegative != nil {
		return *x.KindNegative
	}
	return 0
}

func (x *Message_BotFeedbackMessage) GetKindPositive() uint64 {
	if x != nil && x.KindPositive != nil {
		return *x.KindPositive
	}
	return 0
}

type Message_ButtonsMessage struct {
	state       protoimpl.MessageState             `protogen:"open.v1"`
	ContentText *string                            `protobuf:"bytes,6,opt,name=contentText" json:"contentText,omitempty"`
	FooterText  *string                            `protobuf:"bytes,7,opt,name=footerText" json:"footerText,omitempty"`
	ContextInfo *ContextInfo                       `protobuf:"bytes,8,opt,name=contextInfo" json:"contextInfo,omitempty"`
	Buttons     []*Message_ButtonsMessage_Button   `protobuf:"bytes,9,rep,name=buttons" json:"buttons,omitempty"`
	HeaderType  *Message_ButtonsMessage_HeaderType `protobuf:"varint,10,opt,name=headerType,enum=proto.Message_ButtonsMessage_HeaderType" json:"headerType,omitempty"`
	// Types that are valid to be assigned to Header:
	//
	//	*Message_ButtonsMessage_Text
	//	*Message_ButtonsMessage_DocumentMessage
	//	*Message_ButtonsMessage_ImageMessage
	//	*Message_ButtonsMessage_VideoMessage
	//	*Message_ButtonsMessage_LocationMessage
	Header        isMessage_ButtonsMessage_Header `protobuf_oneof:"header"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ButtonsMessage) Reset() {
	*x = Message_ButtonsMessage{}
	mi := &file_WAProto_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ButtonsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ButtonsMessage) ProtoMessage() {}

func (x *Message_ButtonsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ButtonsMessage.ProtoReflect.Descriptor instead.
func (*Message_ButtonsMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 10}
}

func (x *Message_ButtonsMessage) GetContentText() string {
	if x != nil && x.ContentText != nil {
		return *x.ContentText
	}
	return ""
}

func (x *Message_ButtonsMessage) GetFooterText() string {
	if x != nil && x.FooterText != nil {
		return *x.FooterText
	}
	return ""
}

func (x *Message_ButtonsMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_ButtonsMessage) GetButtons() []*Message_ButtonsMessage_Button {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *Message_ButtonsMessage) GetHeaderType() Message_ButtonsMessage_HeaderType {
	if x != nil && x.HeaderType != nil {
		return *x.HeaderType
	}
	return Message_ButtonsMessage_UNKNOWN
}

func (x *Message_ButtonsMessage) GetHeader() isMessage_ButtonsMessage_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Message_ButtonsMessage) GetText() string {
	if x != nil {
		if x, ok := x.Header.(*Message_ButtonsMessage_Text); ok {
			return x.Text
		}
	}
	return ""
}

func (x *Message_ButtonsMessage) GetDocumentMessage() *Message_DocumentMessage {
	if x != nil {
		if x, ok := x.Header.(*Message_ButtonsMessage_DocumentMessage); ok {
			return x.DocumentMessage
		}
	}
	return nil
}

func (x *Message_ButtonsMessage) GetImageMessage() *Message_ImageMessage {
	if x != nil {
		if x, ok := x.Header.(*Message_ButtonsMessage_ImageMessage); ok {
			return x.ImageMessage
		}
	}
	return nil
}

func (x *Message_ButtonsMessage) GetVideoMessage() *Message_VideoMessage {
	if x != nil {
		if x, ok := x.Header.(*Message_ButtonsMessage_VideoMessage); ok {
			return x.VideoMessage
		}
	}
	return nil
}

func (x *Message_ButtonsMessage) GetLocationMessage() *Message_LocationMessage {
	if x != nil {
		if x, ok := x.Header.(*Message_ButtonsMessage_LocationMessage); ok {
			return x.LocationMessage
		}
	}
	return nil
}

type isMessage_ButtonsMessage_Header interface {
	isMessage_ButtonsMessage_Header()
}

type Message_ButtonsMessage_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,oneof"`
}

type Message_ButtonsMessage_DocumentMessage struct {
	DocumentMessage *Message_DocumentMessage `protobuf:"bytes,2,opt,name=documentMessage,oneof"`
}

type Message_ButtonsMessage_ImageMessage struct {
	ImageMessage *Message_ImageMessage `protobuf:"bytes,3,opt,name=imageMessage,oneof"`
}

type Message_ButtonsMessage_VideoMessage struct {
	VideoMessage *Message_VideoMessage `protobuf:"bytes,4,opt,name=videoMessage,oneof"`
}

type Message_ButtonsMessage_LocationMessage struct {
	LocationMessage *Message_LocationMessage `protobuf:"bytes,5,opt,name=locationMessage,oneof"`
}

func (*Message_ButtonsMessage_Text) isMessage_ButtonsMessage_Header() {}

func (*Message_ButtonsMessage_DocumentMessage) isMessage_ButtonsMessage_Header() {}

func (*Message_ButtonsMessage_ImageMessage) isMessage_ButtonsMessage_Header() {}

func (*Message_ButtonsMessage_VideoMessage) isMessage_ButtonsMessage_Header() {}

func (*Message_ButtonsMessage_LocationMessage) isMessage_ButtonsMessage_Header() {}

type Message_ButtonsResponseMessage struct {
	state            protoimpl.MessageState               `protogen:"open.v1"`
	SelectedButtonId *string                              `protobuf:"bytes,1,opt,name=selectedButtonId" json:"selectedButtonId,omitempty"`
	ContextInfo      *ContextInfo                         `protobuf:"bytes,3,opt,name=contextInfo" json:"contextInfo,omitempty"`
	Type             *Message_ButtonsResponseMessage_Type `protobuf:"varint,4,opt,name=type,enum=proto.Message_ButtonsResponseMessage_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*Message_ButtonsResponseMessage_SelectedDisplayText
	Response      isMessage_ButtonsResponseMessage_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ButtonsResponseMessage) Reset() {
	*x = Message_ButtonsResponseMessage{}
	mi := &file_WAProto_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ButtonsResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ButtonsResponseMessage) ProtoMessage() {}

func (x *Message_ButtonsResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ButtonsResponseMessage.ProtoReflect.Descriptor instead.
func (*Message_ButtonsResponseMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 11}
}

func (x *Message_ButtonsResponseMessage) GetSelectedButtonId() string {
	if x != nil && x.SelectedButtonId != nil {
		return *x.SelectedButtonId
	}
	return ""
}

func (x *Message_ButtonsResponseMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_ButtonsResponseMessage) GetType() Message_ButtonsResponseMessage_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Message_ButtonsResponseMessage_UNKNOWN
}

func (x *Message_ButtonsResponseMessage) GetResponse() isMessage_ButtonsResponseMessage_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Message_ButtonsResponseMessage) GetSelectedDisplayText() string {
	if x != nil {
		if x, ok := x.Response.(*Message_ButtonsResponseMessage_SelectedDisplayText); ok {
			return x.SelectedDisplayText
		}
	}
	return ""
}

type isMessage_ButtonsResponseMessage_Response interface {
	isMessage_ButtonsResponseMessage_Response()
}

type Message_ButtonsResponseMessage_SelectedDisplayText struct {
	SelectedDisplayText string `protobuf:"bytes,2,opt,name=selectedDisplayText,oneof"`
}

func (*Message_ButtonsResponseMessage_SelectedDisplayText) isMessage_ButtonsResponseMessage_Response() {
}

type Message_Call struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CallKey                []byte                 `protobuf:"bytes,1,opt,name=callKey" json:"callKey,omitempty"`
	ConversionSource       *string                `protobuf:"bytes,2,opt,name=conversionSource" json:"conversionSource,omitempty"`
	ConversionData         []byte                 `protobuf:"bytes,3,opt,name=conversionData" json:"conversionData,omitempty"`
	ConversionDelaySeconds *uint32                `protobuf:"varint,4,opt,name=conversionDelaySeconds" json:"conversionDelaySeconds,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Message_Call) Reset() {
	*x = Message_Call{}
	mi := &file_WAProto_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Call) ProtoMessage() {}

func (x *Message_Call) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Call.ProtoReflect.Descriptor instead.
func (*Message_Call) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 12}
}

func (x *Message_Call) GetCallKey() []byte {
	if x != nil {
		return x.CallKey
	}
	return nil
}

func (x *Message_Call) GetConversionSource() string {
	if x != nil && x.ConversionSource != nil {
		return *x.ConversionSource
	}
	return ""
}

func (x *Message_Call) GetConversionData() []byte {
	if x != nil {
		return x.ConversionData
	}
	return nil
}

func (x *Message_Call) GetConversionDelaySeconds() uint32 {
	if x != nil && x.ConversionDelaySeconds != nil {
		return *x.ConversionDelaySeconds
	}
	return 0
}

type Message_CallLogMessage struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	IsVideo       *bool                                     `protobuf:"varint,1,opt,name=isVideo" json:"isVideo,omitempty"`
	CallOutcome   *Message_CallLogMessage_CallOutcome       `protobuf:"varint,2,opt,name=callOutcome,enum=proto.Message_CallLogMessage_CallOutcome" json:"callOutcome,omitempty"`
	DurationSecs  *int64                                    `protobuf:"varint,3,opt,name=durationSecs" json:"durationSecs,omitempty"`
	CallType      *Message_CallLogMessage_CallType          `protobuf:"varint,4,opt,name=callType,enum=proto.Message_CallLogMessage_CallType" json:"callType,omitempty"`
	Participants  []*Message_CallLogMessage_CallParticipant `protobuf:"bytes,5,rep,name=participants" json:"participants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_CallLogMessage) Reset() {
	*x = Message_CallLogMessage{}
	mi := &file_WAProto_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_CallLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_CallLogMessage) ProtoMessage() {}

func (x *Message_CallLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_CallLogMessage.ProtoReflect.Descriptor instead.
func (*Message_CallLogMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 13}
}

func (x *Message_CallLogMessage) GetIsVideo() bool {
	if x != nil && x.IsVideo != nil {
		return *x.IsVideo
	}
	return false
}

func (x *Message_CallLogMessage) GetCallOutcome() Message_CallLogMessage_CallOutcome {
	if x != nil && x.CallOutcome != nil {
		return *x.CallOutcome
	}
	return Message_CallLogMessage_CONNECTED
}

func (x *Message_CallLogMessage) GetDurationSecs() int64 {
	if x != nil && x.DurationSecs != nil {
		return *x.DurationSecs
	}
	return 0
}

func (x *Message_CallLogMessage) GetCallType() Message_CallLogMessage_CallType {
	if x != nil && x.CallType != nil {
		return *x.CallType
	}
	return Message_CallLogMessage_REGULAR
}

func (x *Message_CallLogMessage) GetParticipants() []*Message_CallLogMessage_CallParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

type Message_CancelPaymentRequestMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *MessageKey            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_CancelPaymentRequestMessage) Reset() {
	*x = Message_CancelPaymentRequestMessage{}
	mi := &file_WAProto_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_CancelPaymentRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_CancelPaymentRequestMessage) ProtoMessage() {}

func (x *Message_CancelPaymentRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_CancelPaymentRequestMessage.ProtoReflect.Descriptor instead.
func (*Message_CancelPaymentRequestMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 14}
}

func (x *Message_CancelPaymentRequestMessage) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type Message_Chat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayName   *string                `protobuf:"bytes,1,opt,name=displayName" json:"displayName,omitempty"`
	Id            *string                `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_Chat) Reset() {
	*x = Message_Chat{}
	mi := &file_WAProto_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Chat) ProtoMessage() {}

func (x *Message_Chat) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Chat.ProtoReflect.Descriptor instead.
func (*Message_Chat) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 15}
}

func (x *Message_Chat) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Message_Chat) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type Message_CommentMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Message          *Message               `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	TargetMessageKey *MessageKey            `protobuf:"bytes,2,opt,name=targetMessageKey" json:"targetMessageKey,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Message_CommentMessage) Reset() {
	*x = Message_CommentMessage{}
	mi := &file_WAProto_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_CommentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_CommentMessage) ProtoMessage() {}

func (x *Message_CommentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_CommentMessage.ProtoReflect.Descriptor instead.
func (*Message_CommentMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 16}
}

func (x *Message_CommentMessage) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Message_CommentMessage) GetTargetMessageKey() *MessageKey {
	if x != nil {
		return x.TargetMessageKey
	}
	return nil
}

type Message_ContactMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayName   *string                `protobuf:"bytes,1,opt,name=displayName" json:"displayName,omitempty"`
	Vcard         *string                `protobuf:"bytes,16,opt,name=vcard" json:"vcard,omitempty"`
	ContextInfo   *ContextInfo           `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ContactMessage) Reset() {
	*x = Message_ContactMessage{}
	mi := &file_WAProto_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ContactMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ContactMessage) ProtoMessage() {}

func (x *Message_ContactMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ContactMessage.ProtoReflect.Descriptor instead.
func (*Message_ContactMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 17}
}

func (x *Message_ContactMessage) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Message_ContactMessage) GetVcard() string {
	if x != nil && x.Vcard != nil {
		return *x.Vcard
	}
	return ""
}

func (x *Message_ContactMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type Message_ContactsArrayMessage struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	DisplayName   *string                   `protobuf:"bytes,1,opt,name=displayName" json:"displayName,omitempty"`
	Contacts      []*Message_ContactMessage `protobuf:"bytes,2,rep,name=contacts" json:"contacts,omitempty"`
	ContextInfo   *ContextInfo              `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ContactsArrayMessage) Reset() {
	*x = Message_ContactsArrayMessage{}
	mi := &file_WAProto_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ContactsArrayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ContactsArrayMessage) ProtoMessage() {}

func (x *Message_ContactsArrayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ContactsArrayMessage.ProtoReflect.Descriptor instead.
func (*Message_ContactsArrayMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 18}
}

func (x *Message_ContactsArrayMessage) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Message_ContactsArrayMessage) GetContacts() []*Message_ContactMessage {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *Message_ContactsArrayMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type Message_DeclinePaymentRequestMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *MessageKey            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_DeclinePaymentRequestMessage) Reset() {
	*x = Message_DeclinePaymentRequestMessage{}
	mi := &file_WAProto_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_DeclinePaymentRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_DeclinePaymentRequestMessage) ProtoMessage() {}

func (x *Message_DeclinePaymentRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_DeclinePaymentRequestMessage.ProtoReflect.Descriptor instead.
func (*Message_DeclinePaymentRequestMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 19}
}

func (x *Message_DeclinePaymentRequestMessage) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type Message_DeviceSentMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DestinationJid *string                `protobuf:"bytes,1,opt,name=destinationJid" json:"destinationJid,omitempty"`
	Message        *Message               `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Phash          *string                `protobuf:"bytes,3,opt,name=phash" json:"phash,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Message_DeviceSentMessage) Reset() {
	*x = Message_DeviceSentMessage{}
	mi := &file_WAProto_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_DeviceSentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_DeviceSentMessage) ProtoMessage() {}

func (x *Message_DeviceSentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_DeviceSentMessage.ProtoReflect.Descriptor instead.
func (*Message_DeviceSentMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 20}
}

func (x *Message_DeviceSentMessage) GetDestinationJid() string {
	if x != nil && x.DestinationJid != nil {
		return *x.DestinationJid
	}
	return ""
}

func (x *Message_DeviceSentMessage) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Message_DeviceSentMessage) GetPhash() string {
	if x != nil && x.Phash != nil {
		return *x.Phash
	}
	return ""
}

type Message_DocumentMessage struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Url                 *string                `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Mimetype            *string                `protobuf:"bytes,2,opt,name=mimetype" json:"mimetype,omitempty"`
	Title               *string                `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	FileSha256          []byte                 `protobuf:"bytes,4,opt,name=fileSha256" json:"fileSha256,omitempty"`
	FileLength          *uint64                `protobuf:"varint,5,opt,name=fileLength" json:"fileLength,omitempty"`
	PageCount           *uint32                `protobuf:"varint,6,opt,name=pageCount" json:"pageCount,omitempty"`
	MediaKey            []byte                 `protobuf:"bytes,7,opt,name=mediaKey" json:"mediaKey,omitempty"`
	FileName            *string                `protobuf:"bytes,8,opt,name=fileName" json:"fileName,omitempty"`
	FileEncSha256       []byte                 `protobuf:"bytes,9,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	DirectPath          *string                `protobuf:"bytes,10,opt,name=directPath" json:"directPath,omitempty"`
	MediaKeyTimestamp   *int64                 `protobuf:"varint,11,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	ContactVcard        *bool                  `protobuf:"varint,12,opt,name=contactVcard" json:"contactVcard,omitempty"`
	ThumbnailDirectPath *string                `protobuf:"bytes,13,opt,name=thumbnailDirectPath" json:"thumbnailDirectPath,omitempty"`
	ThumbnailSha256     []byte                 `protobuf:"bytes,14,opt,name=thumbnailSha256" json:"thumbnailSha256,omitempty"`
	ThumbnailEncSha256  []byte                 `protobuf:"bytes,15,opt,name=thumbnailEncSha256" json:"thumbnailEncSha256,omitempty"`
	JpegThumbnail       []byte                 `protobuf:"bytes,16,opt,name=jpegThumbnail" json:"jpegThumbnail,omitempty"`
	ContextInfo         *ContextInfo           `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	ThumbnailHeight     *uint32                `protobuf:"varint,18,opt,name=thumbnailHeight" json:"thumbnailHeight,omitempty"`
	ThumbnailWidth      *uint32                `protobuf:"varint,19,opt,name=thumbnailWidth" json:"thumbnailWidth,omitempty"`
	Caption             *string                `protobuf:"bytes,20,opt,name=caption" json:"caption,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Message_DocumentMessage) Reset() {
	*x = Message_DocumentMessage{}
	mi := &file_WAProto_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_DocumentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_DocumentMessage) ProtoMessage() {}

func (x *Message_DocumentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_DocumentMessage.ProtoReflect.Descriptor instead.
func (*Message_DocumentMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 21}
}

func (x *Message_DocumentMessage) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Message_DocumentMessage) GetMimetype() string {
	if x != nil && x.Mimetype != nil {
		return *x.Mimetype
	}
	return ""
}

func (x *Message_DocumentMessage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_DocumentMessage) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *Message_DocumentMessage) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *Message_DocumentMessage) GetPageCount() uint32 {
	if x != nil && x.PageCount != nil {
		return *x.PageCount
	}
	return 0
}

func (x *Message_DocumentMessage) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Message_DocumentMessage) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *Message_DocumentMessage) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *Message_DocumentMessage) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Message_DocumentMessage) GetMediaKeyTimestamp() int64 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *Message_DocumentMessage) GetContactVcard() bool {
	if x != nil && x.ContactVcard != nil {
		return *x.ContactVcard
	}
	return false
}

func (x *Message_DocumentMessage) GetThumbnailDirectPath() string {
	if x != nil && x.ThumbnailDirectPath != nil {
		return *x.ThumbnailDirectPath
	}
	return ""
}

func (x *Message_DocumentMessage) GetThumbnailSha256() []byte {
	if x != nil {
		return x.ThumbnailSha256
	}
	return nil
}

func (x *Message_DocumentMessage) GetThumbnailEncSha256() []byte {
	if x != nil {
		return x.ThumbnailEncSha256
	}
	return nil
}

func (x *Message_DocumentMessage) GetJpegThumbnail() []byte {
	if x != nil {
		return x.JpegThumbnail
	}
	return nil
}

func (x *Message_DocumentMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_DocumentMessage) GetThumbnailHeight() uint32 {
	if x != nil && x.ThumbnailHeight != nil {
		return *x.ThumbnailHeight
	}
	return 0
}

func (x *Message_DocumentMessage) GetThumbnailWidth() uint32 {
	if x != nil && x.ThumbnailWidth != nil {
		return *x.ThumbnailWidth
	}
	return 0
}

func (x *Message_DocumentMessage) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

type Message_EncCommentMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TargetMessageKey *MessageKey            `protobuf:"bytes,1,opt,name=targetMessageKey" json:"targetMessageKey,omitempty"`
	EncPayload       []byte                 `protobuf:"bytes,2,opt,name=encPayload" json:"encPayload,omitempty"`
	EncIv            []byte                 `protobuf:"bytes,3,opt,name=encIv" json:"encIv,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Message_EncCommentMessage) Reset() {
	*x = Message_EncCommentMessage{}
	mi := &file_WAProto_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_EncCommentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_EncCommentMessage) ProtoMessage() {}

func (x *Message_EncCommentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_EncCommentMessage.ProtoReflect.Descriptor instead.
func (*Message_EncCommentMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 22}
}

func (x *Message_EncCommentMessage) GetTargetMessageKey() *MessageKey {
	if x != nil {
		return x.TargetMessageKey
	}
	return nil
}

func (x *Message_EncCommentMessage) GetEncPayload() []byte {
	if x != nil {
		return x.EncPayload
	}
	return nil
}

func (x *Message_EncCommentMessage) GetEncIv() []byte {
	if x != nil {
		return x.EncIv
	}
	return nil
}

type Message_EncEventUpdateMessage struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	EventCreationMessageKey *MessageKey            `protobuf:"bytes,1,opt,name=eventCreationMessageKey" json:"eventCreationMessageKey,omitempty"`
	EncPayload              []byte                 `protobuf:"bytes,2,opt,name=encPayload" json:"encPayload,omitempty"`
	EncIv                   []byte                 `protobuf:"bytes,3,opt,name=encIv" json:"encIv,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Message_EncEventUpdateMessage) Reset() {
	*x = Message_EncEventUpdateMessage{}
	mi := &file_WAProto_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_EncEventUpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_EncEventUpdateMessage) ProtoMessage() {}

func (x *Message_EncEventUpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_EncEventUpdateMessage.ProtoReflect.Descriptor instead.
func (*Message_EncEventUpdateMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 23}
}

func (x *Message_EncEventUpdateMessage) GetEventCreationMessageKey() *MessageKey {
	if x != nil {
		return x.EventCreationMessageKey
	}
	return nil
}

func (x *Message_EncEventUpdateMessage) GetEncPayload() []byte {
	if x != nil {
		return x.EncPayload
	}
	return nil
}

func (x *Message_EncEventUpdateMessage) GetEncIv() []byte {
	if x != nil {
		return x.EncIv
	}
	return nil
}

type Message_EncReactionMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TargetMessageKey *MessageKey            `protobuf:"bytes,1,opt,name=targetMessageKey" json:"targetMessageKey,omitempty"`
	EncPayload       []byte                 `protobuf:"bytes,2,opt,name=encPayload" json:"encPayload,omitempty"`
	EncIv            []byte                 `protobuf:"bytes,3,opt,name=encIv" json:"encIv,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Message_EncReactionMessage) Reset() {
	*x = Message_EncReactionMessage{}
	mi := &file_WAProto_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_EncReactionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_EncReactionMessage) ProtoMessage() {}

func (x *Message_EncReactionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_EncReactionMessage.ProtoReflect.Descriptor instead.
func (*Message_EncReactionMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 24}
}

func (x *Message_EncReactionMessage) GetTargetMessageKey() *MessageKey {
	if x != nil {
		return x.TargetMessageKey
	}
	return nil
}

func (x *Message_EncReactionMessage) GetEncPayload() []byte {
	if x != nil {
		return x.EncPayload
	}
	return nil
}

func (x *Message_EncReactionMessage) GetEncIv() []byte {
	if x != nil {
		return x.EncIv
	}
	return nil
}

type Message_EventEditMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	EventEditMessage *Message_EventMessage  `protobuf:"bytes,1,opt,name=eventEditMessage" json:"eventEditMessage,omitempty"`
	EditTimestampMs  *int64                 `protobuf:"varint,2,opt,name=editTimestampMs" json:"editTimestampMs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Message_EventEditMessage) Reset() {
	*x = Message_EventEditMessage{}
	mi := &file_WAProto_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_EventEditMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_EventEditMessage) ProtoMessage() {}

func (x *Message_EventEditMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_EventEditMessage.ProtoReflect.Descriptor instead.
func (*Message_EventEditMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 25}
}

func (x *Message_EventEditMessage) GetEventEditMessage() *Message_EventMessage {
	if x != nil {
		return x.EventEditMessage
	}
	return nil
}

func (x *Message_EventEditMessage) GetEditTimestampMs() int64 {
	if x != nil && x.EditTimestampMs != nil {
		return *x.EditTimestampMs
	}
	return 0
}

type Message_EventMessage struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	ContextInfo   *ContextInfo             `protobuf:"bytes,1,opt,name=contextInfo" json:"contextInfo,omitempty"`
	IsCanceled    *bool                    `protobuf:"varint,2,opt,name=isCanceled" json:"isCanceled,omitempty"`
	Name          *string                  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description   *string                  `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Location      *Message_LocationMessage `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	JoinLink      *string                  `protobuf:"bytes,6,opt,name=joinLink" json:"joinLink,omitempty"`
	StartTime     *int64                   `protobuf:"varint,7,opt,name=startTime" json:"startTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_EventMessage) Reset() {
	*x = Message_EventMessage{}
	mi := &file_WAProto_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_EventMessage) ProtoMessage() {}

func (x *Message_EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_EventMessage.ProtoReflect.Descriptor instead.
func (*Message_EventMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 26}
}

func (x *Message_EventMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_EventMessage) GetIsCanceled() bool {
	if x != nil && x.IsCanceled != nil {
		return *x.IsCanceled
	}
	return false
}

func (x *Message_EventMessage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Message_EventMessage) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Message_EventMessage) GetLocation() *Message_LocationMessage {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Message_EventMessage) GetJoinLink() string {
	if x != nil && x.JoinLink != nil {
		return *x.JoinLink
	}
	return ""
}

func (x *Message_EventMessage) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

type Message_EventResponseMessage struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Response      *Message_EventResponseMessage_EventResponseType `protobuf:"varint,1,opt,name=response,enum=proto.Message_EventResponseMessage_EventResponseType" json:"response,omitempty"`
	TimestampMs   *int64                                          `protobuf:"varint,2,opt,name=timestampMs" json:"timestampMs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_EventResponseMessage) Reset() {
	*x = Message_EventResponseMessage{}
	mi := &file_WAProto_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_EventResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_EventResponseMessage) ProtoMessage() {}

func (x *Message_EventResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_EventResponseMessage.ProtoReflect.Descriptor instead.
func (*Message_EventResponseMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 27}
}

func (x *Message_EventResponseMessage) GetResponse() Message_EventResponseMessage_EventResponseType {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Message_EventResponseMessage_UNKNOWN
}

func (x *Message_EventResponseMessage) GetTimestampMs() int64 {
	if x != nil && x.TimestampMs != nil {
		return *x.TimestampMs
	}
	return 0
}

type Message_EventUpdateMessage struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Response      *Message_EventResponseMessage `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Edit          *Message_EventEditMessage     `protobuf:"bytes,2,opt,name=edit" json:"edit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_EventUpdateMessage) Reset() {
	*x = Message_EventUpdateMessage{}
	mi := &file_WAProto_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_EventUpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_EventUpdateMessage) ProtoMessage() {}

func (x *Message_EventUpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_EventUpdateMessage.ProtoReflect.Descriptor instead.
func (*Message_EventUpdateMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 28}
}

func (x *Message_EventUpdateMessage) GetResponse() *Message_EventResponseMessage {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Message_EventUpdateMessage) GetEdit() *Message_EventEditMessage {
	if x != nil {
		return x.Edit
	}
	return nil
}

type Message_ExtendedTextMessage struct {
	state                            protoimpl.MessageState                           `protogen:"open.v1"`
	Text                             *string                                          `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	MatchedText                      *string                                          `protobuf:"bytes,2,opt,name=matchedText" json:"matchedText,omitempty"`
	CanonicalUrl                     *string                                          `protobuf:"bytes,4,opt,name=canonicalUrl" json:"canonicalUrl,omitempty"`
	Description                      *string                                          `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Title                            *string                                          `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	TextArgb                         *uint32                                          `protobuf:"fixed32,7,opt,name=textArgb" json:"textArgb,omitempty"`
	BackgroundArgb                   *uint32                                          `protobuf:"fixed32,8,opt,name=backgroundArgb" json:"backgroundArgb,omitempty"`
	Font                             *Message_ExtendedTextMessage_FontType            `protobuf:"varint,9,opt,name=font,enum=proto.Message_ExtendedTextMessage_FontType" json:"font,omitempty"`
	PreviewType                      *Message_ExtendedTextMessage_PreviewType         `protobuf:"varint,10,opt,name=previewType,enum=proto.Message_ExtendedTextMessage_PreviewType" json:"previewType,omitempty"`
	JpegThumbnail                    []byte                                           `protobuf:"bytes,16,opt,name=jpegThumbnail" json:"jpegThumbnail,omitempty"`
	ContextInfo                      *ContextInfo                                     `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	DoNotPlayInline                  *bool                                            `protobuf:"varint,18,opt,name=doNotPlayInline" json:"doNotPlayInline,omitempty"`
	ThumbnailDirectPath              *string                                          `protobuf:"bytes,19,opt,name=thumbnailDirectPath" json:"thumbnailDirectPath,omitempty"`
	ThumbnailSha256                  []byte                                           `protobuf:"bytes,20,opt,name=thumbnailSha256" json:"thumbnailSha256,omitempty"`
	ThumbnailEncSha256               []byte                                           `protobuf:"bytes,21,opt,name=thumbnailEncSha256" json:"thumbnailEncSha256,omitempty"`
	MediaKey                         []byte                                           `protobuf:"bytes,22,opt,name=mediaKey" json:"mediaKey,omitempty"`
	MediaKeyTimestamp                *int64                                           `protobuf:"varint,23,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	ThumbnailHeight                  *uint32                                          `protobuf:"varint,24,opt,name=thumbnailHeight" json:"thumbnailHeight,omitempty"`
	ThumbnailWidth                   *uint32                                          `protobuf:"varint,25,opt,name=thumbnailWidth" json:"thumbnailWidth,omitempty"`
	InviteLinkGroupType              *Message_ExtendedTextMessage_InviteLinkGroupType `protobuf:"varint,26,opt,name=inviteLinkGroupType,enum=proto.Message_ExtendedTextMessage_InviteLinkGroupType" json:"inviteLinkGroupType,omitempty"`
	InviteLinkParentGroupSubjectV2   *string                                          `protobuf:"bytes,27,opt,name=inviteLinkParentGroupSubjectV2" json:"inviteLinkParentGroupSubjectV2,omitempty"`
	InviteLinkParentGroupThumbnailV2 []byte                                           `protobuf:"bytes,28,opt,name=inviteLinkParentGroupThumbnailV2" json:"inviteLinkParentGroupThumbnailV2,omitempty"`
	InviteLinkGroupTypeV2            *Message_ExtendedTextMessage_InviteLinkGroupType `protobuf:"varint,29,opt,name=inviteLinkGroupTypeV2,enum=proto.Message_ExtendedTextMessage_InviteLinkGroupType" json:"inviteLinkGroupTypeV2,omitempty"`
	ViewOnce                         *bool                                            `protobuf:"varint,30,opt,name=viewOnce" json:"viewOnce,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *Message_ExtendedTextMessage) Reset() {
	*x = Message_ExtendedTextMessage{}
	mi := &file_WAProto_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ExtendedTextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ExtendedTextMessage) ProtoMessage() {}

func (x *Message_ExtendedTextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ExtendedTextMessage.ProtoReflect.Descriptor instead.
func (*Message_ExtendedTextMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 29}
}

func (x *Message_ExtendedTextMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Message_ExtendedTextMessage) GetMatchedText() string {
	if x != nil && x.MatchedText != nil {
		return *x.MatchedText
	}
	return ""
}

func (x *Message_ExtendedTextMessage) GetCanonicalUrl() string {
	if x != nil && x.CanonicalUrl != nil {
		return *x.CanonicalUrl
	}
	return ""
}

func (x *Message_ExtendedTextMessage) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Message_ExtendedTextMessage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_ExtendedTextMessage) GetTextArgb() uint32 {
	if x != nil && x.TextArgb != nil {
		return *x.TextArgb
	}
	return 0
}

func (x *Message_ExtendedTextMessage) GetBackgroundArgb() uint32 {
	if x != nil && x.BackgroundArgb != nil {
		return *x.BackgroundArgb
	}
	return 0
}

func (x *Message_ExtendedTextMessage) GetFont() Message_ExtendedTextMessage_FontType {
	if x != nil && x.Font != nil {
		return *x.Font
	}
	return Message_ExtendedTextMessage_SYSTEM
}

func (x *Message_ExtendedTextMessage) GetPreviewType() Message_ExtendedTextMessage_PreviewType {
	if x != nil && x.PreviewType != nil {
		return *x.PreviewType
	}
	return Message_ExtendedTextMessage_NONE
}

func (x *Message_ExtendedTextMessage) GetJpegThumbnail() []byte {
	if x != nil {
		return x.JpegThumbnail
	}
	return nil
}

func (x *Message_ExtendedTextMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_ExtendedTextMessage) GetDoNotPlayInline() bool {
	if x != nil && x.DoNotPlayInline != nil {
		return *x.DoNotPlayInline
	}
	return false
}

func (x *Message_ExtendedTextMessage) GetThumbnailDirectPath() string {
	if x != nil && x.ThumbnailDirectPath != nil {
		return *x.ThumbnailDirectPath
	}
	return ""
}

func (x *Message_ExtendedTextMessage) GetThumbnailSha256() []byte {
	if x != nil {
		return x.ThumbnailSha256
	}
	return nil
}

func (x *Message_ExtendedTextMessage) GetThumbnailEncSha256() []byte {
	if x != nil {
		return x.ThumbnailEncSha256
	}
	return nil
}

func (x *Message_ExtendedTextMessage) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Message_ExtendedTextMessage) GetMediaKeyTimestamp() int64 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *Message_ExtendedTextMessage) GetThumbnailHeight() uint32 {
	if x != nil && x.ThumbnailHeight != nil {
		return *x.ThumbnailHeight
	}
	return 0
}

func (x *Message_ExtendedTextMessage) GetThumbnailWidth() uint32 {
	if x != nil && x.ThumbnailWidth != nil {
		return *x.ThumbnailWidth
	}
	return 0
}

func (x *Message_ExtendedTextMessage) GetInviteLinkGroupType() Message_ExtendedTextMessage_InviteLinkGroupType {
	if x != nil && x.InviteLinkGroupType != nil {
		return *x.InviteLinkGroupType
	}
	return Message_ExtendedTextMessage_DEFAULT
}

func (x *Message_ExtendedTextMessage) GetInviteLinkParentGroupSubjectV2() string {
	if x != nil && x.InviteLinkParentGroupSubjectV2 != nil {
		return *x.InviteLinkParentGroupSubjectV2
	}
	return ""
}

func (x *Message_ExtendedTextMessage) GetInviteLinkParentGroupThumbnailV2() []byte {
	if x != nil {
		return x.InviteLinkParentGroupThumbnailV2
	}
	return nil
}

func (x *Message_ExtendedTextMessage) GetInviteLinkGroupTypeV2() Message_ExtendedTextMessage_InviteLinkGroupType {
	if x != nil && x.InviteLinkGroupTypeV2 != nil {
		return *x.InviteLinkGroupTypeV2
	}
	return Message_ExtendedTextMessage_DEFAULT
}

func (x *Message_ExtendedTextMessage) GetViewOnce() bool {
	if x != nil && x.ViewOnce != nil {
		return *x.ViewOnce
	}
	return false
}

type Message_ExtendedTextMessageWithParentKey struct {
	state               protoimpl.MessageState       `protogen:"open.v1"`
	Key                 *MessageKey                  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	ExtendedTextMessage *Message_ExtendedTextMessage `protobuf:"bytes,2,opt,name=extendedTextMessage" json:"extendedTextMessage,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Message_ExtendedTextMessageWithParentKey) Reset() {
	*x = Message_ExtendedTextMessageWithParentKey{}
	mi := &file_WAProto_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ExtendedTextMessageWithParentKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ExtendedTextMessageWithParentKey) ProtoMessage() {}

func (x *Message_ExtendedTextMessageWithParentKey) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ExtendedTextMessageWithParentKey.ProtoReflect.Descriptor instead.
func (*Message_ExtendedTextMessageWithParentKey) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 30}
}

func (x *Message_ExtendedTextMessageWithParentKey) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Message_ExtendedTextMessageWithParentKey) GetExtendedTextMessage() *Message_ExtendedTextMessage {
	if x != nil {
		return x.ExtendedTextMessage
	}
	return nil
}

type Message_FutureProofMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *Message               `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_FutureProofMessage) Reset() {
	*x = Message_FutureProofMessage{}
	mi := &file_WAProto_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_FutureProofMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_FutureProofMessage) ProtoMessage() {}

func (x *Message_FutureProofMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_FutureProofMessage.ProtoReflect.Descriptor instead.
func (*Message_FutureProofMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 31}
}

func (x *Message_FutureProofMessage) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type Message_GroupInviteMessage struct {
	state            protoimpl.MessageState                `protogen:"open.v1"`
	GroupJid         *string                               `protobuf:"bytes,1,opt,name=groupJid" json:"groupJid,omitempty"`
	InviteCode       *string                               `protobuf:"bytes,2,opt,name=inviteCode" json:"inviteCode,omitempty"`
	InviteExpiration *int64                                `protobuf:"varint,3,opt,name=inviteExpiration" json:"inviteExpiration,omitempty"`
	GroupName        *string                               `protobuf:"bytes,4,opt,name=groupName" json:"groupName,omitempty"`
	JpegThumbnail    []byte                                `protobuf:"bytes,5,opt,name=jpegThumbnail" json:"jpegThumbnail,omitempty"`
	Caption          *string                               `protobuf:"bytes,6,opt,name=caption" json:"caption,omitempty"`
	ContextInfo      *ContextInfo                          `protobuf:"bytes,7,opt,name=contextInfo" json:"contextInfo,omitempty"`
	GroupType        *Message_GroupInviteMessage_GroupType `protobuf:"varint,8,opt,name=groupType,enum=proto.Message_GroupInviteMessage_GroupType" json:"groupType,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Message_GroupInviteMessage) Reset() {
	*x = Message_GroupInviteMessage{}
	mi := &file_WAProto_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_GroupInviteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_GroupInviteMessage) ProtoMessage() {}

func (x *Message_GroupInviteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_GroupInviteMessage.ProtoReflect.Descriptor instead.
func (*Message_GroupInviteMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 32}
}

func (x *Message_GroupInviteMessage) GetGroupJid() string {
	if x != nil && x.GroupJid != nil {
		return *x.GroupJid
	}
	return ""
}

func (x *Message_GroupInviteMessage) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

func (x *Message_GroupInviteMessage) GetInviteExpiration() int64 {
	if x != nil && x.InviteExpiration != nil {
		return *x.InviteExpiration
	}
	return 0
}

func (x *Message_GroupInviteMessage) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *Message_GroupInviteMessage) GetJpegThumbnail() []byte {
	if x != nil {
		return x.JpegThumbnail
	}
	return nil
}

func (x *Message_GroupInviteMessage) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

func (x *Message_GroupInviteMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_GroupInviteMessage) GetGroupType() Message_GroupInviteMessage_GroupType {
	if x != nil && x.GroupType != nil {
		return *x.GroupType
	}
	return Message_GroupInviteMessage_DEFAULT
}

type Message_HighlyStructuredMessage struct {
	state             protoimpl.MessageState                                     `protogen:"open.v1"`
	Namespace         *string                                                    `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	ElementName       *string                                                    `protobuf:"bytes,2,opt,name=elementName" json:"elementName,omitempty"`
	Params            []string                                                   `protobuf:"bytes,3,rep,name=params" json:"params,omitempty"`
	FallbackLg        *string                                                    `protobuf:"bytes,4,opt,name=fallbackLg" json:"fallbackLg,omitempty"`
	FallbackLc        *string                                                    `protobuf:"bytes,5,opt,name=fallbackLc" json:"fallbackLc,omitempty"`
	LocalizableParams []*Message_HighlyStructuredMessage_HSMLocalizableParameter `protobuf:"bytes,6,rep,name=localizableParams" json:"localizableParams,omitempty"`
	DeterministicLg   *string                                                    `protobuf:"bytes,7,opt,name=deterministicLg" json:"deterministicLg,omitempty"`
	DeterministicLc   *string                                                    `protobuf:"bytes,8,opt,name=deterministicLc" json:"deterministicLc,omitempty"`
	HydratedHsm       *Message_TemplateMessage                                   `protobuf:"bytes,9,opt,name=hydratedHsm" json:"hydratedHsm,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Message_HighlyStructuredMessage) Reset() {
	*x = Message_HighlyStructuredMessage{}
	mi := &file_WAProto_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_HighlyStructuredMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_HighlyStructuredMessage) ProtoMessage() {}

func (x *Message_HighlyStructuredMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_HighlyStructuredMessage.ProtoReflect.Descriptor instead.
func (*Message_HighlyStructuredMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 33}
}

func (x *Message_HighlyStructuredMessage) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *Message_HighlyStructuredMessage) GetElementName() string {
	if x != nil && x.ElementName != nil {
		return *x.ElementName
	}
	return ""
}

func (x *Message_HighlyStructuredMessage) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Message_HighlyStructuredMessage) GetFallbackLg() string {
	if x != nil && x.FallbackLg != nil {
		return *x.FallbackLg
	}
	return ""
}

func (x *Message_HighlyStructuredMessage) GetFallbackLc() string {
	if x != nil && x.FallbackLc != nil {
		return *x.FallbackLc
	}
	return ""
}

func (x *Message_HighlyStructuredMessage) GetLocalizableParams() []*Message_HighlyStructuredMessage_HSMLocalizableParameter {
	if x != nil {
		return x.LocalizableParams
	}
	return nil
}

func (x *Message_HighlyStructuredMessage) GetDeterministicLg() string {
	if x != nil && x.DeterministicLg != nil {
		return *x.DeterministicLg
	}
	return ""
}

func (x *Message_HighlyStructuredMessage) GetDeterministicLc() string {
	if x != nil && x.DeterministicLc != nil {
		return *x.DeterministicLc
	}
	return ""
}

func (x *Message_HighlyStructuredMessage) GetHydratedHsm() *Message_TemplateMessage {
	if x != nil {
		return x.HydratedHsm
	}
	return nil
}

type Message_HistorySyncNotification struct {
	state                             protoimpl.MessageState                           `protogen:"open.v1"`
	FileSha256                        []byte                                           `protobuf:"bytes,1,opt,name=fileSha256" json:"fileSha256,omitempty"`
	FileLength                        *uint64                                          `protobuf:"varint,2,opt,name=fileLength" json:"fileLength,omitempty"`
	MediaKey                          []byte                                           `protobuf:"bytes,3,opt,name=mediaKey" json:"mediaKey,omitempty"`
	FileEncSha256                     []byte                                           `protobuf:"bytes,4,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	DirectPath                        *string                                          `protobuf:"bytes,5,opt,name=directPath" json:"directPath,omitempty"`
	SyncType                          *Message_HistorySyncNotification_HistorySyncType `protobuf:"varint,6,opt,name=syncType,enum=proto.Message_HistorySyncNotification_HistorySyncType" json:"syncType,omitempty"`
	ChunkOrder                        *uint32                                          `protobuf:"varint,7,opt,name=chunkOrder" json:"chunkOrder,omitempty"`
	OriginalMessageId                 *string                                          `protobuf:"bytes,8,opt,name=originalMessageId" json:"originalMessageId,omitempty"`
	Progress                          *uint32                                          `protobuf:"varint,9,opt,name=progress" json:"progress,omitempty"`
	OldestMsgInChunkTimestampSec      *int64                                           `protobuf:"varint,10,opt,name=oldestMsgInChunkTimestampSec" json:"oldestMsgInChunkTimestampSec,omitempty"`
	InitialHistBootstrapInlinePayload []byte                                           `protobuf:"bytes,11,opt,name=initialHistBootstrapInlinePayload" json:"initialHistBootstrapInlinePayload,omitempty"`
	PeerDataRequestSessionId          *string                                          `protobuf:"bytes,12,opt,name=peerDataRequestSessionId" json:"peerDataRequestSessionId,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *Message_HistorySyncNotification) Reset() {
	*x = Message_HistorySyncNotification{}
	mi := &file_WAProto_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_HistorySyncNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_HistorySyncNotification) ProtoMessage() {}

func (x *Message_HistorySyncNotification) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_HistorySyncNotification.ProtoReflect.Descriptor instead.
func (*Message_HistorySyncNotification) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 34}
}

func (x *Message_HistorySyncNotification) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *Message_HistorySyncNotification) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *Message_HistorySyncNotification) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Message_HistorySyncNotification) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *Message_HistorySyncNotification) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Message_HistorySyncNotification) GetSyncType() Message_HistorySyncNotification_HistorySyncType {
	if x != nil && x.SyncType != nil {
		return *x.SyncType
	}
	return Message_HistorySyncNotification_INITIAL_BOOTSTRAP
}

func (x *Message_HistorySyncNotification) GetChunkOrder() uint32 {
	if x != nil && x.ChunkOrder != nil {
		return *x.ChunkOrder
	}
	return 0
}

func (x *Message_HistorySyncNotification) GetOriginalMessageId() string {
	if x != nil && x.OriginalMessageId != nil {
		return *x.OriginalMessageId
	}
	return ""
}

func (x *Message_HistorySyncNotification) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *Message_HistorySyncNotification) GetOldestMsgInChunkTimestampSec() int64 {
	if x != nil && x.OldestMsgInChunkTimestampSec != nil {
		return *x.OldestMsgInChunkTimestampSec
	}
	return 0
}

func (x *Message_HistorySyncNotification) GetInitialHistBootstrapInlinePayload() []byte {
	if x != nil {
		return x.InitialHistBootstrapInlinePayload
	}
	return nil
}

func (x *Message_HistorySyncNotification) GetPeerDataRequestSessionId() string {
	if x != nil && x.PeerDataRequestSessionId != nil {
		return *x.PeerDataRequestSessionId
	}
	return ""
}

type Message_ImageMessage struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	Url                     *string                  `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Mimetype                *string                  `protobuf:"bytes,2,opt,name=mimetype" json:"mimetype,omitempty"`
	Caption                 *string                  `protobuf:"bytes,3,opt,name=caption" json:"caption,omitempty"`
	FileSha256              []byte                   `protobuf:"bytes,4,opt,name=fileSha256" json:"fileSha256,omitempty"`
	FileLength              *uint64                  `protobuf:"varint,5,opt,name=fileLength" json:"fileLength,omitempty"`
	Height                  *uint32                  `protobuf:"varint,6,opt,name=height" json:"height,omitempty"`
	Width                   *uint32                  `protobuf:"varint,7,opt,name=width" json:"width,omitempty"`
	MediaKey                []byte                   `protobuf:"bytes,8,opt,name=mediaKey" json:"mediaKey,omitempty"`
	FileEncSha256           []byte                   `protobuf:"bytes,9,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	InteractiveAnnotations  []*InteractiveAnnotation `protobuf:"bytes,10,rep,name=interactiveAnnotations" json:"interactiveAnnotations,omitempty"`
	DirectPath              *string                  `protobuf:"bytes,11,opt,name=directPath" json:"directPath,omitempty"`
	MediaKeyTimestamp       *int64                   `protobuf:"varint,12,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	JpegThumbnail           []byte                   `protobuf:"bytes,16,opt,name=jpegThumbnail" json:"jpegThumbnail,omitempty"`
	ContextInfo             *ContextInfo             `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	FirstScanSidecar        []byte                   `protobuf:"bytes,18,opt,name=firstScanSidecar" json:"firstScanSidecar,omitempty"`
	FirstScanLength         *uint32                  `protobuf:"varint,19,opt,name=firstScanLength" json:"firstScanLength,omitempty"`
	ExperimentGroupId       *uint32                  `protobuf:"varint,20,opt,name=experimentGroupId" json:"experimentGroupId,omitempty"`
	ScansSidecar            []byte                   `protobuf:"bytes,21,opt,name=scansSidecar" json:"scansSidecar,omitempty"`
	ScanLengths             []uint32                 `protobuf:"varint,22,rep,name=scanLengths" json:"scanLengths,omitempty"`
	MidQualityFileSha256    []byte                   `protobuf:"bytes,23,opt,name=midQualityFileSha256" json:"midQualityFileSha256,omitempty"`
	MidQualityFileEncSha256 []byte                   `protobuf:"bytes,24,opt,name=midQualityFileEncSha256" json:"midQualityFileEncSha256,omitempty"`
	ViewOnce                *bool                    `protobuf:"varint,25,opt,name=viewOnce" json:"viewOnce,omitempty"`
	ThumbnailDirectPath     *string                  `protobuf:"bytes,26,opt,name=thumbnailDirectPath" json:"thumbnailDirectPath,omitempty"`
	ThumbnailSha256         []byte                   `protobuf:"bytes,27,opt,name=thumbnailSha256" json:"thumbnailSha256,omitempty"`
	ThumbnailEncSha256      []byte                   `protobuf:"bytes,28,opt,name=thumbnailEncSha256" json:"thumbnailEncSha256,omitempty"`
	StaticUrl               *string                  `protobuf:"bytes,29,opt,name=staticUrl" json:"staticUrl,omitempty"`
	Annotations             []*InteractiveAnnotation `protobuf:"bytes,30,rep,name=annotations" json:"annotations,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Message_ImageMessage) Reset() {
	*x = Message_ImageMessage{}
	mi := &file_WAProto_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ImageMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ImageMessage) ProtoMessage() {}

func (x *Message_ImageMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ImageMessage.ProtoReflect.Descriptor instead.
func (*Message_ImageMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 35}
}

func (x *Message_ImageMessage) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Message_ImageMessage) GetMimetype() string {
	if x != nil && x.Mimetype != nil {
		return *x.Mimetype
	}
	return ""
}

func (x *Message_ImageMessage) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

func (x *Message_ImageMessage) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *Message_ImageMessage) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *Message_ImageMessage) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *Message_ImageMessage) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Message_ImageMessage) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Message_ImageMessage) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *Message_ImageMessage) GetInteractiveAnnotations() []*InteractiveAnnotation {
	if x != nil {
		return x.InteractiveAnnotations
	}
	return nil
}

func (x *Message_ImageMessage) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Message_ImageMessage) GetMediaKeyTimestamp() int64 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *Message_ImageMessage) GetJpegThumbnail() []byte {
	if x != nil {
		return x.JpegThumbnail
	}
	return nil
}

func (x *Message_ImageMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_ImageMessage) GetFirstScanSidecar() []byte {
	if x != nil {
		return x.FirstScanSidecar
	}
	return nil
}

func (x *Message_ImageMessage) GetFirstScanLength() uint32 {
	if x != nil && x.FirstScanLength != nil {
		return *x.FirstScanLength
	}
	return 0
}

func (x *Message_ImageMessage) GetExperimentGroupId() uint32 {
	if x != nil && x.ExperimentGroupId != nil {
		return *x.ExperimentGroupId
	}
	return 0
}

func (x *Message_ImageMessage) GetScansSidecar() []byte {
	if x != nil {
		return x.ScansSidecar
	}
	return nil
}

func (x *Message_ImageMessage) GetScanLengths() []uint32 {
	if x != nil {
		return x.ScanLengths
	}
	return nil
}

func (x *Message_ImageMessage) GetMidQualityFileSha256() []byte {
	if x != nil {
		return x.MidQualityFileSha256
	}
	return nil
}

func (x *Message_ImageMessage) GetMidQualityFileEncSha256() []byte {
	if x != nil {
		return x.MidQualityFileEncSha256
	}
	return nil
}

func (x *Message_ImageMessage) GetViewOnce() bool {
	if x != nil && x.ViewOnce != nil {
		return *x.ViewOnce
	}
	return false
}

func (x *Message_ImageMessage) GetThumbnailDirectPath() string {
	if x != nil && x.ThumbnailDirectPath != nil {
		return *x.ThumbnailDirectPath
	}
	return ""
}

func (x *Message_ImageMessage) GetThumbnailSha256() []byte {
	if x != nil {
		return x.ThumbnailSha256
	}
	return nil
}

func (x *Message_ImageMessage) GetThumbnailEncSha256() []byte {
	if x != nil {
		return x.ThumbnailEncSha256
	}
	return nil
}

func (x *Message_ImageMessage) GetStaticUrl() string {
	if x != nil && x.StaticUrl != nil {
		return *x.StaticUrl
	}
	return ""
}

func (x *Message_ImageMessage) GetAnnotations() []*InteractiveAnnotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type Message_InitialSecurityNotificationSettingSync struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	SecurityNotificationEnabled *bool                  `protobuf:"varint,1,opt,name=securityNotificationEnabled" json:"securityNotificationEnabled,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Message_InitialSecurityNotificationSettingSync) Reset() {
	*x = Message_InitialSecurityNotificationSettingSync{}
	mi := &file_WAProto_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InitialSecurityNotificationSettingSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InitialSecurityNotificationSettingSync) ProtoMessage() {}

func (x *Message_InitialSecurityNotificationSettingSync) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InitialSecurityNotificationSettingSync.ProtoReflect.Descriptor instead.
func (*Message_InitialSecurityNotificationSettingSync) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 36}
}

func (x *Message_InitialSecurityNotificationSettingSync) GetSecurityNotificationEnabled() bool {
	if x != nil && x.SecurityNotificationEnabled != nil {
		return *x.SecurityNotificationEnabled
	}
	return false
}

type Message_InteractiveMessage struct {
	state       protoimpl.MessageState             `protogen:"open.v1"`
	Header      *Message_InteractiveMessage_Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Body        *Message_InteractiveMessage_Body   `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Footer      *Message_InteractiveMessage_Footer `protobuf:"bytes,3,opt,name=footer" json:"footer,omitempty"`
	ContextInfo *ContextInfo                       `protobuf:"bytes,15,opt,name=contextInfo" json:"contextInfo,omitempty"`
	// Types that are valid to be assigned to InteractiveMessage:
	//
	//	*Message_InteractiveMessage_ShopStorefrontMessage
	//	*Message_InteractiveMessage_CollectionMessage_
	//	*Message_InteractiveMessage_NativeFlowMessage_
	//	*Message_InteractiveMessage_CarouselMessage_
	InteractiveMessage isMessage_InteractiveMessage_InteractiveMessage `protobuf_oneof:"interactiveMessage"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Message_InteractiveMessage) Reset() {
	*x = Message_InteractiveMessage{}
	mi := &file_WAProto_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveMessage) ProtoMessage() {}

func (x *Message_InteractiveMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveMessage.ProtoReflect.Descriptor instead.
func (*Message_InteractiveMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 37}
}

func (x *Message_InteractiveMessage) GetHeader() *Message_InteractiveMessage_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Message_InteractiveMessage) GetBody() *Message_InteractiveMessage_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Message_InteractiveMessage) GetFooter() *Message_InteractiveMessage_Footer {
	if x != nil {
		return x.Footer
	}
	return nil
}

func (x *Message_InteractiveMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_InteractiveMessage) GetInteractiveMessage() isMessage_InteractiveMessage_InteractiveMessage {
	if x != nil {
		return x.InteractiveMessage
	}
	return nil
}

func (x *Message_InteractiveMessage) GetShopStorefrontMessage() *Message_InteractiveMessage_ShopMessage {
	if x != nil {
		if x, ok := x.InteractiveMessage.(*Message_InteractiveMessage_ShopStorefrontMessage); ok {
			return x.ShopStorefrontMessage
		}
	}
	return nil
}

func (x *Message_InteractiveMessage) GetCollectionMessage() *Message_InteractiveMessage_CollectionMessage {
	if x != nil {
		if x, ok := x.InteractiveMessage.(*Message_InteractiveMessage_CollectionMessage_); ok {
			return x.CollectionMessage
		}
	}
	return nil
}

func (x *Message_InteractiveMessage) GetNativeFlowMessage() *Message_InteractiveMessage_NativeFlowMessage {
	if x != nil {
		if x, ok := x.InteractiveMessage.(*Message_InteractiveMessage_NativeFlowMessage_); ok {
			return x.NativeFlowMessage
		}
	}
	return nil
}

func (x *Message_InteractiveMessage) GetCarouselMessage() *Message_InteractiveMessage_CarouselMessage {
	if x != nil {
		if x, ok := x.InteractiveMessage.(*Message_InteractiveMessage_CarouselMessage_); ok {
			return x.CarouselMessage
		}
	}
	return nil
}

type isMessage_InteractiveMessage_InteractiveMessage interface {
	isMessage_InteractiveMessage_InteractiveMessage()
}

type Message_InteractiveMessage_ShopStorefrontMessage struct {
	ShopStorefrontMessage *Message_InteractiveMessage_ShopMessage `protobuf:"bytes,4,opt,name=shopStorefrontMessage,oneof"`
}

type Message_InteractiveMessage_CollectionMessage_ struct {
	CollectionMessage *Message_InteractiveMessage_CollectionMessage `protobuf:"bytes,5,opt,name=collectionMessage,oneof"`
}

type Message_InteractiveMessage_NativeFlowMessage_ struct {
	NativeFlowMessage *Message_InteractiveMessage_NativeFlowMessage `protobuf:"bytes,6,opt,name=nativeFlowMessage,oneof"`
}

type Message_InteractiveMessage_CarouselMessage_ struct {
	CarouselMessage *Message_InteractiveMessage_CarouselMessage `protobuf:"bytes,7,opt,name=carouselMessage,oneof"`
}

func (*Message_InteractiveMessage_ShopStorefrontMessage) isMessage_InteractiveMessage_InteractiveMessage() {
}

func (*Message_InteractiveMessage_CollectionMessage_) isMessage_InteractiveMessage_InteractiveMessage() {
}

func (*Message_InteractiveMessage_NativeFlowMessage_) isMessage_InteractiveMessage_InteractiveMessage() {
}

func (*Message_InteractiveMessage_CarouselMessage_) isMessage_InteractiveMessage_InteractiveMessage() {
}

type Message_InteractiveResponseMessage struct {
	state       protoimpl.MessageState                   `protogen:"open.v1"`
	Body        *Message_InteractiveResponseMessage_Body `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	ContextInfo *ContextInfo                             `protobuf:"bytes,15,opt,name=contextInfo" json:"contextInfo,omitempty"`
	// Types that are valid to be assigned to InteractiveResponseMessage:
	//
	//	*Message_InteractiveResponseMessage_NativeFlowResponseMessage_
	InteractiveResponseMessage isMessage_InteractiveResponseMessage_InteractiveResponseMessage `protobuf_oneof:"interactiveResponseMessage"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Message_InteractiveResponseMessage) Reset() {
	*x = Message_InteractiveResponseMessage{}
	mi := &file_WAProto_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveResponseMessage) ProtoMessage() {}

func (x *Message_InteractiveResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveResponseMessage.ProtoReflect.Descriptor instead.
func (*Message_InteractiveResponseMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 38}
}

func (x *Message_InteractiveResponseMessage) GetBody() *Message_InteractiveResponseMessage_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Message_InteractiveResponseMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_InteractiveResponseMessage) GetInteractiveResponseMessage() isMessage_InteractiveResponseMessage_InteractiveResponseMessage {
	if x != nil {
		return x.InteractiveResponseMessage
	}
	return nil
}

func (x *Message_InteractiveResponseMessage) GetNativeFlowResponseMessage() *Message_InteractiveResponseMessage_NativeFlowResponseMessage {
	if x != nil {
		if x, ok := x.InteractiveResponseMessage.(*Message_InteractiveResponseMessage_NativeFlowResponseMessage_); ok {
			return x.NativeFlowResponseMessage
		}
	}
	return nil
}

type isMessage_InteractiveResponseMessage_InteractiveResponseMessage interface {
	isMessage_InteractiveResponseMessage_InteractiveResponseMessage()
}

type Message_InteractiveResponseMessage_NativeFlowResponseMessage_ struct {
	NativeFlowResponseMessage *Message_InteractiveResponseMessage_NativeFlowResponseMessage `protobuf:"bytes,2,opt,name=nativeFlowResponseMessage,oneof"`
}

func (*Message_InteractiveResponseMessage_NativeFlowResponseMessage_) isMessage_InteractiveResponseMessage_InteractiveResponseMessage() {
}

type Message_InvoiceMessage struct {
	state                       protoimpl.MessageState                 `protogen:"open.v1"`
	Note                        *string                                `protobuf:"bytes,1,opt,name=note" json:"note,omitempty"`
	Token                       *string                                `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	AttachmentType              *Message_InvoiceMessage_AttachmentType `protobuf:"varint,3,opt,name=attachmentType,enum=proto.Message_InvoiceMessage_AttachmentType" json:"attachmentType,omitempty"`
	AttachmentMimetype          *string                                `protobuf:"bytes,4,opt,name=attachmentMimetype" json:"attachmentMimetype,omitempty"`
	AttachmentMediaKey          []byte                                 `protobuf:"bytes,5,opt,name=attachmentMediaKey" json:"attachmentMediaKey,omitempty"`
	AttachmentMediaKeyTimestamp *int64                                 `protobuf:"varint,6,opt,name=attachmentMediaKeyTimestamp" json:"attachmentMediaKeyTimestamp,omitempty"`
	AttachmentFileSha256        []byte                                 `protobuf:"bytes,7,opt,name=attachmentFileSha256" json:"attachmentFileSha256,omitempty"`
	AttachmentFileEncSha256     []byte                                 `protobuf:"bytes,8,opt,name=attachmentFileEncSha256" json:"attachmentFileEncSha256,omitempty"`
	AttachmentDirectPath        *string                                `protobuf:"bytes,9,opt,name=attachmentDirectPath" json:"attachmentDirectPath,omitempty"`
	AttachmentJpegThumbnail     []byte                                 `protobuf:"bytes,10,opt,name=attachmentJpegThumbnail" json:"attachmentJpegThumbnail,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Message_InvoiceMessage) Reset() {
	*x = Message_InvoiceMessage{}
	mi := &file_WAProto_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InvoiceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InvoiceMessage) ProtoMessage() {}

func (x *Message_InvoiceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InvoiceMessage.ProtoReflect.Descriptor instead.
func (*Message_InvoiceMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 39}
}

func (x *Message_InvoiceMessage) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

func (x *Message_InvoiceMessage) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *Message_InvoiceMessage) GetAttachmentType() Message_InvoiceMessage_AttachmentType {
	if x != nil && x.AttachmentType != nil {
		return *x.AttachmentType
	}
	return Message_InvoiceMessage_IMAGE
}

func (x *Message_InvoiceMessage) GetAttachmentMimetype() string {
	if x != nil && x.AttachmentMimetype != nil {
		return *x.AttachmentMimetype
	}
	return ""
}

func (x *Message_InvoiceMessage) GetAttachmentMediaKey() []byte {
	if x != nil {
		return x.AttachmentMediaKey
	}
	return nil
}

func (x *Message_InvoiceMessage) GetAttachmentMediaKeyTimestamp() int64 {
	if x != nil && x.AttachmentMediaKeyTimestamp != nil {
		return *x.AttachmentMediaKeyTimestamp
	}
	return 0
}

func (x *Message_InvoiceMessage) GetAttachmentFileSha256() []byte {
	if x != nil {
		return x.AttachmentFileSha256
	}
	return nil
}

func (x *Message_InvoiceMessage) GetAttachmentFileEncSha256() []byte {
	if x != nil {
		return x.AttachmentFileEncSha256
	}
	return nil
}

func (x *Message_InvoiceMessage) GetAttachmentDirectPath() string {
	if x != nil && x.AttachmentDirectPath != nil {
		return *x.AttachmentDirectPath
	}
	return ""
}

func (x *Message_InvoiceMessage) GetAttachmentJpegThumbnail() []byte {
	if x != nil {
		return x.AttachmentJpegThumbnail
	}
	return nil
}

type Message_KeepInChatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *MessageKey            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	KeepType      *KeepType              `protobuf:"varint,2,opt,name=keepType,enum=proto.KeepType" json:"keepType,omitempty"`
	TimestampMs   *int64                 `protobuf:"varint,3,opt,name=timestampMs" json:"timestampMs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_KeepInChatMessage) Reset() {
	*x = Message_KeepInChatMessage{}
	mi := &file_WAProto_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_KeepInChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_KeepInChatMessage) ProtoMessage() {}

func (x *Message_KeepInChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_KeepInChatMessage.ProtoReflect.Descriptor instead.
func (*Message_KeepInChatMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 40}
}

func (x *Message_KeepInChatMessage) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Message_KeepInChatMessage) GetKeepType() KeepType {
	if x != nil && x.KeepType != nil {
		return *x.KeepType
	}
	return KeepType_UNKNOWN
}

func (x *Message_KeepInChatMessage) GetTimestampMs() int64 {
	if x != nil && x.TimestampMs != nil {
		return *x.TimestampMs
	}
	return 0
}

type Message_ListMessage struct {
	state           protoimpl.MessageState               `protogen:"open.v1"`
	Title           *string                              `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Description     *string                              `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	ButtonText      *string                              `protobuf:"bytes,3,opt,name=buttonText" json:"buttonText,omitempty"`
	ListType        *Message_ListMessage_ListType        `protobuf:"varint,4,opt,name=listType,enum=proto.Message_ListMessage_ListType" json:"listType,omitempty"`
	Sections        []*Message_ListMessage_Section       `protobuf:"bytes,5,rep,name=sections" json:"sections,omitempty"`
	ProductListInfo *Message_ListMessage_ProductListInfo `protobuf:"bytes,6,opt,name=productListInfo" json:"productListInfo,omitempty"`
	FooterText      *string                              `protobuf:"bytes,7,opt,name=footerText" json:"footerText,omitempty"`
	ContextInfo     *ContextInfo                         `protobuf:"bytes,8,opt,name=contextInfo" json:"contextInfo,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Message_ListMessage) Reset() {
	*x = Message_ListMessage{}
	mi := &file_WAProto_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ListMessage) ProtoMessage() {}

func (x *Message_ListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ListMessage.ProtoReflect.Descriptor instead.
func (*Message_ListMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 41}
}

func (x *Message_ListMessage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_ListMessage) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Message_ListMessage) GetButtonText() string {
	if x != nil && x.ButtonText != nil {
		return *x.ButtonText
	}
	return ""
}

func (x *Message_ListMessage) GetListType() Message_ListMessage_ListType {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return Message_ListMessage_UNKNOWN
}

func (x *Message_ListMessage) GetSections() []*Message_ListMessage_Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *Message_ListMessage) GetProductListInfo() *Message_ListMessage_ProductListInfo {
	if x != nil {
		return x.ProductListInfo
	}
	return nil
}

func (x *Message_ListMessage) GetFooterText() string {
	if x != nil && x.FooterText != nil {
		return *x.FooterText
	}
	return ""
}

func (x *Message_ListMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type Message_ListResponseMessage struct {
	state             protoimpl.MessageState                         `protogen:"open.v1"`
	Title             *string                                        `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	ListType          *Message_ListResponseMessage_ListType          `protobuf:"varint,2,opt,name=listType,enum=proto.Message_ListResponseMessage_ListType" json:"listType,omitempty"`
	SingleSelectReply *Message_ListResponseMessage_SingleSelectReply `protobuf:"bytes,3,opt,name=singleSelectReply" json:"singleSelectReply,omitempty"`
	ContextInfo       *ContextInfo                                   `protobuf:"bytes,4,opt,name=contextInfo" json:"contextInfo,omitempty"`
	Description       *string                                        `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Message_ListResponseMessage) Reset() {
	*x = Message_ListResponseMessage{}
	mi := &file_WAProto_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ListResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ListResponseMessage) ProtoMessage() {}

func (x *Message_ListResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ListResponseMessage.ProtoReflect.Descriptor instead.
func (*Message_ListResponseMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 42}
}

func (x *Message_ListResponseMessage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_ListResponseMessage) GetListType() Message_ListResponseMessage_ListType {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return Message_ListResponseMessage_UNKNOWN
}

func (x *Message_ListResponseMessage) GetSingleSelectReply() *Message_ListResponseMessage_SingleSelectReply {
	if x != nil {
		return x.SingleSelectReply
	}
	return nil
}

func (x *Message_ListResponseMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_ListResponseMessage) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type Message_LiveLocationMessage struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	DegreesLatitude                   *float64               `protobuf:"fixed64,1,opt,name=degreesLatitude" json:"degreesLatitude,omitempty"`
	DegreesLongitude                  *float64               `protobuf:"fixed64,2,opt,name=degreesLongitude" json:"degreesLongitude,omitempty"`
	AccuracyInMeters                  *uint32                `protobuf:"varint,3,opt,name=accuracyInMeters" json:"accuracyInMeters,omitempty"`
	SpeedInMps                        *float32               `protobuf:"fixed32,4,opt,name=speedInMps" json:"speedInMps,omitempty"`
	DegreesClockwiseFromMagneticNorth *uint32                `protobuf:"varint,5,opt,name=degreesClockwiseFromMagneticNorth" json:"degreesClockwiseFromMagneticNorth,omitempty"`
	Caption                           *string                `protobuf:"bytes,6,opt,name=caption" json:"caption,omitempty"`
	SequenceNumber                    *int64                 `protobuf:"varint,7,opt,name=sequenceNumber" json:"sequenceNumber,omitempty"`
	TimeOffset                        *uint32                `protobuf:"varint,8,opt,name=timeOffset" json:"timeOffset,omitempty"`
	JpegThumbnail                     []byte                 `protobuf:"bytes,16,opt,name=jpegThumbnail" json:"jpegThumbnail,omitempty"`
	ContextInfo                       *ContextInfo           `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *Message_LiveLocationMessage) Reset() {
	*x = Message_LiveLocationMessage{}
	mi := &file_WAProto_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_LiveLocationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_LiveLocationMessage) ProtoMessage() {}

func (x *Message_LiveLocationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_LiveLocationMessage.ProtoReflect.Descriptor instead.
func (*Message_LiveLocationMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 43}
}

func (x *Message_LiveLocationMessage) GetDegreesLatitude() float64 {
	if x != nil && x.DegreesLatitude != nil {
		return *x.DegreesLatitude
	}
	return 0
}

func (x *Message_LiveLocationMessage) GetDegreesLongitude() float64 {
	if x != nil && x.DegreesLongitude != nil {
		return *x.DegreesLongitude
	}
	return 0
}

func (x *Message_LiveLocationMessage) GetAccuracyInMeters() uint32 {
	if x != nil && x.AccuracyInMeters != nil {
		return *x.AccuracyInMeters
	}
	return 0
}

func (x *Message_LiveLocationMessage) GetSpeedInMps() float32 {
	if x != nil && x.SpeedInMps != nil {
		return *x.SpeedInMps
	}
	return 0
}

func (x *Message_LiveLocationMessage) GetDegreesClockwiseFromMagneticNorth() uint32 {
	if x != nil && x.DegreesClockwiseFromMagneticNorth != nil {
		return *x.DegreesClockwiseFromMagneticNorth
	}
	return 0
}

func (x *Message_LiveLocationMessage) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

func (x *Message_LiveLocationMessage) GetSequenceNumber() int64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *Message_LiveLocationMessage) GetTimeOffset() uint32 {
	if x != nil && x.TimeOffset != nil {
		return *x.TimeOffset
	}
	return 0
}

func (x *Message_LiveLocationMessage) GetJpegThumbnail() []byte {
	if x != nil {
		return x.JpegThumbnail
	}
	return nil
}

func (x *Message_LiveLocationMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type Message_LocationMessage struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	DegreesLatitude                   *float64               `protobuf:"fixed64,1,opt,name=degreesLatitude" json:"degreesLatitude,omitempty"`
	DegreesLongitude                  *float64               `protobuf:"fixed64,2,opt,name=degreesLongitude" json:"degreesLongitude,omitempty"`
	Name                              *string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Address                           *string                `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	Url                               *string                `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	IsLive                            *bool                  `protobuf:"varint,6,opt,name=isLive" json:"isLive,omitempty"`
	AccuracyInMeters                  *uint32                `protobuf:"varint,7,opt,name=accuracyInMeters" json:"accuracyInMeters,omitempty"`
	SpeedInMps                        *float32               `protobuf:"fixed32,8,opt,name=speedInMps" json:"speedInMps,omitempty"`
	DegreesClockwiseFromMagneticNorth *uint32                `protobuf:"varint,9,opt,name=degreesClockwiseFromMagneticNorth" json:"degreesClockwiseFromMagneticNorth,omitempty"`
	Comment                           *string                `protobuf:"bytes,11,opt,name=comment" json:"comment,omitempty"`
	JpegThumbnail                     []byte                 `protobuf:"bytes,16,opt,name=jpegThumbnail" json:"jpegThumbnail,omitempty"`
	ContextInfo                       *ContextInfo           `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *Message_LocationMessage) Reset() {
	*x = Message_LocationMessage{}
	mi := &file_WAProto_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_LocationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_LocationMessage) ProtoMessage() {}

func (x *Message_LocationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_LocationMessage.ProtoReflect.Descriptor instead.
func (*Message_LocationMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 44}
}

func (x *Message_LocationMessage) GetDegreesLatitude() float64 {
	if x != nil && x.DegreesLatitude != nil {
		return *x.DegreesLatitude
	}
	return 0
}

func (x *Message_LocationMessage) GetDegreesLongitude() float64 {
	if x != nil && x.DegreesLongitude != nil {
		return *x.DegreesLongitude
	}
	return 0
}

func (x *Message_LocationMessage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Message_LocationMessage) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Message_LocationMessage) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Message_LocationMessage) GetIsLive() bool {
	if x != nil && x.IsLive != nil {
		return *x.IsLive
	}
	return false
}

func (x *Message_LocationMessage) GetAccuracyInMeters() uint32 {
	if x != nil && x.AccuracyInMeters != nil {
		return *x.AccuracyInMeters
	}
	return 0
}

func (x *Message_LocationMessage) GetSpeedInMps() float32 {
	if x != nil && x.SpeedInMps != nil {
		return *x.SpeedInMps
	}
	return 0
}

func (x *Message_LocationMessage) GetDegreesClockwiseFromMagneticNorth() uint32 {
	if x != nil && x.DegreesClockwiseFromMagneticNorth != nil {
		return *x.DegreesClockwiseFromMagneticNorth
	}
	return 0
}

func (x *Message_LocationMessage) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *Message_LocationMessage) GetJpegThumbnail() []byte {
	if x != nil {
		return x.JpegThumbnail
	}
	return nil
}

func (x *Message_LocationMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type Message_MessageHistoryBundle struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Mimetype          *string                `protobuf:"bytes,2,opt,name=mimetype" json:"mimetype,omitempty"`
	FileSha256        []byte                 `protobuf:"bytes,3,opt,name=fileSha256" json:"fileSha256,omitempty"`
	MediaKey          []byte                 `protobuf:"bytes,5,opt,name=mediaKey" json:"mediaKey,omitempty"`
	FileEncSha256     []byte                 `protobuf:"bytes,6,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	DirectPath        *string                `protobuf:"bytes,7,opt,name=directPath" json:"directPath,omitempty"`
	MediaKeyTimestamp *int64                 `protobuf:"varint,8,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	ContextInfo       *ContextInfo           `protobuf:"bytes,9,opt,name=contextInfo" json:"contextInfo,omitempty"`
	Participants      []string               `protobuf:"bytes,10,rep,name=participants" json:"participants,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Message_MessageHistoryBundle) Reset() {
	*x = Message_MessageHistoryBundle{}
	mi := &file_WAProto_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_MessageHistoryBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_MessageHistoryBundle) ProtoMessage() {}

func (x *Message_MessageHistoryBundle) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_MessageHistoryBundle.ProtoReflect.Descriptor instead.
func (*Message_MessageHistoryBundle) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 45}
}

func (x *Message_MessageHistoryBundle) GetMimetype() string {
	if x != nil && x.Mimetype != nil {
		return *x.Mimetype
	}
	return ""
}

func (x *Message_MessageHistoryBundle) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *Message_MessageHistoryBundle) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Message_MessageHistoryBundle) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *Message_MessageHistoryBundle) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Message_MessageHistoryBundle) GetMediaKeyTimestamp() int64 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *Message_MessageHistoryBundle) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_MessageHistoryBundle) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

type Message_NewsletterAdminInviteMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	NewsletterJid    *string                `protobuf:"bytes,1,opt,name=newsletterJid" json:"newsletterJid,omitempty"`
	NewsletterName   *string                `protobuf:"bytes,2,opt,name=newsletterName" json:"newsletterName,omitempty"`
	JpegThumbnail    []byte                 `protobuf:"bytes,3,opt,name=jpegThumbnail" json:"jpegThumbnail,omitempty"`
	Caption          *string                `protobuf:"bytes,4,opt,name=caption" json:"caption,omitempty"`
	InviteExpiration *int64                 `protobuf:"varint,5,opt,name=inviteExpiration" json:"inviteExpiration,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Message_NewsletterAdminInviteMessage) Reset() {
	*x = Message_NewsletterAdminInviteMessage{}
	mi := &file_WAProto_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_NewsletterAdminInviteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_NewsletterAdminInviteMessage) ProtoMessage() {}

func (x *Message_NewsletterAdminInviteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_NewsletterAdminInviteMessage.ProtoReflect.Descriptor instead.
func (*Message_NewsletterAdminInviteMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 46}
}

func (x *Message_NewsletterAdminInviteMessage) GetNewsletterJid() string {
	if x != nil && x.NewsletterJid != nil {
		return *x.NewsletterJid
	}
	return ""
}

func (x *Message_NewsletterAdminInviteMessage) GetNewsletterName() string {
	if x != nil && x.NewsletterName != nil {
		return *x.NewsletterName
	}
	return ""
}

func (x *Message_NewsletterAdminInviteMessage) GetJpegThumbnail() []byte {
	if x != nil {
		return x.JpegThumbnail
	}
	return nil
}

func (x *Message_NewsletterAdminInviteMessage) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

func (x *Message_NewsletterAdminInviteMessage) GetInviteExpiration() int64 {
	if x != nil && x.InviteExpiration != nil {
		return *x.InviteExpiration
	}
	return 0
}

type Message_OrderMessage struct {
	state                 protoimpl.MessageState             `protogen:"open.v1"`
	OrderId               *string                            `protobuf:"bytes,1,opt,name=orderId" json:"orderId,omitempty"`
	Thumbnail             []byte                             `protobuf:"bytes,2,opt,name=thumbnail" json:"thumbnail,omitempty"`
	ItemCount             *int32                             `protobuf:"varint,3,opt,name=itemCount" json:"itemCount,omitempty"`
	Status                *Message_OrderMessage_OrderStatus  `protobuf:"varint,4,opt,name=status,enum=proto.Message_OrderMessage_OrderStatus" json:"status,omitempty"`
	Surface               *Message_OrderMessage_OrderSurface `protobuf:"varint,5,opt,name=surface,enum=proto.Message_OrderMessage_OrderSurface" json:"surface,omitempty"`
	Message               *string                            `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	OrderTitle            *string                            `protobuf:"bytes,7,opt,name=orderTitle" json:"orderTitle,omitempty"`
	SellerJid             *string                            `protobuf:"bytes,8,opt,name=sellerJid" json:"sellerJid,omitempty"`
	Token                 *string                            `protobuf:"bytes,9,opt,name=token" json:"token,omitempty"`
	TotalAmount1000       *int64                             `protobuf:"varint,10,opt,name=totalAmount1000" json:"totalAmount1000,omitempty"`
	TotalCurrencyCode     *string                            `protobuf:"bytes,11,opt,name=totalCurrencyCode" json:"totalCurrencyCode,omitempty"`
	ContextInfo           *ContextInfo                       `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	MessageVersion        *int32                             `protobuf:"varint,12,opt,name=messageVersion" json:"messageVersion,omitempty"`
	OrderRequestMessageId *MessageKey                        `protobuf:"bytes,13,opt,name=orderRequestMessageId" json:"orderRequestMessageId,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Message_OrderMessage) Reset() {
	*x = Message_OrderMessage{}
	mi := &file_WAProto_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_OrderMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_OrderMessage) ProtoMessage() {}

func (x *Message_OrderMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_OrderMessage.ProtoReflect.Descriptor instead.
func (*Message_OrderMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 47}
}

func (x *Message_OrderMessage) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *Message_OrderMessage) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Message_OrderMessage) GetItemCount() int32 {
	if x != nil && x.ItemCount != nil {
		return *x.ItemCount
	}
	return 0
}

func (x *Message_OrderMessage) GetStatus() Message_OrderMessage_OrderStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Message_OrderMessage_INQUIRY
}

func (x *Message_OrderMessage) GetSurface() Message_OrderMessage_OrderSurface {
	if x != nil && x.Surface != nil {
		return *x.Surface
	}
	return Message_OrderMessage_CATALOG
}

func (x *Message_OrderMessage) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Message_OrderMessage) GetOrderTitle() string {
	if x != nil && x.OrderTitle != nil {
		return *x.OrderTitle
	}
	return ""
}

func (x *Message_OrderMessage) GetSellerJid() string {
	if x != nil && x.SellerJid != nil {
		return *x.SellerJid
	}
	return ""
}

func (x *Message_OrderMessage) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *Message_OrderMessage) GetTotalAmount1000() int64 {
	if x != nil && x.TotalAmount1000 != nil {
		return *x.TotalAmount1000
	}
	return 0
}

func (x *Message_OrderMessage) GetTotalCurrencyCode() string {
	if x != nil && x.TotalCurrencyCode != nil {
		return *x.TotalCurrencyCode
	}
	return ""
}

func (x *Message_OrderMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_OrderMessage) GetMessageVersion() int32 {
	if x != nil && x.MessageVersion != nil {
		return *x.MessageVersion
	}
	return 0
}

func (x *Message_OrderMessage) GetOrderRequestMessageId() *MessageKey {
	if x != nil {
		return x.OrderRequestMessageId
	}
	return nil
}

type Message_PaymentInviteMessage struct {
	state           protoimpl.MessageState                    `protogen:"open.v1"`
	ServiceType     *Message_PaymentInviteMessage_ServiceType `protobuf:"varint,1,opt,name=serviceType,enum=proto.Message_PaymentInviteMessage_ServiceType" json:"serviceType,omitempty"`
	ExpiryTimestamp *int64                                    `protobuf:"varint,2,opt,name=expiryTimestamp" json:"expiryTimestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Message_PaymentInviteMessage) Reset() {
	*x = Message_PaymentInviteMessage{}
	mi := &file_WAProto_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PaymentInviteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PaymentInviteMessage) ProtoMessage() {}

func (x *Message_PaymentInviteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PaymentInviteMessage.ProtoReflect.Descriptor instead.
func (*Message_PaymentInviteMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 48}
}

func (x *Message_PaymentInviteMessage) GetServiceType() Message_PaymentInviteMessage_ServiceType {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return Message_PaymentInviteMessage_UNKNOWN
}

func (x *Message_PaymentInviteMessage) GetExpiryTimestamp() int64 {
	if x != nil && x.ExpiryTimestamp != nil {
		return *x.ExpiryTimestamp
	}
	return 0
}

type Message_PeerDataOperationRequestMessage struct {
	state                           protoimpl.MessageState                                                     `protogen:"open.v1"`
	PeerDataOperationRequestType    *Message_PeerDataOperationRequestType                                      `protobuf:"varint,1,opt,name=peerDataOperationRequestType,enum=proto.Message_PeerDataOperationRequestType" json:"peerDataOperationRequestType,omitempty"`
	RequestStickerReupload          []*Message_PeerDataOperationRequestMessage_RequestStickerReupload          `protobuf:"bytes,2,rep,name=requestStickerReupload" json:"requestStickerReupload,omitempty"`
	RequestUrlPreview               []*Message_PeerDataOperationRequestMessage_RequestUrlPreview               `protobuf:"bytes,3,rep,name=requestUrlPreview" json:"requestUrlPreview,omitempty"`
	HistorySyncOnDemandRequest      *Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest        `protobuf:"bytes,4,opt,name=historySyncOnDemandRequest" json:"historySyncOnDemandRequest,omitempty"`
	PlaceholderMessageResendRequest []*Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest `protobuf:"bytes,5,rep,name=placeholderMessageResendRequest" json:"placeholderMessageResendRequest,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *Message_PeerDataOperationRequestMessage) Reset() {
	*x = Message_PeerDataOperationRequestMessage{}
	mi := &file_WAProto_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PeerDataOperationRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PeerDataOperationRequestMessage) ProtoMessage() {}

func (x *Message_PeerDataOperationRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PeerDataOperationRequestMessage.ProtoReflect.Descriptor instead.
func (*Message_PeerDataOperationRequestMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 49}
}

func (x *Message_PeerDataOperationRequestMessage) GetPeerDataOperationRequestType() Message_PeerDataOperationRequestType {
	if x != nil && x.PeerDataOperationRequestType != nil {
		return *x.PeerDataOperationRequestType
	}
	return Message_UPLOAD_STICKER
}

func (x *Message_PeerDataOperationRequestMessage) GetRequestStickerReupload() []*Message_PeerDataOperationRequestMessage_RequestStickerReupload {
	if x != nil {
		return x.RequestStickerReupload
	}
	return nil
}

func (x *Message_PeerDataOperationRequestMessage) GetRequestUrlPreview() []*Message_PeerDataOperationRequestMessage_RequestUrlPreview {
	if x != nil {
		return x.RequestUrlPreview
	}
	return nil
}

func (x *Message_PeerDataOperationRequestMessage) GetHistorySyncOnDemandRequest() *Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest {
	if x != nil {
		return x.HistorySyncOnDemandRequest
	}
	return nil
}

func (x *Message_PeerDataOperationRequestMessage) GetPlaceholderMessageResendRequest() []*Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest {
	if x != nil {
		return x.PlaceholderMessageResendRequest
	}
	return nil
}

type Message_PeerDataOperationRequestResponseMessage struct {
	state                        protoimpl.MessageState                                                     `protogen:"open.v1"`
	PeerDataOperationRequestType *Message_PeerDataOperationRequestType                                      `protobuf:"varint,1,opt,name=peerDataOperationRequestType,enum=proto.Message_PeerDataOperationRequestType" json:"peerDataOperationRequestType,omitempty"`
	StanzaId                     *string                                                                    `protobuf:"bytes,2,opt,name=stanzaId" json:"stanzaId,omitempty"`
	PeerDataOperationResult      []*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult `protobuf:"bytes,3,rep,name=peerDataOperationResult" json:"peerDataOperationResult,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *Message_PeerDataOperationRequestResponseMessage) Reset() {
	*x = Message_PeerDataOperationRequestResponseMessage{}
	mi := &file_WAProto_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PeerDataOperationRequestResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PeerDataOperationRequestResponseMessage) ProtoMessage() {}

func (x *Message_PeerDataOperationRequestResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PeerDataOperationRequestResponseMessage.ProtoReflect.Descriptor instead.
func (*Message_PeerDataOperationRequestResponseMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 50}
}

func (x *Message_PeerDataOperationRequestResponseMessage) GetPeerDataOperationRequestType() Message_PeerDataOperationRequestType {
	if x != nil && x.PeerDataOperationRequestType != nil {
		return *x.PeerDataOperationRequestType
	}
	return Message_UPLOAD_STICKER
}

func (x *Message_PeerDataOperationRequestResponseMessage) GetStanzaId() string {
	if x != nil && x.StanzaId != nil {
		return *x.StanzaId
	}
	return ""
}

func (x *Message_PeerDataOperationRequestResponseMessage) GetPeerDataOperationResult() []*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult {
	if x != nil {
		return x.PeerDataOperationResult
	}
	return nil
}

type Message_PinInChatMessage struct {
	state             protoimpl.MessageState         `protogen:"open.v1"`
	Key               *MessageKey                    `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Type              *Message_PinInChatMessage_Type `protobuf:"varint,2,opt,name=type,enum=proto.Message_PinInChatMessage_Type" json:"type,omitempty"`
	SenderTimestampMs *int64                         `protobuf:"varint,3,opt,name=senderTimestampMs" json:"senderTimestampMs,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Message_PinInChatMessage) Reset() {
	*x = Message_PinInChatMessage{}
	mi := &file_WAProto_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PinInChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PinInChatMessage) ProtoMessage() {}

func (x *Message_PinInChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PinInChatMessage.ProtoReflect.Descriptor instead.
func (*Message_PinInChatMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 51}
}

func (x *Message_PinInChatMessage) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Message_PinInChatMessage) GetType() Message_PinInChatMessage_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Message_PinInChatMessage_UNKNOWN_TYPE
}

func (x *Message_PinInChatMessage) GetSenderTimestampMs() int64 {
	if x != nil && x.SenderTimestampMs != nil {
		return *x.SenderTimestampMs
	}
	return 0
}

type Message_PlaceholderMessage struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Type          *Message_PlaceholderMessage_PlaceholderType `protobuf:"varint,1,opt,name=type,enum=proto.Message_PlaceholderMessage_PlaceholderType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_PlaceholderMessage) Reset() {
	*x = Message_PlaceholderMessage{}
	mi := &file_WAProto_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PlaceholderMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PlaceholderMessage) ProtoMessage() {}

func (x *Message_PlaceholderMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PlaceholderMessage.ProtoReflect.Descriptor instead.
func (*Message_PlaceholderMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 52}
}

func (x *Message_PlaceholderMessage) GetType() Message_PlaceholderMessage_PlaceholderType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Message_PlaceholderMessage_MASK_LINKED_DEVICES
}

type Message_PollCreationMessage struct {
	state                  protoimpl.MessageState                `protogen:"open.v1"`
	EncKey                 []byte                                `protobuf:"bytes,1,opt,name=encKey" json:"encKey,omitempty"`
	Name                   *string                               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Options                []*Message_PollCreationMessage_Option `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
	SelectableOptionsCount *uint32                               `protobuf:"varint,4,opt,name=selectableOptionsCount" json:"selectableOptionsCount,omitempty"`
	ContextInfo            *ContextInfo                          `protobuf:"bytes,5,opt,name=contextInfo" json:"contextInfo,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Message_PollCreationMessage) Reset() {
	*x = Message_PollCreationMessage{}
	mi := &file_WAProto_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PollCreationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PollCreationMessage) ProtoMessage() {}

func (x *Message_PollCreationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PollCreationMessage.ProtoReflect.Descriptor instead.
func (*Message_PollCreationMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 53}
}

func (x *Message_PollCreationMessage) GetEncKey() []byte {
	if x != nil {
		return x.EncKey
	}
	return nil
}

func (x *Message_PollCreationMessage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Message_PollCreationMessage) GetOptions() []*Message_PollCreationMessage_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Message_PollCreationMessage) GetSelectableOptionsCount() uint32 {
	if x != nil && x.SelectableOptionsCount != nil {
		return *x.SelectableOptionsCount
	}
	return 0
}

func (x *Message_PollCreationMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type Message_PollEncValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncPayload    []byte                 `protobuf:"bytes,1,opt,name=encPayload" json:"encPayload,omitempty"`
	EncIv         []byte                 `protobuf:"bytes,2,opt,name=encIv" json:"encIv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_PollEncValue) Reset() {
	*x = Message_PollEncValue{}
	mi := &file_WAProto_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PollEncValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PollEncValue) ProtoMessage() {}

func (x *Message_PollEncValue) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PollEncValue.ProtoReflect.Descriptor instead.
func (*Message_PollEncValue) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 54}
}

func (x *Message_PollEncValue) GetEncPayload() []byte {
	if x != nil {
		return x.EncPayload
	}
	return nil
}

func (x *Message_PollEncValue) GetEncIv() []byte {
	if x != nil {
		return x.EncIv
	}
	return nil
}

type Message_PollUpdateMessage struct {
	state                  protoimpl.MessageState             `protogen:"open.v1"`
	PollCreationMessageKey *MessageKey                        `protobuf:"bytes,1,opt,name=pollCreationMessageKey" json:"pollCreationMessageKey,omitempty"`
	Vote                   *Message_PollEncValue              `protobuf:"bytes,2,opt,name=vote" json:"vote,omitempty"`
	Metadata               *Message_PollUpdateMessageMetadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	SenderTimestampMs      *int64                             `protobuf:"varint,4,opt,name=senderTimestampMs" json:"senderTimestampMs,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Message_PollUpdateMessage) Reset() {
	*x = Message_PollUpdateMessage{}
	mi := &file_WAProto_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PollUpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PollUpdateMessage) ProtoMessage() {}

func (x *Message_PollUpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PollUpdateMessage.ProtoReflect.Descriptor instead.
func (*Message_PollUpdateMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 55}
}

func (x *Message_PollUpdateMessage) GetPollCreationMessageKey() *MessageKey {
	if x != nil {
		return x.PollCreationMessageKey
	}
	return nil
}

func (x *Message_PollUpdateMessage) GetVote() *Message_PollEncValue {
	if x != nil {
		return x.Vote
	}
	return nil
}

func (x *Message_PollUpdateMessage) GetMetadata() *Message_PollUpdateMessageMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Message_PollUpdateMessage) GetSenderTimestampMs() int64 {
	if x != nil && x.SenderTimestampMs != nil {
		return *x.SenderTimestampMs
	}
	return 0
}

type Message_PollUpdateMessageMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_PollUpdateMessageMetadata) Reset() {
	*x = Message_PollUpdateMessageMetadata{}
	mi := &file_WAProto_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PollUpdateMessageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PollUpdateMessageMetadata) ProtoMessage() {}

func (x *Message_PollUpdateMessageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PollUpdateMessageMetadata.ProtoReflect.Descriptor instead.
func (*Message_PollUpdateMessageMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 56}
}

type Message_PollVoteMessage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SelectedOptions [][]byte               `protobuf:"bytes,1,rep,name=selectedOptions" json:"selectedOptions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Message_PollVoteMessage) Reset() {
	*x = Message_PollVoteMessage{}
	mi := &file_WAProto_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PollVoteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PollVoteMessage) ProtoMessage() {}

func (x *Message_PollVoteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PollVoteMessage.ProtoReflect.Descriptor instead.
func (*Message_PollVoteMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 57}
}

func (x *Message_PollVoteMessage) GetSelectedOptions() [][]byte {
	if x != nil {
		return x.SelectedOptions
	}
	return nil
}

type Message_ProductMessage struct {
	state            protoimpl.MessageState                  `protogen:"open.v1"`
	Product          *Message_ProductMessage_ProductSnapshot `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	BusinessOwnerJid *string                                 `protobuf:"bytes,2,opt,name=businessOwnerJid" json:"businessOwnerJid,omitempty"`
	Catalog          *Message_ProductMessage_CatalogSnapshot `protobuf:"bytes,4,opt,name=catalog" json:"catalog,omitempty"`
	Body             *string                                 `protobuf:"bytes,5,opt,name=body" json:"body,omitempty"`
	Footer           *string                                 `protobuf:"bytes,6,opt,name=footer" json:"footer,omitempty"`
	ContextInfo      *ContextInfo                            `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Message_ProductMessage) Reset() {
	*x = Message_ProductMessage{}
	mi := &file_WAProto_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ProductMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ProductMessage) ProtoMessage() {}

func (x *Message_ProductMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ProductMessage.ProtoReflect.Descriptor instead.
func (*Message_ProductMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 58}
}

func (x *Message_ProductMessage) GetProduct() *Message_ProductMessage_ProductSnapshot {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Message_ProductMessage) GetBusinessOwnerJid() string {
	if x != nil && x.BusinessOwnerJid != nil {
		return *x.BusinessOwnerJid
	}
	return ""
}

func (x *Message_ProductMessage) GetCatalog() *Message_ProductMessage_CatalogSnapshot {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *Message_ProductMessage) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *Message_ProductMessage) GetFooter() string {
	if x != nil && x.Footer != nil {
		return *x.Footer
	}
	return ""
}

func (x *Message_ProductMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type Message_ProtocolMessage struct {
	state                                   protoimpl.MessageState                           `protogen:"open.v1"`
	Key                                     *MessageKey                                      `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Type                                    *Message_ProtocolMessage_Type                    `protobuf:"varint,2,opt,name=type,enum=proto.Message_ProtocolMessage_Type" json:"type,omitempty"`
	EphemeralExpiration                     *uint32                                          `protobuf:"varint,4,opt,name=ephemeralExpiration" json:"ephemeralExpiration,omitempty"`
	EphemeralSettingTimestamp               *int64                                           `protobuf:"varint,5,opt,name=ephemeralSettingTimestamp" json:"ephemeralSettingTimestamp,omitempty"`
	HistorySyncNotification                 *Message_HistorySyncNotification                 `protobuf:"bytes,6,opt,name=historySyncNotification" json:"historySyncNotification,omitempty"`
	AppStateSyncKeyShare                    *Message_AppStateSyncKeyShare                    `protobuf:"bytes,7,opt,name=appStateSyncKeyShare" json:"appStateSyncKeyShare,omitempty"`
	AppStateSyncKeyRequest                  *Message_AppStateSyncKeyRequest                  `protobuf:"bytes,8,opt,name=appStateSyncKeyRequest" json:"appStateSyncKeyRequest,omitempty"`
	InitialSecurityNotificationSettingSync  *Message_InitialSecurityNotificationSettingSync  `protobuf:"bytes,9,opt,name=initialSecurityNotificationSettingSync" json:"initialSecurityNotificationSettingSync,omitempty"`
	AppStateFatalExceptionNotification      *Message_AppStateFatalExceptionNotification      `protobuf:"bytes,10,opt,name=appStateFatalExceptionNotification" json:"appStateFatalExceptionNotification,omitempty"`
	DisappearingMode                        *DisappearingMode                                `protobuf:"bytes,11,opt,name=disappearingMode" json:"disappearingMode,omitempty"`
	EditedMessage                           *Message                                         `protobuf:"bytes,14,opt,name=editedMessage" json:"editedMessage,omitempty"`
	TimestampMs                             *int64                                           `protobuf:"varint,15,opt,name=timestampMs" json:"timestampMs,omitempty"`
	PeerDataOperationRequestMessage         *Message_PeerDataOperationRequestMessage         `protobuf:"bytes,16,opt,name=peerDataOperationRequestMessage" json:"peerDataOperationRequestMessage,omitempty"`
	PeerDataOperationRequestResponseMessage *Message_PeerDataOperationRequestResponseMessage `protobuf:"bytes,17,opt,name=peerDataOperationRequestResponseMessage" json:"peerDataOperationRequestResponseMessage,omitempty"`
	BotFeedbackMessage                      *Message_BotFeedbackMessage                      `protobuf:"bytes,18,opt,name=botFeedbackMessage" json:"botFeedbackMessage,omitempty"`
	InvokerJid                              *string                                          `protobuf:"bytes,19,opt,name=invokerJid" json:"invokerJid,omitempty"`
	RequestWelcomeMessageMetadata           *Message_RequestWelcomeMessageMetadata           `protobuf:"bytes,20,opt,name=requestWelcomeMessageMetadata" json:"requestWelcomeMessageMetadata,omitempty"`
	MediaNotifyMessage                      *MediaNotifyMessage                              `protobuf:"bytes,21,opt,name=mediaNotifyMessage" json:"mediaNotifyMessage,omitempty"`
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *Message_ProtocolMessage) Reset() {
	*x = Message_ProtocolMessage{}
	mi := &file_WAProto_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ProtocolMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ProtocolMessage) ProtoMessage() {}

func (x *Message_ProtocolMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ProtocolMessage.ProtoReflect.Descriptor instead.
func (*Message_ProtocolMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 59}
}

func (x *Message_ProtocolMessage) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Message_ProtocolMessage) GetType() Message_ProtocolMessage_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Message_ProtocolMessage_REVOKE
}

func (x *Message_ProtocolMessage) GetEphemeralExpiration() uint32 {
	if x != nil && x.EphemeralExpiration != nil {
		return *x.EphemeralExpiration
	}
	return 0
}

func (x *Message_ProtocolMessage) GetEphemeralSettingTimestamp() int64 {
	if x != nil && x.EphemeralSettingTimestamp != nil {
		return *x.EphemeralSettingTimestamp
	}
	return 0
}

func (x *Message_ProtocolMessage) GetHistorySyncNotification() *Message_HistorySyncNotification {
	if x != nil {
		return x.HistorySyncNotification
	}
	return nil
}

func (x *Message_ProtocolMessage) GetAppStateSyncKeyShare() *Message_AppStateSyncKeyShare {
	if x != nil {
		return x.AppStateSyncKeyShare
	}
	return nil
}

func (x *Message_ProtocolMessage) GetAppStateSyncKeyRequest() *Message_AppStateSyncKeyRequest {
	if x != nil {
		return x.AppStateSyncKeyRequest
	}
	return nil
}

func (x *Message_ProtocolMessage) GetInitialSecurityNotificationSettingSync() *Message_InitialSecurityNotificationSettingSync {
	if x != nil {
		return x.InitialSecurityNotificationSettingSync
	}
	return nil
}

func (x *Message_ProtocolMessage) GetAppStateFatalExceptionNotification() *Message_AppStateFatalExceptionNotification {
	if x != nil {
		return x.AppStateFatalExceptionNotification
	}
	return nil
}

func (x *Message_ProtocolMessage) GetDisappearingMode() *DisappearingMode {
	if x != nil {
		return x.DisappearingMode
	}
	return nil
}

func (x *Message_ProtocolMessage) GetEditedMessage() *Message {
	if x != nil {
		return x.EditedMessage
	}
	return nil
}

func (x *Message_ProtocolMessage) GetTimestampMs() int64 {
	if x != nil && x.TimestampMs != nil {
		return *x.TimestampMs
	}
	return 0
}

func (x *Message_ProtocolMessage) GetPeerDataOperationRequestMessage() *Message_PeerDataOperationRequestMessage {
	if x != nil {
		return x.PeerDataOperationRequestMessage
	}
	return nil
}

func (x *Message_ProtocolMessage) GetPeerDataOperationRequestResponseMessage() *Message_PeerDataOperationRequestResponseMessage {
	if x != nil {
		return x.PeerDataOperationRequestResponseMessage
	}
	return nil
}

func (x *Message_ProtocolMessage) GetBotFeedbackMessage() *Message_BotFeedbackMessage {
	if x != nil {
		return x.BotFeedbackMessage
	}
	return nil
}

func (x *Message_ProtocolMessage) GetInvokerJid() string {
	if x != nil && x.InvokerJid != nil {
		return *x.InvokerJid
	}
	return ""
}

func (x *Message_ProtocolMessage) GetRequestWelcomeMessageMetadata() *Message_RequestWelcomeMessageMetadata {
	if x != nil {
		return x.RequestWelcomeMessageMetadata
	}
	return nil
}

func (x *Message_ProtocolMessage) GetMediaNotifyMessage() *MediaNotifyMessage {
	if x != nil {
		return x.MediaNotifyMessage
	}
	return nil
}

type Message_ReactionMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Key               *MessageKey            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Text              *string                `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	GroupingKey       *string                `protobuf:"bytes,3,opt,name=groupingKey" json:"groupingKey,omitempty"`
	SenderTimestampMs *int64                 `protobuf:"varint,4,opt,name=senderTimestampMs" json:"senderTimestampMs,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Message_ReactionMessage) Reset() {
	*x = Message_ReactionMessage{}
	mi := &file_WAProto_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ReactionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ReactionMessage) ProtoMessage() {}

func (x *Message_ReactionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ReactionMessage.ProtoReflect.Descriptor instead.
func (*Message_ReactionMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 60}
}

func (x *Message_ReactionMessage) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Message_ReactionMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Message_ReactionMessage) GetGroupingKey() string {
	if x != nil && x.GroupingKey != nil {
		return *x.GroupingKey
	}
	return ""
}

func (x *Message_ReactionMessage) GetSenderTimestampMs() int64 {
	if x != nil && x.SenderTimestampMs != nil {
		return *x.SenderTimestampMs
	}
	return 0
}

type Message_RequestPaymentMessage struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	NoteMessage         *Message               `protobuf:"bytes,4,opt,name=noteMessage" json:"noteMessage,omitempty"`
	CurrencyCodeIso4217 *string                `protobuf:"bytes,1,opt,name=currencyCodeIso4217" json:"currencyCodeIso4217,omitempty"`
	Amount1000          *uint64                `protobuf:"varint,2,opt,name=amount1000" json:"amount1000,omitempty"`
	RequestFrom         *string                `protobuf:"bytes,3,opt,name=requestFrom" json:"requestFrom,omitempty"`
	ExpiryTimestamp     *int64                 `protobuf:"varint,5,opt,name=expiryTimestamp" json:"expiryTimestamp,omitempty"`
	Amount              *Money                 `protobuf:"bytes,6,opt,name=amount" json:"amount,omitempty"`
	Background          *PaymentBackground     `protobuf:"bytes,7,opt,name=background" json:"background,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Message_RequestPaymentMessage) Reset() {
	*x = Message_RequestPaymentMessage{}
	mi := &file_WAProto_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_RequestPaymentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_RequestPaymentMessage) ProtoMessage() {}

func (x *Message_RequestPaymentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_RequestPaymentMessage.ProtoReflect.Descriptor instead.
func (*Message_RequestPaymentMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 61}
}

func (x *Message_RequestPaymentMessage) GetNoteMessage() *Message {
	if x != nil {
		return x.NoteMessage
	}
	return nil
}

func (x *Message_RequestPaymentMessage) GetCurrencyCodeIso4217() string {
	if x != nil && x.CurrencyCodeIso4217 != nil {
		return *x.CurrencyCodeIso4217
	}
	return ""
}

func (x *Message_RequestPaymentMessage) GetAmount1000() uint64 {
	if x != nil && x.Amount1000 != nil {
		return *x.Amount1000
	}
	return 0
}

func (x *Message_RequestPaymentMessage) GetRequestFrom() string {
	if x != nil && x.RequestFrom != nil {
		return *x.RequestFrom
	}
	return ""
}

func (x *Message_RequestPaymentMessage) GetExpiryTimestamp() int64 {
	if x != nil && x.ExpiryTimestamp != nil {
		return *x.ExpiryTimestamp
	}
	return 0
}

func (x *Message_RequestPaymentMessage) GetAmount() *Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Message_RequestPaymentMessage) GetBackground() *PaymentBackground {
	if x != nil {
		return x.Background
	}
	return nil
}

type Message_RequestPhoneNumberMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContextInfo   *ContextInfo           `protobuf:"bytes,1,opt,name=contextInfo" json:"contextInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_RequestPhoneNumberMessage) Reset() {
	*x = Message_RequestPhoneNumberMessage{}
	mi := &file_WAProto_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_RequestPhoneNumberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_RequestPhoneNumberMessage) ProtoMessage() {}

func (x *Message_RequestPhoneNumberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_RequestPhoneNumberMessage.ProtoReflect.Descriptor instead.
func (*Message_RequestPhoneNumberMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 62}
}

func (x *Message_RequestPhoneNumberMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type Message_RequestWelcomeMessageMetadata struct {
	state          protoimpl.MessageState                                `protogen:"open.v1"`
	LocalChatState *Message_RequestWelcomeMessageMetadata_LocalChatState `protobuf:"varint,1,opt,name=localChatState,enum=proto.Message_RequestWelcomeMessageMetadata_LocalChatState" json:"localChatState,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Message_RequestWelcomeMessageMetadata) Reset() {
	*x = Message_RequestWelcomeMessageMetadata{}
	mi := &file_WAProto_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_RequestWelcomeMessageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_RequestWelcomeMessageMetadata) ProtoMessage() {}

func (x *Message_RequestWelcomeMessageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_RequestWelcomeMessageMetadata.ProtoReflect.Descriptor instead.
func (*Message_RequestWelcomeMessageMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 63}
}

func (x *Message_RequestWelcomeMessageMetadata) GetLocalChatState() Message_RequestWelcomeMessageMetadata_LocalChatState {
	if x != nil && x.LocalChatState != nil {
		return *x.LocalChatState
	}
	return Message_RequestWelcomeMessageMetadata_EMPTY
}

type Message_ScheduledCallCreationMessage struct {
	state                protoimpl.MessageState                         `protogen:"open.v1"`
	ScheduledTimestampMs *int64                                         `protobuf:"varint,1,opt,name=scheduledTimestampMs" json:"scheduledTimestampMs,omitempty"`
	CallType             *Message_ScheduledCallCreationMessage_CallType `protobuf:"varint,2,opt,name=callType,enum=proto.Message_ScheduledCallCreationMessage_CallType" json:"callType,omitempty"`
	Title                *string                                        `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Message_ScheduledCallCreationMessage) Reset() {
	*x = Message_ScheduledCallCreationMessage{}
	mi := &file_WAProto_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ScheduledCallCreationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ScheduledCallCreationMessage) ProtoMessage() {}

func (x *Message_ScheduledCallCreationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ScheduledCallCreationMessage.ProtoReflect.Descriptor instead.
func (*Message_ScheduledCallCreationMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 64}
}

func (x *Message_ScheduledCallCreationMessage) GetScheduledTimestampMs() int64 {
	if x != nil && x.ScheduledTimestampMs != nil {
		return *x.ScheduledTimestampMs
	}
	return 0
}

func (x *Message_ScheduledCallCreationMessage) GetCallType() Message_ScheduledCallCreationMessage_CallType {
	if x != nil && x.CallType != nil {
		return *x.CallType
	}
	return Message_ScheduledCallCreationMessage_UNKNOWN
}

func (x *Message_ScheduledCallCreationMessage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type Message_ScheduledCallEditMessage struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Key           *MessageKey                                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	EditType      *Message_ScheduledCallEditMessage_EditType `protobuf:"varint,2,opt,name=editType,enum=proto.Message_ScheduledCallEditMessage_EditType" json:"editType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ScheduledCallEditMessage) Reset() {
	*x = Message_ScheduledCallEditMessage{}
	mi := &file_WAProto_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ScheduledCallEditMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ScheduledCallEditMessage) ProtoMessage() {}

func (x *Message_ScheduledCallEditMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ScheduledCallEditMessage.ProtoReflect.Descriptor instead.
func (*Message_ScheduledCallEditMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 65}
}

func (x *Message_ScheduledCallEditMessage) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Message_ScheduledCallEditMessage) GetEditType() Message_ScheduledCallEditMessage_EditType {
	if x != nil && x.EditType != nil {
		return *x.EditType
	}
	return Message_ScheduledCallEditMessage_UNKNOWN
}

type Message_SendPaymentMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NoteMessage       *Message               `protobuf:"bytes,2,opt,name=noteMessage" json:"noteMessage,omitempty"`
	RequestMessageKey *MessageKey            `protobuf:"bytes,3,opt,name=requestMessageKey" json:"requestMessageKey,omitempty"`
	Background        *PaymentBackground     `protobuf:"bytes,4,opt,name=background" json:"background,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Message_SendPaymentMessage) Reset() {
	*x = Message_SendPaymentMessage{}
	mi := &file_WAProto_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_SendPaymentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_SendPaymentMessage) ProtoMessage() {}

func (x *Message_SendPaymentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_SendPaymentMessage.ProtoReflect.Descriptor instead.
func (*Message_SendPaymentMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 66}
}

func (x *Message_SendPaymentMessage) GetNoteMessage() *Message {
	if x != nil {
		return x.NoteMessage
	}
	return nil
}

func (x *Message_SendPaymentMessage) GetRequestMessageKey() *MessageKey {
	if x != nil {
		return x.RequestMessageKey
	}
	return nil
}

func (x *Message_SendPaymentMessage) GetBackground() *PaymentBackground {
	if x != nil {
		return x.Background
	}
	return nil
}

type Message_SenderKeyDistributionMessage struct {
	state                               protoimpl.MessageState `protogen:"open.v1"`
	GroupId                             *string                `protobuf:"bytes,1,opt,name=groupId" json:"groupId,omitempty"`
	AxolotlSenderKeyDistributionMessage []byte                 `protobuf:"bytes,2,opt,name=axolotlSenderKeyDistributionMessage" json:"axolotlSenderKeyDistributionMessage,omitempty"`
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *Message_SenderKeyDistributionMessage) Reset() {
	*x = Message_SenderKeyDistributionMessage{}
	mi := &file_WAProto_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_SenderKeyDistributionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_SenderKeyDistributionMessage) ProtoMessage() {}

func (x *Message_SenderKeyDistributionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_SenderKeyDistributionMessage.ProtoReflect.Descriptor instead.
func (*Message_SenderKeyDistributionMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 67}
}

func (x *Message_SenderKeyDistributionMessage) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *Message_SenderKeyDistributionMessage) GetAxolotlSenderKeyDistributionMessage() []byte {
	if x != nil {
		return x.AxolotlSenderKeyDistributionMessage
	}
	return nil
}

type Message_StickerMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Url               *string                `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	FileSha256        []byte                 `protobuf:"bytes,2,opt,name=fileSha256" json:"fileSha256,omitempty"`
	FileEncSha256     []byte                 `protobuf:"bytes,3,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	MediaKey          []byte                 `protobuf:"bytes,4,opt,name=mediaKey" json:"mediaKey,omitempty"`
	Mimetype          *string                `protobuf:"bytes,5,opt,name=mimetype" json:"mimetype,omitempty"`
	Height            *uint32                `protobuf:"varint,6,opt,name=height" json:"height,omitempty"`
	Width             *uint32                `protobuf:"varint,7,opt,name=width" json:"width,omitempty"`
	DirectPath        *string                `protobuf:"bytes,8,opt,name=directPath" json:"directPath,omitempty"`
	FileLength        *uint64                `protobuf:"varint,9,opt,name=fileLength" json:"fileLength,omitempty"`
	MediaKeyTimestamp *int64                 `protobuf:"varint,10,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	FirstFrameLength  *uint32                `protobuf:"varint,11,opt,name=firstFrameLength" json:"firstFrameLength,omitempty"`
	FirstFrameSidecar []byte                 `protobuf:"bytes,12,opt,name=firstFrameSidecar" json:"firstFrameSidecar,omitempty"`
	IsAnimated        *bool                  `protobuf:"varint,13,opt,name=isAnimated" json:"isAnimated,omitempty"`
	PngThumbnail      []byte                 `protobuf:"bytes,16,opt,name=pngThumbnail" json:"pngThumbnail,omitempty"`
	ContextInfo       *ContextInfo           `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	StickerSentTs     *int64                 `protobuf:"varint,18,opt,name=stickerSentTs" json:"stickerSentTs,omitempty"`
	IsAvatar          *bool                  `protobuf:"varint,19,opt,name=isAvatar" json:"isAvatar,omitempty"`
	IsAiSticker       *bool                  `protobuf:"varint,20,opt,name=isAiSticker" json:"isAiSticker,omitempty"`
	IsLottie          *bool                  `protobuf:"varint,21,opt,name=isLottie" json:"isLottie,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Message_StickerMessage) Reset() {
	*x = Message_StickerMessage{}
	mi := &file_WAProto_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_StickerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_StickerMessage) ProtoMessage() {}

func (x *Message_StickerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_StickerMessage.ProtoReflect.Descriptor instead.
func (*Message_StickerMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 68}
}

func (x *Message_StickerMessage) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Message_StickerMessage) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *Message_StickerMessage) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *Message_StickerMessage) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Message_StickerMessage) GetMimetype() string {
	if x != nil && x.Mimetype != nil {
		return *x.Mimetype
	}
	return ""
}

func (x *Message_StickerMessage) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *Message_StickerMessage) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Message_StickerMessage) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Message_StickerMessage) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *Message_StickerMessage) GetMediaKeyTimestamp() int64 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *Message_StickerMessage) GetFirstFrameLength() uint32 {
	if x != nil && x.FirstFrameLength != nil {
		return *x.FirstFrameLength
	}
	return 0
}

func (x *Message_StickerMessage) GetFirstFrameSidecar() []byte {
	if x != nil {
		return x.FirstFrameSidecar
	}
	return nil
}

func (x *Message_StickerMessage) GetIsAnimated() bool {
	if x != nil && x.IsAnimated != nil {
		return *x.IsAnimated
	}
	return false
}

func (x *Message_StickerMessage) GetPngThumbnail() []byte {
	if x != nil {
		return x.PngThumbnail
	}
	return nil
}

func (x *Message_StickerMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_StickerMessage) GetStickerSentTs() int64 {
	if x != nil && x.StickerSentTs != nil {
		return *x.StickerSentTs
	}
	return 0
}

func (x *Message_StickerMessage) GetIsAvatar() bool {
	if x != nil && x.IsAvatar != nil {
		return *x.IsAvatar
	}
	return false
}

func (x *Message_StickerMessage) GetIsAiSticker() bool {
	if x != nil && x.IsAiSticker != nil {
		return *x.IsAiSticker
	}
	return false
}

func (x *Message_StickerMessage) GetIsLottie() bool {
	if x != nil && x.IsLottie != nil {
		return *x.IsLottie
	}
	return false
}

type Message_StickerSyncRMRMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Filehash         []string               `protobuf:"bytes,1,rep,name=filehash" json:"filehash,omitempty"`
	RmrSource        *string                `protobuf:"bytes,2,opt,name=rmrSource" json:"rmrSource,omitempty"`
	RequestTimestamp *int64                 `protobuf:"varint,3,opt,name=requestTimestamp" json:"requestTimestamp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Message_StickerSyncRMRMessage) Reset() {
	*x = Message_StickerSyncRMRMessage{}
	mi := &file_WAProto_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_StickerSyncRMRMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_StickerSyncRMRMessage) ProtoMessage() {}

func (x *Message_StickerSyncRMRMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_StickerSyncRMRMessage.ProtoReflect.Descriptor instead.
func (*Message_StickerSyncRMRMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 69}
}

func (x *Message_StickerSyncRMRMessage) GetFilehash() []string {
	if x != nil {
		return x.Filehash
	}
	return nil
}

func (x *Message_StickerSyncRMRMessage) GetRmrSource() string {
	if x != nil && x.RmrSource != nil {
		return *x.RmrSource
	}
	return ""
}

func (x *Message_StickerSyncRMRMessage) GetRequestTimestamp() int64 {
	if x != nil && x.RequestTimestamp != nil {
		return *x.RequestTimestamp
	}
	return 0
}

type Message_TemplateButtonReplyMessage struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	SelectedId                *string                `protobuf:"bytes,1,opt,name=selectedId" json:"selectedId,omitempty"`
	SelectedDisplayText       *string                `protobuf:"bytes,2,opt,name=selectedDisplayText" json:"selectedDisplayText,omitempty"`
	ContextInfo               *ContextInfo           `protobuf:"bytes,3,opt,name=contextInfo" json:"contextInfo,omitempty"`
	SelectedIndex             *uint32                `protobuf:"varint,4,opt,name=selectedIndex" json:"selectedIndex,omitempty"`
	SelectedCarouselCardIndex *uint32                `protobuf:"varint,5,opt,name=selectedCarouselCardIndex" json:"selectedCarouselCardIndex,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Message_TemplateButtonReplyMessage) Reset() {
	*x = Message_TemplateButtonReplyMessage{}
	mi := &file_WAProto_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_TemplateButtonReplyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_TemplateButtonReplyMessage) ProtoMessage() {}

func (x *Message_TemplateButtonReplyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_TemplateButtonReplyMessage.ProtoReflect.Descriptor instead.
func (*Message_TemplateButtonReplyMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 70}
}

func (x *Message_TemplateButtonReplyMessage) GetSelectedId() string {
	if x != nil && x.SelectedId != nil {
		return *x.SelectedId
	}
	return ""
}

func (x *Message_TemplateButtonReplyMessage) GetSelectedDisplayText() string {
	if x != nil && x.SelectedDisplayText != nil {
		return *x.SelectedDisplayText
	}
	return ""
}

func (x *Message_TemplateButtonReplyMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_TemplateButtonReplyMessage) GetSelectedIndex() uint32 {
	if x != nil && x.SelectedIndex != nil {
		return *x.SelectedIndex
	}
	return 0
}

func (x *Message_TemplateButtonReplyMessage) GetSelectedCarouselCardIndex() uint32 {
	if x != nil && x.SelectedCarouselCardIndex != nil {
		return *x.SelectedCarouselCardIndex
	}
	return 0
}

type Message_TemplateMessage struct {
	state            protoimpl.MessageState                           `protogen:"open.v1"`
	ContextInfo      *ContextInfo                                     `protobuf:"bytes,3,opt,name=contextInfo" json:"contextInfo,omitempty"`
	HydratedTemplate *Message_TemplateMessage_HydratedFourRowTemplate `protobuf:"bytes,4,opt,name=hydratedTemplate" json:"hydratedTemplate,omitempty"`
	TemplateId       *string                                          `protobuf:"bytes,9,opt,name=templateId" json:"templateId,omitempty"`
	// Types that are valid to be assigned to Format:
	//
	//	*Message_TemplateMessage_FourRowTemplate_
	//	*Message_TemplateMessage_HydratedFourRowTemplate_
	//	*Message_TemplateMessage_InteractiveMessageTemplate
	Format        isMessage_TemplateMessage_Format `protobuf_oneof:"format"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_TemplateMessage) Reset() {
	*x = Message_TemplateMessage{}
	mi := &file_WAProto_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_TemplateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_TemplateMessage) ProtoMessage() {}

func (x *Message_TemplateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_TemplateMessage.ProtoReflect.Descriptor instead.
func (*Message_TemplateMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 71}
}

func (x *Message_TemplateMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_TemplateMessage) GetHydratedTemplate() *Message_TemplateMessage_HydratedFourRowTemplate {
	if x != nil {
		return x.HydratedTemplate
	}
	return nil
}

func (x *Message_TemplateMessage) GetTemplateId() string {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return ""
}

func (x *Message_TemplateMessage) GetFormat() isMessage_TemplateMessage_Format {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *Message_TemplateMessage) GetFourRowTemplate() *Message_TemplateMessage_FourRowTemplate {
	if x != nil {
		if x, ok := x.Format.(*Message_TemplateMessage_FourRowTemplate_); ok {
			return x.FourRowTemplate
		}
	}
	return nil
}

func (x *Message_TemplateMessage) GetHydratedFourRowTemplate() *Message_TemplateMessage_HydratedFourRowTemplate {
	if x != nil {
		if x, ok := x.Format.(*Message_TemplateMessage_HydratedFourRowTemplate_); ok {
			return x.HydratedFourRowTemplate
		}
	}
	return nil
}

func (x *Message_TemplateMessage) GetInteractiveMessageTemplate() *Message_InteractiveMessage {
	if x != nil {
		if x, ok := x.Format.(*Message_TemplateMessage_InteractiveMessageTemplate); ok {
			return x.InteractiveMessageTemplate
		}
	}
	return nil
}

type isMessage_TemplateMessage_Format interface {
	isMessage_TemplateMessage_Format()
}

type Message_TemplateMessage_FourRowTemplate_ struct {
	FourRowTemplate *Message_TemplateMessage_FourRowTemplate `protobuf:"bytes,1,opt,name=fourRowTemplate,oneof"`
}

type Message_TemplateMessage_HydratedFourRowTemplate_ struct {
	HydratedFourRowTemplate *Message_TemplateMessage_HydratedFourRowTemplate `protobuf:"bytes,2,opt,name=hydratedFourRowTemplate,oneof"`
}

type Message_TemplateMessage_InteractiveMessageTemplate struct {
	InteractiveMessageTemplate *Message_InteractiveMessage `protobuf:"bytes,5,opt,name=interactiveMessageTemplate,oneof"`
}

func (*Message_TemplateMessage_FourRowTemplate_) isMessage_TemplateMessage_Format() {}

func (*Message_TemplateMessage_HydratedFourRowTemplate_) isMessage_TemplateMessage_Format() {}

func (*Message_TemplateMessage_InteractiveMessageTemplate) isMessage_TemplateMessage_Format() {}

type Message_VideoMessage struct {
	state                  protoimpl.MessageState            `protogen:"open.v1"`
	Url                    *string                           `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Mimetype               *string                           `protobuf:"bytes,2,opt,name=mimetype" json:"mimetype,omitempty"`
	FileSha256             []byte                            `protobuf:"bytes,3,opt,name=fileSha256" json:"fileSha256,omitempty"`
	FileLength             *uint64                           `protobuf:"varint,4,opt,name=fileLength" json:"fileLength,omitempty"`
	Seconds                *uint32                           `protobuf:"varint,5,opt,name=seconds" json:"seconds,omitempty"`
	MediaKey               []byte                            `protobuf:"bytes,6,opt,name=mediaKey" json:"mediaKey,omitempty"`
	Caption                *string                           `protobuf:"bytes,7,opt,name=caption" json:"caption,omitempty"`
	GifPlayback            *bool                             `protobuf:"varint,8,opt,name=gifPlayback" json:"gifPlayback,omitempty"`
	Height                 *uint32                           `protobuf:"varint,9,opt,name=height" json:"height,omitempty"`
	Width                  *uint32                           `protobuf:"varint,10,opt,name=width" json:"width,omitempty"`
	FileEncSha256          []byte                            `protobuf:"bytes,11,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	InteractiveAnnotations []*InteractiveAnnotation          `protobuf:"bytes,12,rep,name=interactiveAnnotations" json:"interactiveAnnotations,omitempty"`
	DirectPath             *string                           `protobuf:"bytes,13,opt,name=directPath" json:"directPath,omitempty"`
	MediaKeyTimestamp      *int64                            `protobuf:"varint,14,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	JpegThumbnail          []byte                            `protobuf:"bytes,16,opt,name=jpegThumbnail" json:"jpegThumbnail,omitempty"`
	ContextInfo            *ContextInfo                      `protobuf:"bytes,17,opt,name=contextInfo" json:"contextInfo,omitempty"`
	StreamingSidecar       []byte                            `protobuf:"bytes,18,opt,name=streamingSidecar" json:"streamingSidecar,omitempty"`
	GifAttribution         *Message_VideoMessage_Attribution `protobuf:"varint,19,opt,name=gifAttribution,enum=proto.Message_VideoMessage_Attribution" json:"gifAttribution,omitempty"`
	ViewOnce               *bool                             `protobuf:"varint,20,opt,name=viewOnce" json:"viewOnce,omitempty"`
	ThumbnailDirectPath    *string                           `protobuf:"bytes,21,opt,name=thumbnailDirectPath" json:"thumbnailDirectPath,omitempty"`
	ThumbnailSha256        []byte                            `protobuf:"bytes,22,opt,name=thumbnailSha256" json:"thumbnailSha256,omitempty"`
	ThumbnailEncSha256     []byte                            `protobuf:"bytes,23,opt,name=thumbnailEncSha256" json:"thumbnailEncSha256,omitempty"`
	StaticUrl              *string                           `protobuf:"bytes,24,opt,name=staticUrl" json:"staticUrl,omitempty"`
	Annotations            []*InteractiveAnnotation          `protobuf:"bytes,25,rep,name=annotations" json:"annotations,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Message_VideoMessage) Reset() {
	*x = Message_VideoMessage{}
	mi := &file_WAProto_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_VideoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_VideoMessage) ProtoMessage() {}

func (x *Message_VideoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_VideoMessage.ProtoReflect.Descriptor instead.
func (*Message_VideoMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 72}
}

func (x *Message_VideoMessage) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Message_VideoMessage) GetMimetype() string {
	if x != nil && x.Mimetype != nil {
		return *x.Mimetype
	}
	return ""
}

func (x *Message_VideoMessage) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *Message_VideoMessage) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *Message_VideoMessage) GetSeconds() uint32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *Message_VideoMessage) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Message_VideoMessage) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

func (x *Message_VideoMessage) GetGifPlayback() bool {
	if x != nil && x.GifPlayback != nil {
		return *x.GifPlayback
	}
	return false
}

func (x *Message_VideoMessage) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *Message_VideoMessage) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Message_VideoMessage) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *Message_VideoMessage) GetInteractiveAnnotations() []*InteractiveAnnotation {
	if x != nil {
		return x.InteractiveAnnotations
	}
	return nil
}

func (x *Message_VideoMessage) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Message_VideoMessage) GetMediaKeyTimestamp() int64 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *Message_VideoMessage) GetJpegThumbnail() []byte {
	if x != nil {
		return x.JpegThumbnail
	}
	return nil
}

func (x *Message_VideoMessage) GetContextInfo() *ContextInfo {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

func (x *Message_VideoMessage) GetStreamingSidecar() []byte {
	if x != nil {
		return x.StreamingSidecar
	}
	return nil
}

func (x *Message_VideoMessage) GetGifAttribution() Message_VideoMessage_Attribution {
	if x != nil && x.GifAttribution != nil {
		return *x.GifAttribution
	}
	return Message_VideoMessage_NONE
}

func (x *Message_VideoMessage) GetViewOnce() bool {
	if x != nil && x.ViewOnce != nil {
		return *x.ViewOnce
	}
	return false
}

func (x *Message_VideoMessage) GetThumbnailDirectPath() string {
	if x != nil && x.ThumbnailDirectPath != nil {
		return *x.ThumbnailDirectPath
	}
	return ""
}

func (x *Message_VideoMessage) GetThumbnailSha256() []byte {
	if x != nil {
		return x.ThumbnailSha256
	}
	return nil
}

func (x *Message_VideoMessage) GetThumbnailEncSha256() []byte {
	if x != nil {
		return x.ThumbnailEncSha256
	}
	return nil
}

func (x *Message_VideoMessage) GetStaticUrl() string {
	if x != nil && x.StaticUrl != nil {
		return *x.StaticUrl
	}
	return ""
}

func (x *Message_VideoMessage) GetAnnotations() []*InteractiveAnnotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type Message_ButtonsMessage_Button struct {
	state          protoimpl.MessageState                        `protogen:"open.v1"`
	ButtonId       *string                                       `protobuf:"bytes,1,opt,name=buttonId" json:"buttonId,omitempty"`
	ButtonText     *Message_ButtonsMessage_Button_ButtonText     `protobuf:"bytes,2,opt,name=buttonText" json:"buttonText,omitempty"`
	Type           *Message_ButtonsMessage_Button_Type           `protobuf:"varint,3,opt,name=type,enum=proto.Message_ButtonsMessage_Button_Type" json:"type,omitempty"`
	NativeFlowInfo *Message_ButtonsMessage_Button_NativeFlowInfo `protobuf:"bytes,4,opt,name=nativeFlowInfo" json:"nativeFlowInfo,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Message_ButtonsMessage_Button) Reset() {
	*x = Message_ButtonsMessage_Button{}
	mi := &file_WAProto_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ButtonsMessage_Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ButtonsMessage_Button) ProtoMessage() {}

func (x *Message_ButtonsMessage_Button) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ButtonsMessage_Button.ProtoReflect.Descriptor instead.
func (*Message_ButtonsMessage_Button) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 10, 0}
}

func (x *Message_ButtonsMessage_Button) GetButtonId() string {
	if x != nil && x.ButtonId != nil {
		return *x.ButtonId
	}
	return ""
}

func (x *Message_ButtonsMessage_Button) GetButtonText() *Message_ButtonsMessage_Button_ButtonText {
	if x != nil {
		return x.ButtonText
	}
	return nil
}

func (x *Message_ButtonsMessage_Button) GetType() Message_ButtonsMessage_Button_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Message_ButtonsMessage_Button_UNKNOWN
}

func (x *Message_ButtonsMessage_Button) GetNativeFlowInfo() *Message_ButtonsMessage_Button_NativeFlowInfo {
	if x != nil {
		return x.NativeFlowInfo
	}
	return nil
}

type Message_ButtonsMessage_Button_ButtonText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayText   *string                `protobuf:"bytes,1,opt,name=displayText" json:"displayText,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ButtonsMessage_Button_ButtonText) Reset() {
	*x = Message_ButtonsMessage_Button_ButtonText{}
	mi := &file_WAProto_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ButtonsMessage_Button_ButtonText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ButtonsMessage_Button_ButtonText) ProtoMessage() {}

func (x *Message_ButtonsMessage_Button_ButtonText) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ButtonsMessage_Button_ButtonText.ProtoReflect.Descriptor instead.
func (*Message_ButtonsMessage_Button_ButtonText) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 10, 0, 0}
}

func (x *Message_ButtonsMessage_Button_ButtonText) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

type Message_ButtonsMessage_Button_NativeFlowInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ParamsJson    *string                `protobuf:"bytes,2,opt,name=paramsJson" json:"paramsJson,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ButtonsMessage_Button_NativeFlowInfo) Reset() {
	*x = Message_ButtonsMessage_Button_NativeFlowInfo{}
	mi := &file_WAProto_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ButtonsMessage_Button_NativeFlowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ButtonsMessage_Button_NativeFlowInfo) ProtoMessage() {}

func (x *Message_ButtonsMessage_Button_NativeFlowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ButtonsMessage_Button_NativeFlowInfo.ProtoReflect.Descriptor instead.
func (*Message_ButtonsMessage_Button_NativeFlowInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 10, 0, 1}
}

func (x *Message_ButtonsMessage_Button_NativeFlowInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Message_ButtonsMessage_Button_NativeFlowInfo) GetParamsJson() string {
	if x != nil && x.ParamsJson != nil {
		return *x.ParamsJson
	}
	return ""
}

type Message_CallLogMessage_CallParticipant struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Jid           *string                             `protobuf:"bytes,1,opt,name=jid" json:"jid,omitempty"`
	CallOutcome   *Message_CallLogMessage_CallOutcome `protobuf:"varint,2,opt,name=callOutcome,enum=proto.Message_CallLogMessage_CallOutcome" json:"callOutcome,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_CallLogMessage_CallParticipant) Reset() {
	*x = Message_CallLogMessage_CallParticipant{}
	mi := &file_WAProto_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_CallLogMessage_CallParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_CallLogMessage_CallParticipant) ProtoMessage() {}

func (x *Message_CallLogMessage_CallParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_CallLogMessage_CallParticipant.ProtoReflect.Descriptor instead.
func (*Message_CallLogMessage_CallParticipant) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 13, 0}
}

func (x *Message_CallLogMessage_CallParticipant) GetJid() string {
	if x != nil && x.Jid != nil {
		return *x.Jid
	}
	return ""
}

func (x *Message_CallLogMessage_CallParticipant) GetCallOutcome() Message_CallLogMessage_CallOutcome {
	if x != nil && x.CallOutcome != nil {
		return *x.CallOutcome
	}
	return Message_CallLogMessage_CONNECTED
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Default *string                `protobuf:"bytes,1,opt,name=default" json:"default,omitempty"`
	// Types that are valid to be assigned to ParamOneof:
	//
	//	*Message_HighlyStructuredMessage_HSMLocalizableParameter_Currency
	//	*Message_HighlyStructuredMessage_HSMLocalizableParameter_DateTime
	ParamOneof    isMessage_HighlyStructuredMessage_HSMLocalizableParameter_ParamOneof `protobuf_oneof:"paramOneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter) Reset() {
	*x = Message_HighlyStructuredMessage_HSMLocalizableParameter{}
	mi := &file_WAProto_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_HighlyStructuredMessage_HSMLocalizableParameter) ProtoMessage() {}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_HighlyStructuredMessage_HSMLocalizableParameter.ProtoReflect.Descriptor instead.
func (*Message_HighlyStructuredMessage_HSMLocalizableParameter) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 33, 0}
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter) GetDefault() string {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return ""
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter) GetParamOneof() isMessage_HighlyStructuredMessage_HSMLocalizableParameter_ParamOneof {
	if x != nil {
		return x.ParamOneof
	}
	return nil
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter) GetCurrency() *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency {
	if x != nil {
		if x, ok := x.ParamOneof.(*Message_HighlyStructuredMessage_HSMLocalizableParameter_Currency); ok {
			return x.Currency
		}
	}
	return nil
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter) GetDateTime() *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime {
	if x != nil {
		if x, ok := x.ParamOneof.(*Message_HighlyStructuredMessage_HSMLocalizableParameter_DateTime); ok {
			return x.DateTime
		}
	}
	return nil
}

type isMessage_HighlyStructuredMessage_HSMLocalizableParameter_ParamOneof interface {
	isMessage_HighlyStructuredMessage_HSMLocalizableParameter_ParamOneof()
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter_Currency struct {
	Currency *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency `protobuf:"bytes,2,opt,name=currency,oneof"`
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter_DateTime struct {
	DateTime *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime `protobuf:"bytes,3,opt,name=dateTime,oneof"`
}

func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_Currency) isMessage_HighlyStructuredMessage_HSMLocalizableParameter_ParamOneof() {
}

func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_DateTime) isMessage_HighlyStructuredMessage_HSMLocalizableParameter_ParamOneof() {
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrencyCode  *string                `protobuf:"bytes,1,opt,name=currencyCode" json:"currencyCode,omitempty"`
	Amount1000    *int64                 `protobuf:"varint,2,opt,name=amount1000" json:"amount1000,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency) Reset() {
	*x = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency{}
	mi := &file_WAProto_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency) ProtoMessage() {}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency.ProtoReflect.Descriptor instead.
func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 33, 0, 0}
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency) GetAmount1000() int64 {
	if x != nil && x.Amount1000 != nil {
		return *x.Amount1000
	}
	return 0
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to DatetimeOneof:
	//
	//	*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_Component
	//	*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_UnixEpoch
	DatetimeOneof isMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_DatetimeOneof `protobuf_oneof:"datetimeOneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime) Reset() {
	*x = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime{}
	mi := &file_WAProto_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime) ProtoMessage() {}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime.ProtoReflect.Descriptor instead.
func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 33, 0, 1}
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime) GetDatetimeOneof() isMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_DatetimeOneof {
	if x != nil {
		return x.DatetimeOneof
	}
	return nil
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime) GetComponent() *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent {
	if x != nil {
		if x, ok := x.DatetimeOneof.(*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_Component); ok {
			return x.Component
		}
	}
	return nil
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime) GetUnixEpoch() *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch {
	if x != nil {
		if x, ok := x.DatetimeOneof.(*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_UnixEpoch); ok {
			return x.UnixEpoch
		}
	}
	return nil
}

type isMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_DatetimeOneof interface {
	isMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_DatetimeOneof()
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_Component struct {
	Component *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent `protobuf:"bytes,1,opt,name=component,oneof"`
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_UnixEpoch struct {
	UnixEpoch *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch `protobuf:"bytes,2,opt,name=unixEpoch,oneof"`
}

func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_Component) isMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_DatetimeOneof() {
}

func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_UnixEpoch) isMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_DatetimeOneof() {
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent struct {
	state         protoimpl.MessageState                                                                                  `protogen:"open.v1"`
	DayOfWeek     *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType `protobuf:"varint,1,opt,name=dayOfWeek,enum=proto.Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType" json:"dayOfWeek,omitempty"`
	Year          *uint32                                                                                                 `protobuf:"varint,2,opt,name=year" json:"year,omitempty"`
	Month         *uint32                                                                                                 `protobuf:"varint,3,opt,name=month" json:"month,omitempty"`
	DayOfMonth    *uint32                                                                                                 `protobuf:"varint,4,opt,name=dayOfMonth" json:"dayOfMonth,omitempty"`
	Hour          *uint32                                                                                                 `protobuf:"varint,5,opt,name=hour" json:"hour,omitempty"`
	Minute        *uint32                                                                                                 `protobuf:"varint,6,opt,name=minute" json:"minute,omitempty"`
	Calendar      *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType  `protobuf:"varint,7,opt,name=calendar,enum=proto.Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType" json:"calendar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) Reset() {
	*x = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent{}
	mi := &file_WAProto_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) ProtoMessage() {
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent.ProtoReflect.Descriptor instead.
func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 33, 0, 1, 0}
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) GetDayOfWeek() Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_MONDAY
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) GetYear() uint32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) GetMonth() uint32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) GetDayOfMonth() uint32 {
	if x != nil && x.DayOfMonth != nil {
		return *x.DayOfMonth
	}
	return 0
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) GetHour() uint32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) GetMinute() uint32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent) GetCalendar() Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType {
	if x != nil && x.Calendar != nil {
		return *x.Calendar
	}
	return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_GREGORIAN
}

type Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *int64                 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch) Reset() {
	*x = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch{}
	mi := &file_WAProto_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch) ProtoMessage() {
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch.ProtoReflect.Descriptor instead.
func (*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 33, 0, 1, 1}
}

func (x *Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type Message_InteractiveMessage_Body struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          *string                `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_InteractiveMessage_Body) Reset() {
	*x = Message_InteractiveMessage_Body{}
	mi := &file_WAProto_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveMessage_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveMessage_Body) ProtoMessage() {}

func (x *Message_InteractiveMessage_Body) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveMessage_Body.ProtoReflect.Descriptor instead.
func (*Message_InteractiveMessage_Body) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 37, 0}
}

func (x *Message_InteractiveMessage_Body) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type Message_InteractiveMessage_CarouselMessage struct {
	state          protoimpl.MessageState        `protogen:"open.v1"`
	Cards          []*Message_InteractiveMessage `protobuf:"bytes,1,rep,name=cards" json:"cards,omitempty"`
	MessageVersion *int32                        `protobuf:"varint,2,opt,name=messageVersion" json:"messageVersion,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Message_InteractiveMessage_CarouselMessage) Reset() {
	*x = Message_InteractiveMessage_CarouselMessage{}
	mi := &file_WAProto_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveMessage_CarouselMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveMessage_CarouselMessage) ProtoMessage() {}

func (x *Message_InteractiveMessage_CarouselMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveMessage_CarouselMessage.ProtoReflect.Descriptor instead.
func (*Message_InteractiveMessage_CarouselMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 37, 1}
}

func (x *Message_InteractiveMessage_CarouselMessage) GetCards() []*Message_InteractiveMessage {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Message_InteractiveMessage_CarouselMessage) GetMessageVersion() int32 {
	if x != nil && x.MessageVersion != nil {
		return *x.MessageVersion
	}
	return 0
}

type Message_InteractiveMessage_CollectionMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BizJid         *string                `protobuf:"bytes,1,opt,name=bizJid" json:"bizJid,omitempty"`
	Id             *string                `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	MessageVersion *int32                 `protobuf:"varint,3,opt,name=messageVersion" json:"messageVersion,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Message_InteractiveMessage_CollectionMessage) Reset() {
	*x = Message_InteractiveMessage_CollectionMessage{}
	mi := &file_WAProto_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveMessage_CollectionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveMessage_CollectionMessage) ProtoMessage() {}

func (x *Message_InteractiveMessage_CollectionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveMessage_CollectionMessage.ProtoReflect.Descriptor instead.
func (*Message_InteractiveMessage_CollectionMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 37, 2}
}

func (x *Message_InteractiveMessage_CollectionMessage) GetBizJid() string {
	if x != nil && x.BizJid != nil {
		return *x.BizJid
	}
	return ""
}

func (x *Message_InteractiveMessage_CollectionMessage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Message_InteractiveMessage_CollectionMessage) GetMessageVersion() int32 {
	if x != nil && x.MessageVersion != nil {
		return *x.MessageVersion
	}
	return 0
}

type Message_InteractiveMessage_Footer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          *string                `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_InteractiveMessage_Footer) Reset() {
	*x = Message_InteractiveMessage_Footer{}
	mi := &file_WAProto_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveMessage_Footer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveMessage_Footer) ProtoMessage() {}

func (x *Message_InteractiveMessage_Footer) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveMessage_Footer.ProtoReflect.Descriptor instead.
func (*Message_InteractiveMessage_Footer) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 37, 3}
}

func (x *Message_InteractiveMessage_Footer) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type Message_InteractiveMessage_Header struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Title              *string                `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Subtitle           *string                `protobuf:"bytes,2,opt,name=subtitle" json:"subtitle,omitempty"`
	HasMediaAttachment *bool                  `protobuf:"varint,5,opt,name=hasMediaAttachment" json:"hasMediaAttachment,omitempty"`
	// Types that are valid to be assigned to Media:
	//
	//	*Message_InteractiveMessage_Header_DocumentMessage
	//	*Message_InteractiveMessage_Header_ImageMessage
	//	*Message_InteractiveMessage_Header_JpegThumbnail
	//	*Message_InteractiveMessage_Header_VideoMessage
	//	*Message_InteractiveMessage_Header_LocationMessage
	Media         isMessage_InteractiveMessage_Header_Media `protobuf_oneof:"media"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_InteractiveMessage_Header) Reset() {
	*x = Message_InteractiveMessage_Header{}
	mi := &file_WAProto_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveMessage_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveMessage_Header) ProtoMessage() {}

func (x *Message_InteractiveMessage_Header) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveMessage_Header.ProtoReflect.Descriptor instead.
func (*Message_InteractiveMessage_Header) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 37, 4}
}

func (x *Message_InteractiveMessage_Header) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_InteractiveMessage_Header) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *Message_InteractiveMessage_Header) GetHasMediaAttachment() bool {
	if x != nil && x.HasMediaAttachment != nil {
		return *x.HasMediaAttachment
	}
	return false
}

func (x *Message_InteractiveMessage_Header) GetMedia() isMessage_InteractiveMessage_Header_Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Message_InteractiveMessage_Header) GetDocumentMessage() *Message_DocumentMessage {
	if x != nil {
		if x, ok := x.Media.(*Message_InteractiveMessage_Header_DocumentMessage); ok {
			return x.DocumentMessage
		}
	}
	return nil
}

func (x *Message_InteractiveMessage_Header) GetImageMessage() *Message_ImageMessage {
	if x != nil {
		if x, ok := x.Media.(*Message_InteractiveMessage_Header_ImageMessage); ok {
			return x.ImageMessage
		}
	}
	return nil
}

func (x *Message_InteractiveMessage_Header) GetJpegThumbnail() []byte {
	if x != nil {
		if x, ok := x.Media.(*Message_InteractiveMessage_Header_JpegThumbnail); ok {
			return x.JpegThumbnail
		}
	}
	return nil
}

func (x *Message_InteractiveMessage_Header) GetVideoMessage() *Message_VideoMessage {
	if x != nil {
		if x, ok := x.Media.(*Message_InteractiveMessage_Header_VideoMessage); ok {
			return x.VideoMessage
		}
	}
	return nil
}

func (x *Message_InteractiveMessage_Header) GetLocationMessage() *Message_LocationMessage {
	if x != nil {
		if x, ok := x.Media.(*Message_InteractiveMessage_Header_LocationMessage); ok {
			return x.LocationMessage
		}
	}
	return nil
}

type isMessage_InteractiveMessage_Header_Media interface {
	isMessage_InteractiveMessage_Header_Media()
}

type Message_InteractiveMessage_Header_DocumentMessage struct {
	DocumentMessage *Message_DocumentMessage `protobuf:"bytes,3,opt,name=documentMessage,oneof"`
}

type Message_InteractiveMessage_Header_ImageMessage struct {
	ImageMessage *Message_ImageMessage `protobuf:"bytes,4,opt,name=imageMessage,oneof"`
}

type Message_InteractiveMessage_Header_JpegThumbnail struct {
	JpegThumbnail []byte `protobuf:"bytes,6,opt,name=jpegThumbnail,oneof"`
}

type Message_InteractiveMessage_Header_VideoMessage struct {
	VideoMessage *Message_VideoMessage `protobuf:"bytes,7,opt,name=videoMessage,oneof"`
}

type Message_InteractiveMessage_Header_LocationMessage struct {
	LocationMessage *Message_LocationMessage `protobuf:"bytes,8,opt,name=locationMessage,oneof"`
}

func (*Message_InteractiveMessage_Header_DocumentMessage) isMessage_InteractiveMessage_Header_Media() {
}

func (*Message_InteractiveMessage_Header_ImageMessage) isMessage_InteractiveMessage_Header_Media() {}

func (*Message_InteractiveMessage_Header_JpegThumbnail) isMessage_InteractiveMessage_Header_Media() {}

func (*Message_InteractiveMessage_Header_VideoMessage) isMessage_InteractiveMessage_Header_Media() {}

func (*Message_InteractiveMessage_Header_LocationMessage) isMessage_InteractiveMessage_Header_Media() {
}

type Message_InteractiveMessage_NativeFlowMessage struct {
	state             protoimpl.MessageState                                           `protogen:"open.v1"`
	Buttons           []*Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton `protobuf:"bytes,1,rep,name=buttons" json:"buttons,omitempty"`
	MessageParamsJson *string                                                          `protobuf:"bytes,2,opt,name=messageParamsJson" json:"messageParamsJson,omitempty"`
	MessageVersion    *int32                                                           `protobuf:"varint,3,opt,name=messageVersion" json:"messageVersion,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Message_InteractiveMessage_NativeFlowMessage) Reset() {
	*x = Message_InteractiveMessage_NativeFlowMessage{}
	mi := &file_WAProto_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveMessage_NativeFlowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveMessage_NativeFlowMessage) ProtoMessage() {}

func (x *Message_InteractiveMessage_NativeFlowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveMessage_NativeFlowMessage.ProtoReflect.Descriptor instead.
func (*Message_InteractiveMessage_NativeFlowMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 37, 5}
}

func (x *Message_InteractiveMessage_NativeFlowMessage) GetButtons() []*Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *Message_InteractiveMessage_NativeFlowMessage) GetMessageParamsJson() string {
	if x != nil && x.MessageParamsJson != nil {
		return *x.MessageParamsJson
	}
	return ""
}

func (x *Message_InteractiveMessage_NativeFlowMessage) GetMessageVersion() int32 {
	if x != nil && x.MessageVersion != nil {
		return *x.MessageVersion
	}
	return 0
}

type Message_InteractiveMessage_ShopMessage struct {
	state          protoimpl.MessageState                          `protogen:"open.v1"`
	Id             *string                                         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Surface        *Message_InteractiveMessage_ShopMessage_Surface `protobuf:"varint,2,opt,name=surface,enum=proto.Message_InteractiveMessage_ShopMessage_Surface" json:"surface,omitempty"`
	MessageVersion *int32                                          `protobuf:"varint,3,opt,name=messageVersion" json:"messageVersion,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Message_InteractiveMessage_ShopMessage) Reset() {
	*x = Message_InteractiveMessage_ShopMessage{}
	mi := &file_WAProto_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveMessage_ShopMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveMessage_ShopMessage) ProtoMessage() {}

func (x *Message_InteractiveMessage_ShopMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveMessage_ShopMessage.ProtoReflect.Descriptor instead.
func (*Message_InteractiveMessage_ShopMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 37, 6}
}

func (x *Message_InteractiveMessage_ShopMessage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Message_InteractiveMessage_ShopMessage) GetSurface() Message_InteractiveMessage_ShopMessage_Surface {
	if x != nil && x.Surface != nil {
		return *x.Surface
	}
	return Message_InteractiveMessage_ShopMessage_UNKNOWN_SURFACE
}

func (x *Message_InteractiveMessage_ShopMessage) GetMessageVersion() int32 {
	if x != nil && x.MessageVersion != nil {
		return *x.MessageVersion
	}
	return 0
}

type Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ButtonParamsJson *string                `protobuf:"bytes,2,opt,name=buttonParamsJson" json:"buttonParamsJson,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton) Reset() {
	*x = Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton{}
	mi := &file_WAProto_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton) ProtoMessage() {}

func (x *Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton.ProtoReflect.Descriptor instead.
func (*Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 37, 5, 0}
}

func (x *Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton) GetButtonParamsJson() string {
	if x != nil && x.ButtonParamsJson != nil {
		return *x.ButtonParamsJson
	}
	return ""
}

type Message_InteractiveResponseMessage_Body struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Text          *string                                         `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Format        *Message_InteractiveResponseMessage_Body_Format `protobuf:"varint,2,opt,name=format,enum=proto.Message_InteractiveResponseMessage_Body_Format" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_InteractiveResponseMessage_Body) Reset() {
	*x = Message_InteractiveResponseMessage_Body{}
	mi := &file_WAProto_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveResponseMessage_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveResponseMessage_Body) ProtoMessage() {}

func (x *Message_InteractiveResponseMessage_Body) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveResponseMessage_Body.ProtoReflect.Descriptor instead.
func (*Message_InteractiveResponseMessage_Body) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 38, 0}
}

func (x *Message_InteractiveResponseMessage_Body) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Message_InteractiveResponseMessage_Body) GetFormat() Message_InteractiveResponseMessage_Body_Format {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Message_InteractiveResponseMessage_Body_DEFAULT
}

type Message_InteractiveResponseMessage_NativeFlowResponseMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ParamsJson    *string                `protobuf:"bytes,2,opt,name=paramsJson" json:"paramsJson,omitempty"`
	Version       *int32                 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_InteractiveResponseMessage_NativeFlowResponseMessage) Reset() {
	*x = Message_InteractiveResponseMessage_NativeFlowResponseMessage{}
	mi := &file_WAProto_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_InteractiveResponseMessage_NativeFlowResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_InteractiveResponseMessage_NativeFlowResponseMessage) ProtoMessage() {}

func (x *Message_InteractiveResponseMessage_NativeFlowResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_InteractiveResponseMessage_NativeFlowResponseMessage.ProtoReflect.Descriptor instead.
func (*Message_InteractiveResponseMessage_NativeFlowResponseMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 38, 1}
}

func (x *Message_InteractiveResponseMessage_NativeFlowResponseMessage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Message_InteractiveResponseMessage_NativeFlowResponseMessage) GetParamsJson() string {
	if x != nil && x.ParamsJson != nil {
		return *x.ParamsJson
	}
	return ""
}

func (x *Message_InteractiveResponseMessage_NativeFlowResponseMessage) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type Message_ListMessage_Product struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductId     *string                `protobuf:"bytes,1,opt,name=productId" json:"productId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ListMessage_Product) Reset() {
	*x = Message_ListMessage_Product{}
	mi := &file_WAProto_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ListMessage_Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ListMessage_Product) ProtoMessage() {}

func (x *Message_ListMessage_Product) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ListMessage_Product.ProtoReflect.Descriptor instead.
func (*Message_ListMessage_Product) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 41, 0}
}

func (x *Message_ListMessage_Product) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

type Message_ListMessage_ProductListHeaderImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductId     *string                `protobuf:"bytes,1,opt,name=productId" json:"productId,omitempty"`
	JpegThumbnail []byte                 `protobuf:"bytes,2,opt,name=jpegThumbnail" json:"jpegThumbnail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ListMessage_ProductListHeaderImage) Reset() {
	*x = Message_ListMessage_ProductListHeaderImage{}
	mi := &file_WAProto_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ListMessage_ProductListHeaderImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ListMessage_ProductListHeaderImage) ProtoMessage() {}

func (x *Message_ListMessage_ProductListHeaderImage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ListMessage_ProductListHeaderImage.ProtoReflect.Descriptor instead.
func (*Message_ListMessage_ProductListHeaderImage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 41, 1}
}

func (x *Message_ListMessage_ProductListHeaderImage) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

func (x *Message_ListMessage_ProductListHeaderImage) GetJpegThumbnail() []byte {
	if x != nil {
		return x.JpegThumbnail
	}
	return nil
}

type Message_ListMessage_ProductListInfo struct {
	state            protoimpl.MessageState                      `protogen:"open.v1"`
	ProductSections  []*Message_ListMessage_ProductSection       `protobuf:"bytes,1,rep,name=productSections" json:"productSections,omitempty"`
	HeaderImage      *Message_ListMessage_ProductListHeaderImage `protobuf:"bytes,2,opt,name=headerImage" json:"headerImage,omitempty"`
	BusinessOwnerJid *string                                     `protobuf:"bytes,3,opt,name=businessOwnerJid" json:"businessOwnerJid,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Message_ListMessage_ProductListInfo) Reset() {
	*x = Message_ListMessage_ProductListInfo{}
	mi := &file_WAProto_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ListMessage_ProductListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ListMessage_ProductListInfo) ProtoMessage() {}

func (x *Message_ListMessage_ProductListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ListMessage_ProductListInfo.ProtoReflect.Descriptor instead.
func (*Message_ListMessage_ProductListInfo) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 41, 2}
}

func (x *Message_ListMessage_ProductListInfo) GetProductSections() []*Message_ListMessage_ProductSection {
	if x != nil {
		return x.ProductSections
	}
	return nil
}

func (x *Message_ListMessage_ProductListInfo) GetHeaderImage() *Message_ListMessage_ProductListHeaderImage {
	if x != nil {
		return x.HeaderImage
	}
	return nil
}

func (x *Message_ListMessage_ProductListInfo) GetBusinessOwnerJid() string {
	if x != nil && x.BusinessOwnerJid != nil {
		return *x.BusinessOwnerJid
	}
	return ""
}

type Message_ListMessage_ProductSection struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Title         *string                        `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Products      []*Message_ListMessage_Product `protobuf:"bytes,2,rep,name=products" json:"products,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ListMessage_ProductSection) Reset() {
	*x = Message_ListMessage_ProductSection{}
	mi := &file_WAProto_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ListMessage_ProductSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ListMessage_ProductSection) ProtoMessage() {}

func (x *Message_ListMessage_ProductSection) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ListMessage_ProductSection.ProtoReflect.Descriptor instead.
func (*Message_ListMessage_ProductSection) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 41, 3}
}

func (x *Message_ListMessage_ProductSection) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_ListMessage_ProductSection) GetProducts() []*Message_ListMessage_Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type Message_ListMessage_Row struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         *string                `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	RowId         *string                `protobuf:"bytes,3,opt,name=rowId" json:"rowId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ListMessage_Row) Reset() {
	*x = Message_ListMessage_Row{}
	mi := &file_WAProto_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ListMessage_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ListMessage_Row) ProtoMessage() {}

func (x *Message_ListMessage_Row) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ListMessage_Row.ProtoReflect.Descriptor instead.
func (*Message_ListMessage_Row) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 41, 4}
}

func (x *Message_ListMessage_Row) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_ListMessage_Row) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Message_ListMessage_Row) GetRowId() string {
	if x != nil && x.RowId != nil {
		return *x.RowId
	}
	return ""
}

type Message_ListMessage_Section struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Title         *string                    `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Rows          []*Message_ListMessage_Row `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ListMessage_Section) Reset() {
	*x = Message_ListMessage_Section{}
	mi := &file_WAProto_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ListMessage_Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ListMessage_Section) ProtoMessage() {}

func (x *Message_ListMessage_Section) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ListMessage_Section.ProtoReflect.Descriptor instead.
func (*Message_ListMessage_Section) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 41, 5}
}

func (x *Message_ListMessage_Section) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_ListMessage_Section) GetRows() []*Message_ListMessage_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type Message_ListResponseMessage_SingleSelectReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SelectedRowId *string                `protobuf:"bytes,1,opt,name=selectedRowId" json:"selectedRowId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ListResponseMessage_SingleSelectReply) Reset() {
	*x = Message_ListResponseMessage_SingleSelectReply{}
	mi := &file_WAProto_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ListResponseMessage_SingleSelectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ListResponseMessage_SingleSelectReply) ProtoMessage() {}

func (x *Message_ListResponseMessage_SingleSelectReply) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ListResponseMessage_SingleSelectReply.ProtoReflect.Descriptor instead.
func (*Message_ListResponseMessage_SingleSelectReply) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 42, 0}
}

func (x *Message_ListResponseMessage_SingleSelectReply) GetSelectedRowId() string {
	if x != nil && x.SelectedRowId != nil {
		return *x.SelectedRowId
	}
	return ""
}

type Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ChatJid              *string                `protobuf:"bytes,1,opt,name=chatJid" json:"chatJid,omitempty"`
	OldestMsgId          *string                `protobuf:"bytes,2,opt,name=oldestMsgId" json:"oldestMsgId,omitempty"`
	OldestMsgFromMe      *bool                  `protobuf:"varint,3,opt,name=oldestMsgFromMe" json:"oldestMsgFromMe,omitempty"`
	OnDemandMsgCount     *int32                 `protobuf:"varint,4,opt,name=onDemandMsgCount" json:"onDemandMsgCount,omitempty"`
	OldestMsgTimestampMs *int64                 `protobuf:"varint,5,opt,name=oldestMsgTimestampMs" json:"oldestMsgTimestampMs,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest) Reset() {
	*x = Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest{}
	mi := &file_WAProto_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest) ProtoMessage() {}

func (x *Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest.ProtoReflect.Descriptor instead.
func (*Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 49, 0}
}

func (x *Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest) GetChatJid() string {
	if x != nil && x.ChatJid != nil {
		return *x.ChatJid
	}
	return ""
}

func (x *Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest) GetOldestMsgId() string {
	if x != nil && x.OldestMsgId != nil {
		return *x.OldestMsgId
	}
	return ""
}

func (x *Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest) GetOldestMsgFromMe() bool {
	if x != nil && x.OldestMsgFromMe != nil {
		return *x.OldestMsgFromMe
	}
	return false
}

func (x *Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest) GetOnDemandMsgCount() int32 {
	if x != nil && x.OnDemandMsgCount != nil {
		return *x.OnDemandMsgCount
	}
	return 0
}

func (x *Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest) GetOldestMsgTimestampMs() int64 {
	if x != nil && x.OldestMsgTimestampMs != nil {
		return *x.OldestMsgTimestampMs
	}
	return 0
}

type Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageKey    *MessageKey            `protobuf:"bytes,1,opt,name=messageKey" json:"messageKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest) Reset() {
	*x = Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest{}
	mi := &file_WAProto_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest) ProtoMessage() {}

func (x *Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest.ProtoReflect.Descriptor instead.
func (*Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 49, 1}
}

func (x *Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest) GetMessageKey() *MessageKey {
	if x != nil {
		return x.MessageKey
	}
	return nil
}

type Message_PeerDataOperationRequestMessage_RequestStickerReupload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileSha256    *string                `protobuf:"bytes,1,opt,name=fileSha256" json:"fileSha256,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_PeerDataOperationRequestMessage_RequestStickerReupload) Reset() {
	*x = Message_PeerDataOperationRequestMessage_RequestStickerReupload{}
	mi := &file_WAProto_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PeerDataOperationRequestMessage_RequestStickerReupload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PeerDataOperationRequestMessage_RequestStickerReupload) ProtoMessage() {}

func (x *Message_PeerDataOperationRequestMessage_RequestStickerReupload) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PeerDataOperationRequestMessage_RequestStickerReupload.ProtoReflect.Descriptor instead.
func (*Message_PeerDataOperationRequestMessage_RequestStickerReupload) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 49, 2}
}

func (x *Message_PeerDataOperationRequestMessage_RequestStickerReupload) GetFileSha256() string {
	if x != nil && x.FileSha256 != nil {
		return *x.FileSha256
	}
	return ""
}

type Message_PeerDataOperationRequestMessage_RequestUrlPreview struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Url                *string                `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	IncludeHqThumbnail *bool                  `protobuf:"varint,2,opt,name=includeHqThumbnail" json:"includeHqThumbnail,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Message_PeerDataOperationRequestMessage_RequestUrlPreview) Reset() {
	*x = Message_PeerDataOperationRequestMessage_RequestUrlPreview{}
	mi := &file_WAProto_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PeerDataOperationRequestMessage_RequestUrlPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PeerDataOperationRequestMessage_RequestUrlPreview) ProtoMessage() {}

func (x *Message_PeerDataOperationRequestMessage_RequestUrlPreview) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PeerDataOperationRequestMessage_RequestUrlPreview.ProtoReflect.Descriptor instead.
func (*Message_PeerDataOperationRequestMessage_RequestUrlPreview) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 49, 3}
}

func (x *Message_PeerDataOperationRequestMessage_RequestUrlPreview) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Message_PeerDataOperationRequestMessage_RequestUrlPreview) GetIncludeHqThumbnail() bool {
	if x != nil && x.IncludeHqThumbnail != nil {
		return *x.IncludeHqThumbnail
	}
	return false
}

type Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult struct {
	state                            protoimpl.MessageState                                                                                    `protogen:"open.v1"`
	MediaUploadResult                *MediaRetryNotification_ResultType                                                                        `protobuf:"varint,1,opt,name=mediaUploadResult,enum=proto.MediaRetryNotification_ResultType" json:"mediaUploadResult,omitempty"`
	StickerMessage                   *Message_StickerMessage                                                                                   `protobuf:"bytes,2,opt,name=stickerMessage" json:"stickerMessage,omitempty"`
	LinkPreviewResponse              *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse              `protobuf:"bytes,3,opt,name=linkPreviewResponse" json:"linkPreviewResponse,omitempty"`
	PlaceholderMessageResendResponse *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse `protobuf:"bytes,4,opt,name=placeholderMessageResendResponse" json:"placeholderMessageResendResponse,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult) Reset() {
	*x = Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult{}
	mi := &file_WAProto_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult) ProtoMessage() {}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult.ProtoReflect.Descriptor instead.
func (*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 50, 0}
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult) GetMediaUploadResult() MediaRetryNotification_ResultType {
	if x != nil && x.MediaUploadResult != nil {
		return *x.MediaUploadResult
	}
	return MediaRetryNotification_GENERAL_ERROR
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult) GetStickerMessage() *Message_StickerMessage {
	if x != nil {
		return x.StickerMessage
	}
	return nil
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult) GetLinkPreviewResponse() *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse {
	if x != nil {
		return x.LinkPreviewResponse
	}
	return nil
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult) GetPlaceholderMessageResendResponse() *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse {
	if x != nil {
		return x.PlaceholderMessageResendResponse
	}
	return nil
}

type Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse struct {
	state         protoimpl.MessageState                                                                                                       `protogen:"open.v1"`
	Url           *string                                                                                                                      `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Title         *string                                                                                                                      `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description   *string                                                                                                                      `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	ThumbData     []byte                                                                                                                       `protobuf:"bytes,4,opt,name=thumbData" json:"thumbData,omitempty"`
	CanonicalUrl  *string                                                                                                                      `protobuf:"bytes,5,opt,name=canonicalUrl" json:"canonicalUrl,omitempty"`
	MatchText     *string                                                                                                                      `protobuf:"bytes,6,opt,name=matchText" json:"matchText,omitempty"`
	PreviewType   *string                                                                                                                      `protobuf:"bytes,7,opt,name=previewType" json:"previewType,omitempty"`
	HqThumbnail   *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail `protobuf:"bytes,8,opt,name=hqThumbnail" json:"hqThumbnail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) Reset() {
	*x = Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse{}
	mi := &file_WAProto_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) ProtoMessage() {
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse.ProtoReflect.Descriptor instead.
func (*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 50, 0, 0}
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) GetThumbData() []byte {
	if x != nil {
		return x.ThumbData
	}
	return nil
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) GetCanonicalUrl() string {
	if x != nil && x.CanonicalUrl != nil {
		return *x.CanonicalUrl
	}
	return ""
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) GetMatchText() string {
	if x != nil && x.MatchText != nil {
		return *x.MatchText
	}
	return ""
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) GetPreviewType() string {
	if x != nil && x.PreviewType != nil {
		return *x.PreviewType
	}
	return ""
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse) GetHqThumbnail() *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail {
	if x != nil {
		return x.HqThumbnail
	}
	return nil
}

type Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	WebMessageInfoBytes []byte                 `protobuf:"bytes,1,opt,name=webMessageInfoBytes" json:"webMessageInfoBytes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse) Reset() {
	*x = Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse{}
	mi := &file_WAProto_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse) ProtoMessage() {
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse.ProtoReflect.Descriptor instead.
func (*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 50, 0, 1}
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse) GetWebMessageInfoBytes() []byte {
	if x != nil {
		return x.WebMessageInfoBytes
	}
	return nil
}

type Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	DirectPath          *string                `protobuf:"bytes,1,opt,name=directPath" json:"directPath,omitempty"`
	ThumbHash           *string                `protobuf:"bytes,2,opt,name=thumbHash" json:"thumbHash,omitempty"`
	EncThumbHash        *string                `protobuf:"bytes,3,opt,name=encThumbHash" json:"encThumbHash,omitempty"`
	MediaKey            []byte                 `protobuf:"bytes,4,opt,name=mediaKey" json:"mediaKey,omitempty"`
	MediaKeyTimestampMs *int64                 `protobuf:"varint,5,opt,name=mediaKeyTimestampMs" json:"mediaKeyTimestampMs,omitempty"`
	ThumbWidth          *int32                 `protobuf:"varint,6,opt,name=thumbWidth" json:"thumbWidth,omitempty"`
	ThumbHeight         *int32                 `protobuf:"varint,7,opt,name=thumbHeight" json:"thumbHeight,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) Reset() {
	*x = Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail{}
	mi := &file_WAProto_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) ProtoMessage() {
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail.ProtoReflect.Descriptor instead.
func (*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 50, 0, 0, 0}
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) GetThumbHash() string {
	if x != nil && x.ThumbHash != nil {
		return *x.ThumbHash
	}
	return ""
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) GetEncThumbHash() string {
	if x != nil && x.EncThumbHash != nil {
		return *x.EncThumbHash
	}
	return ""
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) GetMediaKeyTimestampMs() int64 {
	if x != nil && x.MediaKeyTimestampMs != nil {
		return *x.MediaKeyTimestampMs
	}
	return 0
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) GetThumbWidth() int32 {
	if x != nil && x.ThumbWidth != nil {
		return *x.ThumbWidth
	}
	return 0
}

func (x *Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail) GetThumbHeight() int32 {
	if x != nil && x.ThumbHeight != nil {
		return *x.ThumbHeight
	}
	return 0
}

type Message_PollCreationMessage_Option struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OptionName    *string                `protobuf:"bytes,1,opt,name=optionName" json:"optionName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_PollCreationMessage_Option) Reset() {
	*x = Message_PollCreationMessage_Option{}
	mi := &file_WAProto_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_PollCreationMessage_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PollCreationMessage_Option) ProtoMessage() {}

func (x *Message_PollCreationMessage_Option) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PollCreationMessage_Option.ProtoReflect.Descriptor instead.
func (*Message_PollCreationMessage_Option) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 53, 0}
}

func (x *Message_PollCreationMessage_Option) GetOptionName() string {
	if x != nil && x.OptionName != nil {
		return *x.OptionName
	}
	return ""
}

type Message_ProductMessage_CatalogSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CatalogImage  *Message_ImageMessage  `protobuf:"bytes,1,opt,name=catalogImage" json:"catalogImage,omitempty"`
	Title         *string                `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_ProductMessage_CatalogSnapshot) Reset() {
	*x = Message_ProductMessage_CatalogSnapshot{}
	mi := &file_WAProto_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ProductMessage_CatalogSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ProductMessage_CatalogSnapshot) ProtoMessage() {}

func (x *Message_ProductMessage_CatalogSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ProductMessage_CatalogSnapshot.ProtoReflect.Descriptor instead.
func (*Message_ProductMessage_CatalogSnapshot) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 58, 0}
}

func (x *Message_ProductMessage_CatalogSnapshot) GetCatalogImage() *Message_ImageMessage {
	if x != nil {
		return x.CatalogImage
	}
	return nil
}

func (x *Message_ProductMessage_CatalogSnapshot) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_ProductMessage_CatalogSnapshot) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type Message_ProductMessage_ProductSnapshot struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ProductImage        *Message_ImageMessage  `protobuf:"bytes,1,opt,name=productImage" json:"productImage,omitempty"`
	ProductId           *string                `protobuf:"bytes,2,opt,name=productId" json:"productId,omitempty"`
	Title               *string                `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Description         *string                `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	CurrencyCode        *string                `protobuf:"bytes,5,opt,name=currencyCode" json:"currencyCode,omitempty"`
	PriceAmount1000     *int64                 `protobuf:"varint,6,opt,name=priceAmount1000" json:"priceAmount1000,omitempty"`
	RetailerId          *string                `protobuf:"bytes,7,opt,name=retailerId" json:"retailerId,omitempty"`
	Url                 *string                `protobuf:"bytes,8,opt,name=url" json:"url,omitempty"`
	ProductImageCount   *uint32                `protobuf:"varint,9,opt,name=productImageCount" json:"productImageCount,omitempty"`
	FirstImageId        *string                `protobuf:"bytes,11,opt,name=firstImageId" json:"firstImageId,omitempty"`
	SalePriceAmount1000 *int64                 `protobuf:"varint,12,opt,name=salePriceAmount1000" json:"salePriceAmount1000,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Message_ProductMessage_ProductSnapshot) Reset() {
	*x = Message_ProductMessage_ProductSnapshot{}
	mi := &file_WAProto_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_ProductMessage_ProductSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_ProductMessage_ProductSnapshot) ProtoMessage() {}

func (x *Message_ProductMessage_ProductSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_ProductMessage_ProductSnapshot.ProtoReflect.Descriptor instead.
func (*Message_ProductMessage_ProductSnapshot) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 58, 1}
}

func (x *Message_ProductMessage_ProductSnapshot) GetProductImage() *Message_ImageMessage {
	if x != nil {
		return x.ProductImage
	}
	return nil
}

func (x *Message_ProductMessage_ProductSnapshot) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

func (x *Message_ProductMessage_ProductSnapshot) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Message_ProductMessage_ProductSnapshot) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Message_ProductMessage_ProductSnapshot) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

func (x *Message_ProductMessage_ProductSnapshot) GetPriceAmount1000() int64 {
	if x != nil && x.PriceAmount1000 != nil {
		return *x.PriceAmount1000
	}
	return 0
}

func (x *Message_ProductMessage_ProductSnapshot) GetRetailerId() string {
	if x != nil && x.RetailerId != nil {
		return *x.RetailerId
	}
	return ""
}

func (x *Message_ProductMessage_ProductSnapshot) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Message_ProductMessage_ProductSnapshot) GetProductImageCount() uint32 {
	if x != nil && x.ProductImageCount != nil {
		return *x.ProductImageCount
	}
	return 0
}

func (x *Message_ProductMessage_ProductSnapshot) GetFirstImageId() string {
	if x != nil && x.FirstImageId != nil {
		return *x.FirstImageId
	}
	return ""
}

func (x *Message_ProductMessage_ProductSnapshot) GetSalePriceAmount1000() int64 {
	if x != nil && x.SalePriceAmount1000 != nil {
		return *x.SalePriceAmount1000
	}
	return 0
}

type Message_TemplateMessage_FourRowTemplate struct {
	state   protoimpl.MessageState           `protogen:"open.v1"`
	Content *Message_HighlyStructuredMessage `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Footer  *Message_HighlyStructuredMessage `protobuf:"bytes,7,opt,name=footer" json:"footer,omitempty"`
	Buttons []*TemplateButton                `protobuf:"bytes,8,rep,name=buttons" json:"buttons,omitempty"`
	// Types that are valid to be assigned to Title:
	//
	//	*Message_TemplateMessage_FourRowTemplate_DocumentMessage
	//	*Message_TemplateMessage_FourRowTemplate_HighlyStructuredMessage
	//	*Message_TemplateMessage_FourRowTemplate_ImageMessage
	//	*Message_TemplateMessage_FourRowTemplate_VideoMessage
	//	*Message_TemplateMessage_FourRowTemplate_LocationMessage
	Title         isMessage_TemplateMessage_FourRowTemplate_Title `protobuf_oneof:"title"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_TemplateMessage_FourRowTemplate) Reset() {
	*x = Message_TemplateMessage_FourRowTemplate{}
	mi := &file_WAProto_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_TemplateMessage_FourRowTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_TemplateMessage_FourRowTemplate) ProtoMessage() {}

func (x *Message_TemplateMessage_FourRowTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_TemplateMessage_FourRowTemplate.ProtoReflect.Descriptor instead.
func (*Message_TemplateMessage_FourRowTemplate) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 71, 0}
}

func (x *Message_TemplateMessage_FourRowTemplate) GetContent() *Message_HighlyStructuredMessage {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Message_TemplateMessage_FourRowTemplate) GetFooter() *Message_HighlyStructuredMessage {
	if x != nil {
		return x.Footer
	}
	return nil
}

func (x *Message_TemplateMessage_FourRowTemplate) GetButtons() []*TemplateButton {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *Message_TemplateMessage_FourRowTemplate) GetTitle() isMessage_TemplateMessage_FourRowTemplate_Title {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Message_TemplateMessage_FourRowTemplate) GetDocumentMessage() *Message_DocumentMessage {
	if x != nil {
		if x, ok := x.Title.(*Message_TemplateMessage_FourRowTemplate_DocumentMessage); ok {
			return x.DocumentMessage
		}
	}
	return nil
}

func (x *Message_TemplateMessage_FourRowTemplate) GetHighlyStructuredMessage() *Message_HighlyStructuredMessage {
	if x != nil {
		if x, ok := x.Title.(*Message_TemplateMessage_FourRowTemplate_HighlyStructuredMessage); ok {
			return x.HighlyStructuredMessage
		}
	}
	return nil
}

func (x *Message_TemplateMessage_FourRowTemplate) GetImageMessage() *Message_ImageMessage {
	if x != nil {
		if x, ok := x.Title.(*Message_TemplateMessage_FourRowTemplate_ImageMessage); ok {
			return x.ImageMessage
		}
	}
	return nil
}

func (x *Message_TemplateMessage_FourRowTemplate) GetVideoMessage() *Message_VideoMessage {
	if x != nil {
		if x, ok := x.Title.(*Message_TemplateMessage_FourRowTemplate_VideoMessage); ok {
			return x.VideoMessage
		}
	}
	return nil
}

func (x *Message_TemplateMessage_FourRowTemplate) GetLocationMessage() *Message_LocationMessage {
	if x != nil {
		if x, ok := x.Title.(*Message_TemplateMessage_FourRowTemplate_LocationMessage); ok {
			return x.LocationMessage
		}
	}
	return nil
}

type isMessage_TemplateMessage_FourRowTemplate_Title interface {
	isMessage_TemplateMessage_FourRowTemplate_Title()
}

type Message_TemplateMessage_FourRowTemplate_DocumentMessage struct {
	DocumentMessage *Message_DocumentMessage `protobuf:"bytes,1,opt,name=documentMessage,oneof"`
}

type Message_TemplateMessage_FourRowTemplate_HighlyStructuredMessage struct {
	HighlyStructuredMessage *Message_HighlyStructuredMessage `protobuf:"bytes,2,opt,name=highlyStructuredMessage,oneof"`
}

type Message_TemplateMessage_FourRowTemplate_ImageMessage struct {
	ImageMessage *Message_ImageMessage `protobuf:"bytes,3,opt,name=imageMessage,oneof"`
}

type Message_TemplateMessage_FourRowTemplate_VideoMessage struct {
	VideoMessage *Message_VideoMessage `protobuf:"bytes,4,opt,name=videoMessage,oneof"`
}

type Message_TemplateMessage_FourRowTemplate_LocationMessage struct {
	LocationMessage *Message_LocationMessage `protobuf:"bytes,5,opt,name=locationMessage,oneof"`
}

func (*Message_TemplateMessage_FourRowTemplate_DocumentMessage) isMessage_TemplateMessage_FourRowTemplate_Title() {
}

func (*Message_TemplateMessage_FourRowTemplate_HighlyStructuredMessage) isMessage_TemplateMessage_FourRowTemplate_Title() {
}

func (*Message_TemplateMessage_FourRowTemplate_ImageMessage) isMessage_TemplateMessage_FourRowTemplate_Title() {
}

func (*Message_TemplateMessage_FourRowTemplate_VideoMessage) isMessage_TemplateMessage_FourRowTemplate_Title() {
}

func (*Message_TemplateMessage_FourRowTemplate_LocationMessage) isMessage_TemplateMessage_FourRowTemplate_Title() {
}

type Message_TemplateMessage_HydratedFourRowTemplate struct {
	state               protoimpl.MessageState    `protogen:"open.v1"`
	HydratedContentText *string                   `protobuf:"bytes,6,opt,name=hydratedContentText" json:"hydratedContentText,omitempty"`
	HydratedFooterText  *string                   `protobuf:"bytes,7,opt,name=hydratedFooterText" json:"hydratedFooterText,omitempty"`
	HydratedButtons     []*HydratedTemplateButton `protobuf:"bytes,8,rep,name=hydratedButtons" json:"hydratedButtons,omitempty"`
	TemplateId          *string                   `protobuf:"bytes,9,opt,name=templateId" json:"templateId,omitempty"`
	MaskLinkedDevices   *bool                     `protobuf:"varint,10,opt,name=maskLinkedDevices" json:"maskLinkedDevices,omitempty"`
	// Types that are valid to be assigned to Title:
	//
	//	*Message_TemplateMessage_HydratedFourRowTemplate_DocumentMessage
	//	*Message_TemplateMessage_HydratedFourRowTemplate_HydratedTitleText
	//	*Message_TemplateMessage_HydratedFourRowTemplate_ImageMessage
	//	*Message_TemplateMessage_HydratedFourRowTemplate_VideoMessage
	//	*Message_TemplateMessage_HydratedFourRowTemplate_LocationMessage
	Title         isMessage_TemplateMessage_HydratedFourRowTemplate_Title `protobuf_oneof:"title"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) Reset() {
	*x = Message_TemplateMessage_HydratedFourRowTemplate{}
	mi := &file_WAProto_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_TemplateMessage_HydratedFourRowTemplate) ProtoMessage() {}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_TemplateMessage_HydratedFourRowTemplate.ProtoReflect.Descriptor instead.
func (*Message_TemplateMessage_HydratedFourRowTemplate) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{48, 71, 1}
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetHydratedContentText() string {
	if x != nil && x.HydratedContentText != nil {
		return *x.HydratedContentText
	}
	return ""
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetHydratedFooterText() string {
	if x != nil && x.HydratedFooterText != nil {
		return *x.HydratedFooterText
	}
	return ""
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetHydratedButtons() []*HydratedTemplateButton {
	if x != nil {
		return x.HydratedButtons
	}
	return nil
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetTemplateId() string {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return ""
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetMaskLinkedDevices() bool {
	if x != nil && x.MaskLinkedDevices != nil {
		return *x.MaskLinkedDevices
	}
	return false
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetTitle() isMessage_TemplateMessage_HydratedFourRowTemplate_Title {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetDocumentMessage() *Message_DocumentMessage {
	if x != nil {
		if x, ok := x.Title.(*Message_TemplateMessage_HydratedFourRowTemplate_DocumentMessage); ok {
			return x.DocumentMessage
		}
	}
	return nil
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetHydratedTitleText() string {
	if x != nil {
		if x, ok := x.Title.(*Message_TemplateMessage_HydratedFourRowTemplate_HydratedTitleText); ok {
			return x.HydratedTitleText
		}
	}
	return ""
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetImageMessage() *Message_ImageMessage {
	if x != nil {
		if x, ok := x.Title.(*Message_TemplateMessage_HydratedFourRowTemplate_ImageMessage); ok {
			return x.ImageMessage
		}
	}
	return nil
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetVideoMessage() *Message_VideoMessage {
	if x != nil {
		if x, ok := x.Title.(*Message_TemplateMessage_HydratedFourRowTemplate_VideoMessage); ok {
			return x.VideoMessage
		}
	}
	return nil
}

func (x *Message_TemplateMessage_HydratedFourRowTemplate) GetLocationMessage() *Message_LocationMessage {
	if x != nil {
		if x, ok := x.Title.(*Message_TemplateMessage_HydratedFourRowTemplate_LocationMessage); ok {
			return x.LocationMessage
		}
	}
	return nil
}

type isMessage_TemplateMessage_HydratedFourRowTemplate_Title interface {
	isMessage_TemplateMessage_HydratedFourRowTemplate_Title()
}

type Message_TemplateMessage_HydratedFourRowTemplate_DocumentMessage struct {
	DocumentMessage *Message_DocumentMessage `protobuf:"bytes,1,opt,name=documentMessage,oneof"`
}

type Message_TemplateMessage_HydratedFourRowTemplate_HydratedTitleText struct {
	HydratedTitleText string `protobuf:"bytes,2,opt,name=hydratedTitleText,oneof"`
}

type Message_TemplateMessage_HydratedFourRowTemplate_ImageMessage struct {
	ImageMessage *Message_ImageMessage `protobuf:"bytes,3,opt,name=imageMessage,oneof"`
}

type Message_TemplateMessage_HydratedFourRowTemplate_VideoMessage struct {
	VideoMessage *Message_VideoMessage `protobuf:"bytes,4,opt,name=videoMessage,oneof"`
}

type Message_TemplateMessage_HydratedFourRowTemplate_LocationMessage struct {
	LocationMessage *Message_LocationMessage `protobuf:"bytes,5,opt,name=locationMessage,oneof"`
}

func (*Message_TemplateMessage_HydratedFourRowTemplate_DocumentMessage) isMessage_TemplateMessage_HydratedFourRowTemplate_Title() {
}

func (*Message_TemplateMessage_HydratedFourRowTemplate_HydratedTitleText) isMessage_TemplateMessage_HydratedFourRowTemplate_Title() {
}

func (*Message_TemplateMessage_HydratedFourRowTemplate_ImageMessage) isMessage_TemplateMessage_HydratedFourRowTemplate_Title() {
}

func (*Message_TemplateMessage_HydratedFourRowTemplate_VideoMessage) isMessage_TemplateMessage_HydratedFourRowTemplate_Title() {
}

func (*Message_TemplateMessage_HydratedFourRowTemplate_LocationMessage) isMessage_TemplateMessage_HydratedFourRowTemplate_Title() {
}

type MsgOpaqueData_PollOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MsgOpaqueData_PollOption) Reset() {
	*x = MsgOpaqueData_PollOption{}
	mi := &file_WAProto_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgOpaqueData_PollOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgOpaqueData_PollOption) ProtoMessage() {}

func (x *MsgOpaqueData_PollOption) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgOpaqueData_PollOption.ProtoReflect.Descriptor instead.
func (*MsgOpaqueData_PollOption) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{54, 0}
}

func (x *MsgOpaqueData_PollOption) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type NoiseCertificate_Details struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Serial        *uint32                `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	Issuer        *string                `protobuf:"bytes,2,opt,name=issuer" json:"issuer,omitempty"`
	Expires       *uint64                `protobuf:"varint,3,opt,name=expires" json:"expires,omitempty"`
	Subject       *string                `protobuf:"bytes,4,opt,name=subject" json:"subject,omitempty"`
	Key           []byte                 `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoiseCertificate_Details) Reset() {
	*x = NoiseCertificate_Details{}
	mi := &file_WAProto_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoiseCertificate_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseCertificate_Details) ProtoMessage() {}

func (x *NoiseCertificate_Details) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseCertificate_Details.ProtoReflect.Descriptor instead.
func (*NoiseCertificate_Details) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{56, 0}
}

func (x *NoiseCertificate_Details) GetSerial() uint32 {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return 0
}

func (x *NoiseCertificate_Details) GetIssuer() string {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return ""
}

func (x *NoiseCertificate_Details) GetExpires() uint64 {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return 0
}

func (x *NoiseCertificate_Details) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *NoiseCertificate_Details) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type PaymentBackground_MediaData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MediaKey          []byte                 `protobuf:"bytes,1,opt,name=mediaKey" json:"mediaKey,omitempty"`
	MediaKeyTimestamp *int64                 `protobuf:"varint,2,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	FileSha256        []byte                 `protobuf:"bytes,3,opt,name=fileSha256" json:"fileSha256,omitempty"`
	FileEncSha256     []byte                 `protobuf:"bytes,4,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	DirectPath        *string                `protobuf:"bytes,5,opt,name=directPath" json:"directPath,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PaymentBackground_MediaData) Reset() {
	*x = PaymentBackground_MediaData{}
	mi := &file_WAProto_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentBackground_MediaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentBackground_MediaData) ProtoMessage() {}

func (x *PaymentBackground_MediaData) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentBackground_MediaData.ProtoReflect.Descriptor instead.
func (*PaymentBackground_MediaData) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{62, 0}
}

func (x *PaymentBackground_MediaData) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *PaymentBackground_MediaData) GetMediaKeyTimestamp() int64 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *PaymentBackground_MediaData) GetFileSha256() []byte {
	if x != nil {
		return x.FileSha256
	}
	return nil
}

func (x *PaymentBackground_MediaData) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *PaymentBackground_MediaData) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

type QP_Filter struct {
	state                    protoimpl.MessageState             `protogen:"open.v1"`
	FilterName               *string                            `protobuf:"bytes,1,req,name=filterName" json:"filterName,omitempty"`
	Parameters               []*QP_FilterParameters             `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty"`
	FilterResult             *QP_FilterResult                   `protobuf:"varint,3,opt,name=filterResult,enum=proto.QP_FilterResult" json:"filterResult,omitempty"`
	ClientNotSupportedConfig *QP_FilterClientNotSupportedConfig `protobuf:"varint,4,req,name=clientNotSupportedConfig,enum=proto.QP_FilterClientNotSupportedConfig" json:"clientNotSupportedConfig,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *QP_Filter) Reset() {
	*x = QP_Filter{}
	mi := &file_WAProto_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QP_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QP_Filter) ProtoMessage() {}

func (x *QP_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QP_Filter.ProtoReflect.Descriptor instead.
func (*QP_Filter) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{75, 0}
}

func (x *QP_Filter) GetFilterName() string {
	if x != nil && x.FilterName != nil {
		return *x.FilterName
	}
	return ""
}

func (x *QP_Filter) GetParameters() []*QP_FilterParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *QP_Filter) GetFilterResult() QP_FilterResult {
	if x != nil && x.FilterResult != nil {
		return *x.FilterResult
	}
	return QP_TRUE
}

func (x *QP_Filter) GetClientNotSupportedConfig() QP_FilterClientNotSupportedConfig {
	if x != nil && x.ClientNotSupportedConfig != nil {
		return *x.ClientNotSupportedConfig
	}
	return QP_PASS_BY_DEFAULT
}

type QP_FilterClause struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClauseType    *QP_ClauseType         `protobuf:"varint,1,req,name=clauseType,enum=proto.QP_ClauseType" json:"clauseType,omitempty"`
	Clauses       []*QP_FilterClause     `protobuf:"bytes,2,rep,name=clauses" json:"clauses,omitempty"`
	Filters       []*QP_Filter           `protobuf:"bytes,3,rep,name=filters" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QP_FilterClause) Reset() {
	*x = QP_FilterClause{}
	mi := &file_WAProto_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QP_FilterClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QP_FilterClause) ProtoMessage() {}

func (x *QP_FilterClause) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QP_FilterClause.ProtoReflect.Descriptor instead.
func (*QP_FilterClause) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{75, 1}
}

func (x *QP_FilterClause) GetClauseType() QP_ClauseType {
	if x != nil && x.ClauseType != nil {
		return *x.ClauseType
	}
	return QP_AND
}

func (x *QP_FilterClause) GetClauses() []*QP_FilterClause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

func (x *QP_FilterClause) GetFilters() []*QP_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type QP_FilterParameters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QP_FilterParameters) Reset() {
	*x = QP_FilterParameters{}
	mi := &file_WAProto_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QP_FilterParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QP_FilterParameters) ProtoMessage() {}

func (x *QP_FilterParameters) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QP_FilterParameters.ProtoReflect.Descriptor instead.
func (*QP_FilterParameters) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{75, 2}
}

func (x *QP_FilterParameters) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *QP_FilterParameters) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SenderKeyStateStructure_SenderChainKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Iteration     *uint32                `protobuf:"varint,1,opt,name=iteration" json:"iteration,omitempty"`
	Seed          []byte                 `protobuf:"bytes,2,opt,name=seed" json:"seed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SenderKeyStateStructure_SenderChainKey) Reset() {
	*x = SenderKeyStateStructure_SenderChainKey{}
	mi := &file_WAProto_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SenderKeyStateStructure_SenderChainKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderKeyStateStructure_SenderChainKey) ProtoMessage() {}

func (x *SenderKeyStateStructure_SenderChainKey) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderKeyStateStructure_SenderChainKey.ProtoReflect.Descriptor instead.
func (*SenderKeyStateStructure_SenderChainKey) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{83, 0}
}

func (x *SenderKeyStateStructure_SenderChainKey) GetIteration() uint32 {
	if x != nil && x.Iteration != nil {
		return *x.Iteration
	}
	return 0
}

func (x *SenderKeyStateStructure_SenderChainKey) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

type SenderKeyStateStructure_SenderMessageKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Iteration     *uint32                `protobuf:"varint,1,opt,name=iteration" json:"iteration,omitempty"`
	Seed          []byte                 `protobuf:"bytes,2,opt,name=seed" json:"seed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SenderKeyStateStructure_SenderMessageKey) Reset() {
	*x = SenderKeyStateStructure_SenderMessageKey{}
	mi := &file_WAProto_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SenderKeyStateStructure_SenderMessageKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderKeyStateStructure_SenderMessageKey) ProtoMessage() {}

func (x *SenderKeyStateStructure_SenderMessageKey) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderKeyStateStructure_SenderMessageKey.ProtoReflect.Descriptor instead.
func (*SenderKeyStateStructure_SenderMessageKey) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{83, 1}
}

func (x *SenderKeyStateStructure_SenderMessageKey) GetIteration() uint32 {
	if x != nil && x.Iteration != nil {
		return *x.Iteration
	}
	return 0
}

func (x *SenderKeyStateStructure_SenderMessageKey) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

type SenderKeyStateStructure_SenderSigningKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Public        []byte                 `protobuf:"bytes,1,opt,name=public" json:"public,omitempty"`
	Private       []byte                 `protobuf:"bytes,2,opt,name=private" json:"private,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SenderKeyStateStructure_SenderSigningKey) Reset() {
	*x = SenderKeyStateStructure_SenderSigningKey{}
	mi := &file_WAProto_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SenderKeyStateStructure_SenderSigningKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderKeyStateStructure_SenderSigningKey) ProtoMessage() {}

func (x *SenderKeyStateStructure_SenderSigningKey) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderKeyStateStructure_SenderSigningKey.ProtoReflect.Descriptor instead.
func (*SenderKeyStateStructure_SenderSigningKey) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{83, 2}
}

func (x *SenderKeyStateStructure_SenderSigningKey) GetPublic() []byte {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *SenderKeyStateStructure_SenderSigningKey) GetPrivate() []byte {
	if x != nil {
		return x.Private
	}
	return nil
}

type SessionStructure_Chain struct {
	state                   protoimpl.MessageState               `protogen:"open.v1"`
	SenderRatchetKey        []byte                               `protobuf:"bytes,1,opt,name=senderRatchetKey" json:"senderRatchetKey,omitempty"`
	SenderRatchetKeyPrivate []byte                               `protobuf:"bytes,2,opt,name=senderRatchetKeyPrivate" json:"senderRatchetKeyPrivate,omitempty"`
	ChainKey                *SessionStructure_Chain_ChainKey     `protobuf:"bytes,3,opt,name=chainKey" json:"chainKey,omitempty"`
	MessageKeys             []*SessionStructure_Chain_MessageKey `protobuf:"bytes,4,rep,name=messageKeys" json:"messageKeys,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SessionStructure_Chain) Reset() {
	*x = SessionStructure_Chain{}
	mi := &file_WAProto_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionStructure_Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStructure_Chain) ProtoMessage() {}

func (x *SessionStructure_Chain) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStructure_Chain.ProtoReflect.Descriptor instead.
func (*SessionStructure_Chain) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{85, 0}
}

func (x *SessionStructure_Chain) GetSenderRatchetKey() []byte {
	if x != nil {
		return x.SenderRatchetKey
	}
	return nil
}

func (x *SessionStructure_Chain) GetSenderRatchetKeyPrivate() []byte {
	if x != nil {
		return x.SenderRatchetKeyPrivate
	}
	return nil
}

func (x *SessionStructure_Chain) GetChainKey() *SessionStructure_Chain_ChainKey {
	if x != nil {
		return x.ChainKey
	}
	return nil
}

func (x *SessionStructure_Chain) GetMessageKeys() []*SessionStructure_Chain_MessageKey {
	if x != nil {
		return x.MessageKeys
	}
	return nil
}

type SessionStructure_PendingKeyExchange struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Sequence                *uint32                `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	LocalBaseKey            []byte                 `protobuf:"bytes,2,opt,name=localBaseKey" json:"localBaseKey,omitempty"`
	LocalBaseKeyPrivate     []byte                 `protobuf:"bytes,3,opt,name=localBaseKeyPrivate" json:"localBaseKeyPrivate,omitempty"`
	LocalRatchetKey         []byte                 `protobuf:"bytes,4,opt,name=localRatchetKey" json:"localRatchetKey,omitempty"`
	LocalRatchetKeyPrivate  []byte                 `protobuf:"bytes,5,opt,name=localRatchetKeyPrivate" json:"localRatchetKeyPrivate,omitempty"`
	LocalIdentityKey        []byte                 `protobuf:"bytes,7,opt,name=localIdentityKey" json:"localIdentityKey,omitempty"`
	LocalIdentityKeyPrivate []byte                 `protobuf:"bytes,8,opt,name=localIdentityKeyPrivate" json:"localIdentityKeyPrivate,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SessionStructure_PendingKeyExchange) Reset() {
	*x = SessionStructure_PendingKeyExchange{}
	mi := &file_WAProto_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionStructure_PendingKeyExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStructure_PendingKeyExchange) ProtoMessage() {}

func (x *SessionStructure_PendingKeyExchange) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStructure_PendingKeyExchange.ProtoReflect.Descriptor instead.
func (*SessionStructure_PendingKeyExchange) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{85, 1}
}

func (x *SessionStructure_PendingKeyExchange) GetSequence() uint32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *SessionStructure_PendingKeyExchange) GetLocalBaseKey() []byte {
	if x != nil {
		return x.LocalBaseKey
	}
	return nil
}

func (x *SessionStructure_PendingKeyExchange) GetLocalBaseKeyPrivate() []byte {
	if x != nil {
		return x.LocalBaseKeyPrivate
	}
	return nil
}

func (x *SessionStructure_PendingKeyExchange) GetLocalRatchetKey() []byte {
	if x != nil {
		return x.LocalRatchetKey
	}
	return nil
}

func (x *SessionStructure_PendingKeyExchange) GetLocalRatchetKeyPrivate() []byte {
	if x != nil {
		return x.LocalRatchetKeyPrivate
	}
	return nil
}

func (x *SessionStructure_PendingKeyExchange) GetLocalIdentityKey() []byte {
	if x != nil {
		return x.LocalIdentityKey
	}
	return nil
}

func (x *SessionStructure_PendingKeyExchange) GetLocalIdentityKeyPrivate() []byte {
	if x != nil {
		return x.LocalIdentityKeyPrivate
	}
	return nil
}

type SessionStructure_PendingPreKey struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PreKeyId       *uint32                `protobuf:"varint,1,opt,name=preKeyId" json:"preKeyId,omitempty"`
	SignedPreKeyId *int32                 `protobuf:"varint,3,opt,name=signedPreKeyId" json:"signedPreKeyId,omitempty"`
	BaseKey        []byte                 `protobuf:"bytes,2,opt,name=baseKey" json:"baseKey,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SessionStructure_PendingPreKey) Reset() {
	*x = SessionStructure_PendingPreKey{}
	mi := &file_WAProto_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionStructure_PendingPreKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStructure_PendingPreKey) ProtoMessage() {}

func (x *SessionStructure_PendingPreKey) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStructure_PendingPreKey.ProtoReflect.Descriptor instead.
func (*SessionStructure_PendingPreKey) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{85, 2}
}

func (x *SessionStructure_PendingPreKey) GetPreKeyId() uint32 {
	if x != nil && x.PreKeyId != nil {
		return *x.PreKeyId
	}
	return 0
}

func (x *SessionStructure_PendingPreKey) GetSignedPreKeyId() int32 {
	if x != nil && x.SignedPreKeyId != nil {
		return *x.SignedPreKeyId
	}
	return 0
}

func (x *SessionStructure_PendingPreKey) GetBaseKey() []byte {
	if x != nil {
		return x.BaseKey
	}
	return nil
}

type SessionStructure_Chain_ChainKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         *uint32                `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key           []byte                 `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionStructure_Chain_ChainKey) Reset() {
	*x = SessionStructure_Chain_ChainKey{}
	mi := &file_WAProto_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionStructure_Chain_ChainKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStructure_Chain_ChainKey) ProtoMessage() {}

func (x *SessionStructure_Chain_ChainKey) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStructure_Chain_ChainKey.ProtoReflect.Descriptor instead.
func (*SessionStructure_Chain_ChainKey) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{85, 0, 0}
}

func (x *SessionStructure_Chain_ChainKey) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *SessionStructure_Chain_ChainKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type SessionStructure_Chain_MessageKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         *uint32                `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	CipherKey     []byte                 `protobuf:"bytes,2,opt,name=cipherKey" json:"cipherKey,omitempty"`
	MacKey        []byte                 `protobuf:"bytes,3,opt,name=macKey" json:"macKey,omitempty"`
	Iv            []byte                 `protobuf:"bytes,4,opt,name=iv" json:"iv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionStructure_Chain_MessageKey) Reset() {
	*x = SessionStructure_Chain_MessageKey{}
	mi := &file_WAProto_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionStructure_Chain_MessageKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStructure_Chain_MessageKey) ProtoMessage() {}

func (x *SessionStructure_Chain_MessageKey) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStructure_Chain_MessageKey.ProtoReflect.Descriptor instead.
func (*SessionStructure_Chain_MessageKey) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{85, 0, 1}
}

func (x *SessionStructure_Chain_MessageKey) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *SessionStructure_Chain_MessageKey) GetCipherKey() []byte {
	if x != nil {
		return x.CipherKey
	}
	return nil
}

func (x *SessionStructure_Chain_MessageKey) GetMacKey() []byte {
	if x != nil {
		return x.MacKey
	}
	return nil
}

func (x *SessionStructure_Chain_MessageKey) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

type SyncActionValue_AgentAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DeviceID      *int32                 `protobuf:"varint,2,opt,name=deviceID" json:"deviceID,omitempty"`
	IsDeleted     *bool                  `protobuf:"varint,3,opt,name=isDeleted" json:"isDeleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_AgentAction) Reset() {
	*x = SyncActionValue_AgentAction{}
	mi := &file_WAProto_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_AgentAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_AgentAction) ProtoMessage() {}

func (x *SyncActionValue_AgentAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_AgentAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_AgentAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 0}
}

func (x *SyncActionValue_AgentAction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SyncActionValue_AgentAction) GetDeviceID() int32 {
	if x != nil && x.DeviceID != nil {
		return *x.DeviceID
	}
	return 0
}

func (x *SyncActionValue_AgentAction) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return false
}

type SyncActionValue_AndroidUnsupportedActions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Allowed       *bool                  `protobuf:"varint,1,opt,name=allowed" json:"allowed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_AndroidUnsupportedActions) Reset() {
	*x = SyncActionValue_AndroidUnsupportedActions{}
	mi := &file_WAProto_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_AndroidUnsupportedActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_AndroidUnsupportedActions) ProtoMessage() {}

func (x *SyncActionValue_AndroidUnsupportedActions) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_AndroidUnsupportedActions.ProtoReflect.Descriptor instead.
func (*SyncActionValue_AndroidUnsupportedActions) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 1}
}

func (x *SyncActionValue_AndroidUnsupportedActions) GetAllowed() bool {
	if x != nil && x.Allowed != nil {
		return *x.Allowed
	}
	return false
}

type SyncActionValue_ArchiveChatAction struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Archived      *bool                                   `protobuf:"varint,1,opt,name=archived" json:"archived,omitempty"`
	MessageRange  *SyncActionValue_SyncActionMessageRange `protobuf:"bytes,2,opt,name=messageRange" json:"messageRange,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_ArchiveChatAction) Reset() {
	*x = SyncActionValue_ArchiveChatAction{}
	mi := &file_WAProto_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_ArchiveChatAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_ArchiveChatAction) ProtoMessage() {}

func (x *SyncActionValue_ArchiveChatAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_ArchiveChatAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_ArchiveChatAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 2}
}

func (x *SyncActionValue_ArchiveChatAction) GetArchived() bool {
	if x != nil && x.Archived != nil {
		return *x.Archived
	}
	return false
}

func (x *SyncActionValue_ArchiveChatAction) GetMessageRange() *SyncActionValue_SyncActionMessageRange {
	if x != nil {
		return x.MessageRange
	}
	return nil
}

type SyncActionValue_BotWelcomeRequestAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSent        *bool                  `protobuf:"varint,1,opt,name=isSent" json:"isSent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_BotWelcomeRequestAction) Reset() {
	*x = SyncActionValue_BotWelcomeRequestAction{}
	mi := &file_WAProto_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_BotWelcomeRequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_BotWelcomeRequestAction) ProtoMessage() {}

func (x *SyncActionValue_BotWelcomeRequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_BotWelcomeRequestAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_BotWelcomeRequestAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 3}
}

func (x *SyncActionValue_BotWelcomeRequestAction) GetIsSent() bool {
	if x != nil && x.IsSent != nil {
		return *x.IsSent
	}
	return false
}

type SyncActionValue_CallLogAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CallLogRecord *CallLogRecord         `protobuf:"bytes,1,opt,name=callLogRecord" json:"callLogRecord,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_CallLogAction) Reset() {
	*x = SyncActionValue_CallLogAction{}
	mi := &file_WAProto_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_CallLogAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_CallLogAction) ProtoMessage() {}

func (x *SyncActionValue_CallLogAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_CallLogAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_CallLogAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 4}
}

func (x *SyncActionValue_CallLogAction) GetCallLogRecord() *CallLogRecord {
	if x != nil {
		return x.CallLogRecord
	}
	return nil
}

type SyncActionValue_ChatAssignmentAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceAgentID *string                `protobuf:"bytes,1,opt,name=deviceAgentID" json:"deviceAgentID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_ChatAssignmentAction) Reset() {
	*x = SyncActionValue_ChatAssignmentAction{}
	mi := &file_WAProto_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_ChatAssignmentAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_ChatAssignmentAction) ProtoMessage() {}

func (x *SyncActionValue_ChatAssignmentAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_ChatAssignmentAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_ChatAssignmentAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 5}
}

func (x *SyncActionValue_ChatAssignmentAction) GetDeviceAgentID() string {
	if x != nil && x.DeviceAgentID != nil {
		return *x.DeviceAgentID
	}
	return ""
}

type SyncActionValue_ChatAssignmentOpenedStatusAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChatOpened    *bool                  `protobuf:"varint,1,opt,name=chatOpened" json:"chatOpened,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_ChatAssignmentOpenedStatusAction) Reset() {
	*x = SyncActionValue_ChatAssignmentOpenedStatusAction{}
	mi := &file_WAProto_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_ChatAssignmentOpenedStatusAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_ChatAssignmentOpenedStatusAction) ProtoMessage() {}

func (x *SyncActionValue_ChatAssignmentOpenedStatusAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_ChatAssignmentOpenedStatusAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_ChatAssignmentOpenedStatusAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 6}
}

func (x *SyncActionValue_ChatAssignmentOpenedStatusAction) GetChatOpened() bool {
	if x != nil && x.ChatOpened != nil {
		return *x.ChatOpened
	}
	return false
}

type SyncActionValue_ClearChatAction struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	MessageRange  *SyncActionValue_SyncActionMessageRange `protobuf:"bytes,1,opt,name=messageRange" json:"messageRange,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_ClearChatAction) Reset() {
	*x = SyncActionValue_ClearChatAction{}
	mi := &file_WAProto_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_ClearChatAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_ClearChatAction) ProtoMessage() {}

func (x *SyncActionValue_ClearChatAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_ClearChatAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_ClearChatAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 7}
}

func (x *SyncActionValue_ClearChatAction) GetMessageRange() *SyncActionValue_SyncActionMessageRange {
	if x != nil {
		return x.MessageRange
	}
	return nil
}

type SyncActionValue_ContactAction struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	FullName                 *string                `protobuf:"bytes,1,opt,name=fullName" json:"fullName,omitempty"`
	FirstName                *string                `protobuf:"bytes,2,opt,name=firstName" json:"firstName,omitempty"`
	LidJid                   *string                `protobuf:"bytes,3,opt,name=lidJid" json:"lidJid,omitempty"`
	SaveOnPrimaryAddressbook *bool                  `protobuf:"varint,4,opt,name=saveOnPrimaryAddressbook" json:"saveOnPrimaryAddressbook,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SyncActionValue_ContactAction) Reset() {
	*x = SyncActionValue_ContactAction{}
	mi := &file_WAProto_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_ContactAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_ContactAction) ProtoMessage() {}

func (x *SyncActionValue_ContactAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_ContactAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_ContactAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 8}
}

func (x *SyncActionValue_ContactAction) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *SyncActionValue_ContactAction) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *SyncActionValue_ContactAction) GetLidJid() string {
	if x != nil && x.LidJid != nil {
		return *x.LidJid
	}
	return ""
}

func (x *SyncActionValue_ContactAction) GetSaveOnPrimaryAddressbook() bool {
	if x != nil && x.SaveOnPrimaryAddressbook != nil {
		return *x.SaveOnPrimaryAddressbook
	}
	return false
}

type SyncActionValue_CustomPaymentMethod struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	CredentialId  *string                                        `protobuf:"bytes,1,req,name=credentialId" json:"credentialId,omitempty"`
	Country       *string                                        `protobuf:"bytes,2,req,name=country" json:"country,omitempty"`
	Type          *string                                        `protobuf:"bytes,3,req,name=type" json:"type,omitempty"`
	Metadata      []*SyncActionValue_CustomPaymentMethodMetadata `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_CustomPaymentMethod) Reset() {
	*x = SyncActionValue_CustomPaymentMethod{}
	mi := &file_WAProto_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_CustomPaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_CustomPaymentMethod) ProtoMessage() {}

func (x *SyncActionValue_CustomPaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_CustomPaymentMethod.ProtoReflect.Descriptor instead.
func (*SyncActionValue_CustomPaymentMethod) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 9}
}

func (x *SyncActionValue_CustomPaymentMethod) GetCredentialId() string {
	if x != nil && x.CredentialId != nil {
		return *x.CredentialId
	}
	return ""
}

func (x *SyncActionValue_CustomPaymentMethod) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *SyncActionValue_CustomPaymentMethod) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *SyncActionValue_CustomPaymentMethod) GetMetadata() []*SyncActionValue_CustomPaymentMethodMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SyncActionValue_CustomPaymentMethodMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_CustomPaymentMethodMetadata) Reset() {
	*x = SyncActionValue_CustomPaymentMethodMetadata{}
	mi := &file_WAProto_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_CustomPaymentMethodMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_CustomPaymentMethodMetadata) ProtoMessage() {}

func (x *SyncActionValue_CustomPaymentMethodMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_CustomPaymentMethodMetadata.ProtoReflect.Descriptor instead.
func (*SyncActionValue_CustomPaymentMethodMetadata) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 10}
}

func (x *SyncActionValue_CustomPaymentMethodMetadata) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SyncActionValue_CustomPaymentMethodMetadata) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SyncActionValue_CustomPaymentMethodsAction struct {
	state                protoimpl.MessageState                 `protogen:"open.v1"`
	CustomPaymentMethods []*SyncActionValue_CustomPaymentMethod `protobuf:"bytes,1,rep,name=customPaymentMethods" json:"customPaymentMethods,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SyncActionValue_CustomPaymentMethodsAction) Reset() {
	*x = SyncActionValue_CustomPaymentMethodsAction{}
	mi := &file_WAProto_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_CustomPaymentMethodsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_CustomPaymentMethodsAction) ProtoMessage() {}

func (x *SyncActionValue_CustomPaymentMethodsAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_CustomPaymentMethodsAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_CustomPaymentMethodsAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 11}
}

func (x *SyncActionValue_CustomPaymentMethodsAction) GetCustomPaymentMethods() []*SyncActionValue_CustomPaymentMethod {
	if x != nil {
		return x.CustomPaymentMethods
	}
	return nil
}

type SyncActionValue_DeleteChatAction struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	MessageRange  *SyncActionValue_SyncActionMessageRange `protobuf:"bytes,1,opt,name=messageRange" json:"messageRange,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_DeleteChatAction) Reset() {
	*x = SyncActionValue_DeleteChatAction{}
	mi := &file_WAProto_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_DeleteChatAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_DeleteChatAction) ProtoMessage() {}

func (x *SyncActionValue_DeleteChatAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_DeleteChatAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_DeleteChatAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 12}
}

func (x *SyncActionValue_DeleteChatAction) GetMessageRange() *SyncActionValue_SyncActionMessageRange {
	if x != nil {
		return x.MessageRange
	}
	return nil
}

type SyncActionValue_DeleteIndividualCallLogAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerJid       *string                `protobuf:"bytes,1,opt,name=peerJid" json:"peerJid,omitempty"`
	IsIncoming    *bool                  `protobuf:"varint,2,opt,name=isIncoming" json:"isIncoming,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_DeleteIndividualCallLogAction) Reset() {
	*x = SyncActionValue_DeleteIndividualCallLogAction{}
	mi := &file_WAProto_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_DeleteIndividualCallLogAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_DeleteIndividualCallLogAction) ProtoMessage() {}

func (x *SyncActionValue_DeleteIndividualCallLogAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_DeleteIndividualCallLogAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_DeleteIndividualCallLogAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 13}
}

func (x *SyncActionValue_DeleteIndividualCallLogAction) GetPeerJid() string {
	if x != nil && x.PeerJid != nil {
		return *x.PeerJid
	}
	return ""
}

func (x *SyncActionValue_DeleteIndividualCallLogAction) GetIsIncoming() bool {
	if x != nil && x.IsIncoming != nil {
		return *x.IsIncoming
	}
	return false
}

type SyncActionValue_DeleteMessageForMeAction struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DeleteMedia      *bool                  `protobuf:"varint,1,opt,name=deleteMedia" json:"deleteMedia,omitempty"`
	MessageTimestamp *int64                 `protobuf:"varint,2,opt,name=messageTimestamp" json:"messageTimestamp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SyncActionValue_DeleteMessageForMeAction) Reset() {
	*x = SyncActionValue_DeleteMessageForMeAction{}
	mi := &file_WAProto_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_DeleteMessageForMeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_DeleteMessageForMeAction) ProtoMessage() {}

func (x *SyncActionValue_DeleteMessageForMeAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_DeleteMessageForMeAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_DeleteMessageForMeAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 14}
}

func (x *SyncActionValue_DeleteMessageForMeAction) GetDeleteMedia() bool {
	if x != nil && x.DeleteMedia != nil {
		return *x.DeleteMedia
	}
	return false
}

func (x *SyncActionValue_DeleteMessageForMeAction) GetMessageTimestamp() int64 {
	if x != nil && x.MessageTimestamp != nil {
		return *x.MessageTimestamp
	}
	return 0
}

type SyncActionValue_ExternalWebBetaAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsOptIn       *bool                  `protobuf:"varint,1,opt,name=isOptIn" json:"isOptIn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_ExternalWebBetaAction) Reset() {
	*x = SyncActionValue_ExternalWebBetaAction{}
	mi := &file_WAProto_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_ExternalWebBetaAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_ExternalWebBetaAction) ProtoMessage() {}

func (x *SyncActionValue_ExternalWebBetaAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_ExternalWebBetaAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_ExternalWebBetaAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 15}
}

func (x *SyncActionValue_ExternalWebBetaAction) GetIsOptIn() bool {
	if x != nil && x.IsOptIn != nil {
		return *x.IsOptIn
	}
	return false
}

type SyncActionValue_KeyExpiration struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ExpiredKeyEpoch *int32                 `protobuf:"varint,1,opt,name=expiredKeyEpoch" json:"expiredKeyEpoch,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SyncActionValue_KeyExpiration) Reset() {
	*x = SyncActionValue_KeyExpiration{}
	mi := &file_WAProto_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_KeyExpiration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_KeyExpiration) ProtoMessage() {}

func (x *SyncActionValue_KeyExpiration) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_KeyExpiration.ProtoReflect.Descriptor instead.
func (*SyncActionValue_KeyExpiration) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 16}
}

func (x *SyncActionValue_KeyExpiration) GetExpiredKeyEpoch() int32 {
	if x != nil && x.ExpiredKeyEpoch != nil {
		return *x.ExpiredKeyEpoch
	}
	return 0
}

type SyncActionValue_LabelAssociationAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Labeled       *bool                  `protobuf:"varint,1,opt,name=labeled" json:"labeled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_LabelAssociationAction) Reset() {
	*x = SyncActionValue_LabelAssociationAction{}
	mi := &file_WAProto_proto_msgTypes[279]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_LabelAssociationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_LabelAssociationAction) ProtoMessage() {}

func (x *SyncActionValue_LabelAssociationAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[279]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_LabelAssociationAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_LabelAssociationAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 17}
}

func (x *SyncActionValue_LabelAssociationAction) GetLabeled() bool {
	if x != nil && x.Labeled != nil {
		return *x.Labeled
	}
	return false
}

type SyncActionValue_LabelEditAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Color         *int32                 `protobuf:"varint,2,opt,name=color" json:"color,omitempty"`
	PredefinedId  *int32                 `protobuf:"varint,3,opt,name=predefinedId" json:"predefinedId,omitempty"`
	Deleted       *bool                  `protobuf:"varint,4,opt,name=deleted" json:"deleted,omitempty"`
	OrderIndex    *int32                 `protobuf:"varint,5,opt,name=orderIndex" json:"orderIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_LabelEditAction) Reset() {
	*x = SyncActionValue_LabelEditAction{}
	mi := &file_WAProto_proto_msgTypes[280]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_LabelEditAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_LabelEditAction) ProtoMessage() {}

func (x *SyncActionValue_LabelEditAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[280]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_LabelEditAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_LabelEditAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 18}
}

func (x *SyncActionValue_LabelEditAction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SyncActionValue_LabelEditAction) GetColor() int32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *SyncActionValue_LabelEditAction) GetPredefinedId() int32 {
	if x != nil && x.PredefinedId != nil {
		return *x.PredefinedId
	}
	return 0
}

func (x *SyncActionValue_LabelEditAction) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *SyncActionValue_LabelEditAction) GetOrderIndex() int32 {
	if x != nil && x.OrderIndex != nil {
		return *x.OrderIndex
	}
	return 0
}

type SyncActionValue_LabelReorderingAction struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SortedLabelIds []int32                `protobuf:"varint,1,rep,name=sortedLabelIds" json:"sortedLabelIds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SyncActionValue_LabelReorderingAction) Reset() {
	*x = SyncActionValue_LabelReorderingAction{}
	mi := &file_WAProto_proto_msgTypes[281]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_LabelReorderingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_LabelReorderingAction) ProtoMessage() {}

func (x *SyncActionValue_LabelReorderingAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[281]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_LabelReorderingAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_LabelReorderingAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 19}
}

func (x *SyncActionValue_LabelReorderingAction) GetSortedLabelIds() []int32 {
	if x != nil {
		return x.SortedLabelIds
	}
	return nil
}

type SyncActionValue_LocaleSetting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Locale        *string                `protobuf:"bytes,1,opt,name=locale" json:"locale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_LocaleSetting) Reset() {
	*x = SyncActionValue_LocaleSetting{}
	mi := &file_WAProto_proto_msgTypes[282]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_LocaleSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_LocaleSetting) ProtoMessage() {}

func (x *SyncActionValue_LocaleSetting) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[282]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_LocaleSetting.ProtoReflect.Descriptor instead.
func (*SyncActionValue_LocaleSetting) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 20}
}

func (x *SyncActionValue_LocaleSetting) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

type SyncActionValue_MarkChatAsReadAction struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Read          *bool                                   `protobuf:"varint,1,opt,name=read" json:"read,omitempty"`
	MessageRange  *SyncActionValue_SyncActionMessageRange `protobuf:"bytes,2,opt,name=messageRange" json:"messageRange,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_MarkChatAsReadAction) Reset() {
	*x = SyncActionValue_MarkChatAsReadAction{}
	mi := &file_WAProto_proto_msgTypes[283]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_MarkChatAsReadAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_MarkChatAsReadAction) ProtoMessage() {}

func (x *SyncActionValue_MarkChatAsReadAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[283]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_MarkChatAsReadAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_MarkChatAsReadAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 21}
}

func (x *SyncActionValue_MarkChatAsReadAction) GetRead() bool {
	if x != nil && x.Read != nil {
		return *x.Read
	}
	return false
}

func (x *SyncActionValue_MarkChatAsReadAction) GetMessageRange() *SyncActionValue_SyncActionMessageRange {
	if x != nil {
		return x.MessageRange
	}
	return nil
}

type SyncActionValue_MarketingMessageAction struct {
	state         protoimpl.MessageState                                                `protogen:"open.v1"`
	Name          *string                                                               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Message       *string                                                               `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Type          *SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType `protobuf:"varint,3,opt,name=type,enum=proto.SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType" json:"type,omitempty"`
	CreatedAt     *int64                                                                `protobuf:"varint,4,opt,name=createdAt" json:"createdAt,omitempty"`
	LastSentAt    *int64                                                                `protobuf:"varint,5,opt,name=lastSentAt" json:"lastSentAt,omitempty"`
	IsDeleted     *bool                                                                 `protobuf:"varint,6,opt,name=isDeleted" json:"isDeleted,omitempty"`
	MediaId       *string                                                               `protobuf:"bytes,7,opt,name=mediaId" json:"mediaId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_MarketingMessageAction) Reset() {
	*x = SyncActionValue_MarketingMessageAction{}
	mi := &file_WAProto_proto_msgTypes[284]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_MarketingMessageAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_MarketingMessageAction) ProtoMessage() {}

func (x *SyncActionValue_MarketingMessageAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[284]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_MarketingMessageAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_MarketingMessageAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 22}
}

func (x *SyncActionValue_MarketingMessageAction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SyncActionValue_MarketingMessageAction) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SyncActionValue_MarketingMessageAction) GetType() SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SyncActionValue_MarketingMessageAction_PERSONALIZED
}

func (x *SyncActionValue_MarketingMessageAction) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *SyncActionValue_MarketingMessageAction) GetLastSentAt() int64 {
	if x != nil && x.LastSentAt != nil {
		return *x.LastSentAt
	}
	return 0
}

func (x *SyncActionValue_MarketingMessageAction) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return false
}

func (x *SyncActionValue_MarketingMessageAction) GetMediaId() string {
	if x != nil && x.MediaId != nil {
		return *x.MediaId
	}
	return ""
}

type SyncActionValue_MarketingMessageBroadcastAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RepliedCount  *int32                 `protobuf:"varint,1,opt,name=repliedCount" json:"repliedCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_MarketingMessageBroadcastAction) Reset() {
	*x = SyncActionValue_MarketingMessageBroadcastAction{}
	mi := &file_WAProto_proto_msgTypes[285]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_MarketingMessageBroadcastAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_MarketingMessageBroadcastAction) ProtoMessage() {}

func (x *SyncActionValue_MarketingMessageBroadcastAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[285]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_MarketingMessageBroadcastAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_MarketingMessageBroadcastAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 23}
}

func (x *SyncActionValue_MarketingMessageBroadcastAction) GetRepliedCount() int32 {
	if x != nil && x.RepliedCount != nil {
		return *x.RepliedCount
	}
	return 0
}

type SyncActionValue_MuteAction struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Muted            *bool                  `protobuf:"varint,1,opt,name=muted" json:"muted,omitempty"`
	MuteEndTimestamp *int64                 `protobuf:"varint,2,opt,name=muteEndTimestamp" json:"muteEndTimestamp,omitempty"`
	AutoMuted        *bool                  `protobuf:"varint,3,opt,name=autoMuted" json:"autoMuted,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SyncActionValue_MuteAction) Reset() {
	*x = SyncActionValue_MuteAction{}
	mi := &file_WAProto_proto_msgTypes[286]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_MuteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_MuteAction) ProtoMessage() {}

func (x *SyncActionValue_MuteAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[286]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_MuteAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_MuteAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 24}
}

func (x *SyncActionValue_MuteAction) GetMuted() bool {
	if x != nil && x.Muted != nil {
		return *x.Muted
	}
	return false
}

func (x *SyncActionValue_MuteAction) GetMuteEndTimestamp() int64 {
	if x != nil && x.MuteEndTimestamp != nil {
		return *x.MuteEndTimestamp
	}
	return 0
}

func (x *SyncActionValue_MuteAction) GetAutoMuted() bool {
	if x != nil && x.AutoMuted != nil {
		return *x.AutoMuted
	}
	return false
}

type SyncActionValue_NuxAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Acknowledged  *bool                  `protobuf:"varint,1,opt,name=acknowledged" json:"acknowledged,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_NuxAction) Reset() {
	*x = SyncActionValue_NuxAction{}
	mi := &file_WAProto_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_NuxAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_NuxAction) ProtoMessage() {}

func (x *SyncActionValue_NuxAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_NuxAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_NuxAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 25}
}

func (x *SyncActionValue_NuxAction) GetAcknowledged() bool {
	if x != nil && x.Acknowledged != nil {
		return *x.Acknowledged
	}
	return false
}

type SyncActionValue_PaymentInfoAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cpi           *string                `protobuf:"bytes,1,opt,name=cpi" json:"cpi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_PaymentInfoAction) Reset() {
	*x = SyncActionValue_PaymentInfoAction{}
	mi := &file_WAProto_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_PaymentInfoAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_PaymentInfoAction) ProtoMessage() {}

func (x *SyncActionValue_PaymentInfoAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_PaymentInfoAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_PaymentInfoAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 26}
}

func (x *SyncActionValue_PaymentInfoAction) GetCpi() string {
	if x != nil && x.Cpi != nil {
		return *x.Cpi
	}
	return ""
}

type SyncActionValue_PinAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pinned        *bool                  `protobuf:"varint,1,opt,name=pinned" json:"pinned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_PinAction) Reset() {
	*x = SyncActionValue_PinAction{}
	mi := &file_WAProto_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_PinAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_PinAction) ProtoMessage() {}

func (x *SyncActionValue_PinAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_PinAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_PinAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 27}
}

func (x *SyncActionValue_PinAction) GetPinned() bool {
	if x != nil && x.Pinned != nil {
		return *x.Pinned
	}
	return false
}

type SyncActionValue_PnForLidChatAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PnJid         *string                `protobuf:"bytes,1,opt,name=pnJid" json:"pnJid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_PnForLidChatAction) Reset() {
	*x = SyncActionValue_PnForLidChatAction{}
	mi := &file_WAProto_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_PnForLidChatAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_PnForLidChatAction) ProtoMessage() {}

func (x *SyncActionValue_PnForLidChatAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_PnForLidChatAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_PnForLidChatAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 28}
}

func (x *SyncActionValue_PnForLidChatAction) GetPnJid() string {
	if x != nil && x.PnJid != nil {
		return *x.PnJid
	}
	return ""
}

type SyncActionValue_PrimaryFeature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flags         []string               `protobuf:"bytes,1,rep,name=flags" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_PrimaryFeature) Reset() {
	*x = SyncActionValue_PrimaryFeature{}
	mi := &file_WAProto_proto_msgTypes[291]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_PrimaryFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_PrimaryFeature) ProtoMessage() {}

func (x *SyncActionValue_PrimaryFeature) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[291]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_PrimaryFeature.ProtoReflect.Descriptor instead.
func (*SyncActionValue_PrimaryFeature) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 29}
}

func (x *SyncActionValue_PrimaryFeature) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

type SyncActionValue_PrimaryVersionAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *string                `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_PrimaryVersionAction) Reset() {
	*x = SyncActionValue_PrimaryVersionAction{}
	mi := &file_WAProto_proto_msgTypes[292]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_PrimaryVersionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_PrimaryVersionAction) ProtoMessage() {}

func (x *SyncActionValue_PrimaryVersionAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[292]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_PrimaryVersionAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_PrimaryVersionAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 30}
}

func (x *SyncActionValue_PrimaryVersionAction) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type SyncActionValue_PrivacySettingRelayAllCalls struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsEnabled     *bool                  `protobuf:"varint,1,opt,name=isEnabled" json:"isEnabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_PrivacySettingRelayAllCalls) Reset() {
	*x = SyncActionValue_PrivacySettingRelayAllCalls{}
	mi := &file_WAProto_proto_msgTypes[293]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_PrivacySettingRelayAllCalls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_PrivacySettingRelayAllCalls) ProtoMessage() {}

func (x *SyncActionValue_PrivacySettingRelayAllCalls) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[293]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_PrivacySettingRelayAllCalls.ProtoReflect.Descriptor instead.
func (*SyncActionValue_PrivacySettingRelayAllCalls) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 31}
}

func (x *SyncActionValue_PrivacySettingRelayAllCalls) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

type SyncActionValue_PushNameSetting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_PushNameSetting) Reset() {
	*x = SyncActionValue_PushNameSetting{}
	mi := &file_WAProto_proto_msgTypes[294]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_PushNameSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_PushNameSetting) ProtoMessage() {}

func (x *SyncActionValue_PushNameSetting) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[294]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_PushNameSetting.ProtoReflect.Descriptor instead.
func (*SyncActionValue_PushNameSetting) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 32}
}

func (x *SyncActionValue_PushNameSetting) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type SyncActionValue_QuickReplyAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Shortcut      *string                `protobuf:"bytes,1,opt,name=shortcut" json:"shortcut,omitempty"`
	Message       *string                `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Keywords      []string               `protobuf:"bytes,3,rep,name=keywords" json:"keywords,omitempty"`
	Count         *int32                 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Deleted       *bool                  `protobuf:"varint,5,opt,name=deleted" json:"deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_QuickReplyAction) Reset() {
	*x = SyncActionValue_QuickReplyAction{}
	mi := &file_WAProto_proto_msgTypes[295]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_QuickReplyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_QuickReplyAction) ProtoMessage() {}

func (x *SyncActionValue_QuickReplyAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[295]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_QuickReplyAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_QuickReplyAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 33}
}

func (x *SyncActionValue_QuickReplyAction) GetShortcut() string {
	if x != nil && x.Shortcut != nil {
		return *x.Shortcut
	}
	return ""
}

func (x *SyncActionValue_QuickReplyAction) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SyncActionValue_QuickReplyAction) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *SyncActionValue_QuickReplyAction) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *SyncActionValue_QuickReplyAction) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

type SyncActionValue_RecentEmojiWeightsAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Weights       []*RecentEmojiWeight   `protobuf:"bytes,1,rep,name=weights" json:"weights,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_RecentEmojiWeightsAction) Reset() {
	*x = SyncActionValue_RecentEmojiWeightsAction{}
	mi := &file_WAProto_proto_msgTypes[296]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_RecentEmojiWeightsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_RecentEmojiWeightsAction) ProtoMessage() {}

func (x *SyncActionValue_RecentEmojiWeightsAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[296]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_RecentEmojiWeightsAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_RecentEmojiWeightsAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 34}
}

func (x *SyncActionValue_RecentEmojiWeightsAction) GetWeights() []*RecentEmojiWeight {
	if x != nil {
		return x.Weights
	}
	return nil
}

type SyncActionValue_RemoveRecentStickerAction struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LastStickerSentTs *int64                 `protobuf:"varint,1,opt,name=lastStickerSentTs" json:"lastStickerSentTs,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SyncActionValue_RemoveRecentStickerAction) Reset() {
	*x = SyncActionValue_RemoveRecentStickerAction{}
	mi := &file_WAProto_proto_msgTypes[297]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_RemoveRecentStickerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_RemoveRecentStickerAction) ProtoMessage() {}

func (x *SyncActionValue_RemoveRecentStickerAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[297]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_RemoveRecentStickerAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_RemoveRecentStickerAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 35}
}

func (x *SyncActionValue_RemoveRecentStickerAction) GetLastStickerSentTs() int64 {
	if x != nil && x.LastStickerSentTs != nil {
		return *x.LastStickerSentTs
	}
	return 0
}

type SyncActionValue_SecurityNotificationSetting struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ShowNotification *bool                  `protobuf:"varint,1,opt,name=showNotification" json:"showNotification,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SyncActionValue_SecurityNotificationSetting) Reset() {
	*x = SyncActionValue_SecurityNotificationSetting{}
	mi := &file_WAProto_proto_msgTypes[298]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_SecurityNotificationSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_SecurityNotificationSetting) ProtoMessage() {}

func (x *SyncActionValue_SecurityNotificationSetting) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[298]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_SecurityNotificationSetting.ProtoReflect.Descriptor instead.
func (*SyncActionValue_SecurityNotificationSetting) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 36}
}

func (x *SyncActionValue_SecurityNotificationSetting) GetShowNotification() bool {
	if x != nil && x.ShowNotification != nil {
		return *x.ShowNotification
	}
	return false
}

type SyncActionValue_StarAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Starred       *bool                  `protobuf:"varint,1,opt,name=starred" json:"starred,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_StarAction) Reset() {
	*x = SyncActionValue_StarAction{}
	mi := &file_WAProto_proto_msgTypes[299]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_StarAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_StarAction) ProtoMessage() {}

func (x *SyncActionValue_StarAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[299]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_StarAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_StarAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 37}
}

func (x *SyncActionValue_StarAction) GetStarred() bool {
	if x != nil && x.Starred != nil {
		return *x.Starred
	}
	return false
}

type SyncActionValue_StatusPrivacyAction struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Mode          *SyncActionValue_StatusPrivacyAction_StatusDistributionMode `protobuf:"varint,1,opt,name=mode,enum=proto.SyncActionValue_StatusPrivacyAction_StatusDistributionMode" json:"mode,omitempty"`
	UserJid       []string                                                    `protobuf:"bytes,2,rep,name=userJid" json:"userJid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_StatusPrivacyAction) Reset() {
	*x = SyncActionValue_StatusPrivacyAction{}
	mi := &file_WAProto_proto_msgTypes[300]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_StatusPrivacyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_StatusPrivacyAction) ProtoMessage() {}

func (x *SyncActionValue_StatusPrivacyAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[300]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_StatusPrivacyAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_StatusPrivacyAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 38}
}

func (x *SyncActionValue_StatusPrivacyAction) GetMode() SyncActionValue_StatusPrivacyAction_StatusDistributionMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return SyncActionValue_StatusPrivacyAction_ALLOW_LIST
}

func (x *SyncActionValue_StatusPrivacyAction) GetUserJid() []string {
	if x != nil {
		return x.UserJid
	}
	return nil
}

type SyncActionValue_StickerAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           *string                `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	FileEncSha256 []byte                 `protobuf:"bytes,2,opt,name=fileEncSha256" json:"fileEncSha256,omitempty"`
	MediaKey      []byte                 `protobuf:"bytes,3,opt,name=mediaKey" json:"mediaKey,omitempty"`
	Mimetype      *string                `protobuf:"bytes,4,opt,name=mimetype" json:"mimetype,omitempty"`
	Height        *uint32                `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	Width         *uint32                `protobuf:"varint,6,opt,name=width" json:"width,omitempty"`
	DirectPath    *string                `protobuf:"bytes,7,opt,name=directPath" json:"directPath,omitempty"`
	FileLength    *uint64                `protobuf:"varint,8,opt,name=fileLength" json:"fileLength,omitempty"`
	IsFavorite    *bool                  `protobuf:"varint,9,opt,name=isFavorite" json:"isFavorite,omitempty"`
	DeviceIdHint  *uint32                `protobuf:"varint,10,opt,name=deviceIdHint" json:"deviceIdHint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_StickerAction) Reset() {
	*x = SyncActionValue_StickerAction{}
	mi := &file_WAProto_proto_msgTypes[301]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_StickerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_StickerAction) ProtoMessage() {}

func (x *SyncActionValue_StickerAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[301]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_StickerAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_StickerAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 39}
}

func (x *SyncActionValue_StickerAction) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *SyncActionValue_StickerAction) GetFileEncSha256() []byte {
	if x != nil {
		return x.FileEncSha256
	}
	return nil
}

func (x *SyncActionValue_StickerAction) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *SyncActionValue_StickerAction) GetMimetype() string {
	if x != nil && x.Mimetype != nil {
		return *x.Mimetype
	}
	return ""
}

func (x *SyncActionValue_StickerAction) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *SyncActionValue_StickerAction) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *SyncActionValue_StickerAction) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *SyncActionValue_StickerAction) GetFileLength() uint64 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *SyncActionValue_StickerAction) GetIsFavorite() bool {
	if x != nil && x.IsFavorite != nil {
		return *x.IsFavorite
	}
	return false
}

func (x *SyncActionValue_StickerAction) GetDeviceIdHint() uint32 {
	if x != nil && x.DeviceIdHint != nil {
		return *x.DeviceIdHint
	}
	return 0
}

type SyncActionValue_SubscriptionAction struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IsDeactivated  *bool                  `protobuf:"varint,1,opt,name=isDeactivated" json:"isDeactivated,omitempty"`
	IsAutoRenewing *bool                  `protobuf:"varint,2,opt,name=isAutoRenewing" json:"isAutoRenewing,omitempty"`
	ExpirationDate *int64                 `protobuf:"varint,3,opt,name=expirationDate" json:"expirationDate,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SyncActionValue_SubscriptionAction) Reset() {
	*x = SyncActionValue_SubscriptionAction{}
	mi := &file_WAProto_proto_msgTypes[302]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_SubscriptionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_SubscriptionAction) ProtoMessage() {}

func (x *SyncActionValue_SubscriptionAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[302]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_SubscriptionAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_SubscriptionAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 40}
}

func (x *SyncActionValue_SubscriptionAction) GetIsDeactivated() bool {
	if x != nil && x.IsDeactivated != nil {
		return *x.IsDeactivated
	}
	return false
}

func (x *SyncActionValue_SubscriptionAction) GetIsAutoRenewing() bool {
	if x != nil && x.IsAutoRenewing != nil {
		return *x.IsAutoRenewing
	}
	return false
}

func (x *SyncActionValue_SubscriptionAction) GetExpirationDate() int64 {
	if x != nil && x.ExpirationDate != nil {
		return *x.ExpirationDate
	}
	return 0
}

type SyncActionValue_SyncActionMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *MessageKey            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Timestamp     *int64                 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_SyncActionMessage) Reset() {
	*x = SyncActionValue_SyncActionMessage{}
	mi := &file_WAProto_proto_msgTypes[303]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_SyncActionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_SyncActionMessage) ProtoMessage() {}

func (x *SyncActionValue_SyncActionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[303]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_SyncActionMessage.ProtoReflect.Descriptor instead.
func (*SyncActionValue_SyncActionMessage) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 41}
}

func (x *SyncActionValue_SyncActionMessage) GetKey() *MessageKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SyncActionValue_SyncActionMessage) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type SyncActionValue_SyncActionMessageRange struct {
	state                      protoimpl.MessageState               `protogen:"open.v1"`
	LastMessageTimestamp       *int64                               `protobuf:"varint,1,opt,name=lastMessageTimestamp" json:"lastMessageTimestamp,omitempty"`
	LastSystemMessageTimestamp *int64                               `protobuf:"varint,2,opt,name=lastSystemMessageTimestamp" json:"lastSystemMessageTimestamp,omitempty"`
	Messages                   []*SyncActionValue_SyncActionMessage `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *SyncActionValue_SyncActionMessageRange) Reset() {
	*x = SyncActionValue_SyncActionMessageRange{}
	mi := &file_WAProto_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_SyncActionMessageRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_SyncActionMessageRange) ProtoMessage() {}

func (x *SyncActionValue_SyncActionMessageRange) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_SyncActionMessageRange.ProtoReflect.Descriptor instead.
func (*SyncActionValue_SyncActionMessageRange) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 42}
}

func (x *SyncActionValue_SyncActionMessageRange) GetLastMessageTimestamp() int64 {
	if x != nil && x.LastMessageTimestamp != nil {
		return *x.LastMessageTimestamp
	}
	return 0
}

func (x *SyncActionValue_SyncActionMessageRange) GetLastSystemMessageTimestamp() int64 {
	if x != nil && x.LastSystemMessageTimestamp != nil {
		return *x.LastSystemMessageTimestamp
	}
	return 0
}

func (x *SyncActionValue_SyncActionMessageRange) GetMessages() []*SyncActionValue_SyncActionMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type SyncActionValue_TimeFormatAction struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	IsTwentyFourHourFormatEnabled *bool                  `protobuf:"varint,1,opt,name=isTwentyFourHourFormatEnabled" json:"isTwentyFourHourFormatEnabled,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *SyncActionValue_TimeFormatAction) Reset() {
	*x = SyncActionValue_TimeFormatAction{}
	mi := &file_WAProto_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_TimeFormatAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_TimeFormatAction) ProtoMessage() {}

func (x *SyncActionValue_TimeFormatAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_TimeFormatAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_TimeFormatAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 43}
}

func (x *SyncActionValue_TimeFormatAction) GetIsTwentyFourHourFormatEnabled() bool {
	if x != nil && x.IsTwentyFourHourFormatEnabled != nil {
		return *x.IsTwentyFourHourFormatEnabled
	}
	return false
}

type SyncActionValue_UnarchiveChatsSetting struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UnarchiveChats *bool                  `protobuf:"varint,1,opt,name=unarchiveChats" json:"unarchiveChats,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SyncActionValue_UnarchiveChatsSetting) Reset() {
	*x = SyncActionValue_UnarchiveChatsSetting{}
	mi := &file_WAProto_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_UnarchiveChatsSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_UnarchiveChatsSetting) ProtoMessage() {}

func (x *SyncActionValue_UnarchiveChatsSetting) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_UnarchiveChatsSetting.ProtoReflect.Descriptor instead.
func (*SyncActionValue_UnarchiveChatsSetting) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 44}
}

func (x *SyncActionValue_UnarchiveChatsSetting) GetUnarchiveChats() bool {
	if x != nil && x.UnarchiveChats != nil {
		return *x.UnarchiveChats
	}
	return false
}

type SyncActionValue_UserStatusMuteAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Muted         *bool                  `protobuf:"varint,1,opt,name=muted" json:"muted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncActionValue_UserStatusMuteAction) Reset() {
	*x = SyncActionValue_UserStatusMuteAction{}
	mi := &file_WAProto_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncActionValue_UserStatusMuteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncActionValue_UserStatusMuteAction) ProtoMessage() {}

func (x *SyncActionValue_UserStatusMuteAction) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncActionValue_UserStatusMuteAction.ProtoReflect.Descriptor instead.
func (*SyncActionValue_UserStatusMuteAction) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{91, 45}
}

func (x *SyncActionValue_UserStatusMuteAction) GetMuted() bool {
	if x != nil && x.Muted != nil {
		return *x.Muted
	}
	return false
}

type TemplateButton_CallButton struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	DisplayText   *Message_HighlyStructuredMessage `protobuf:"bytes,1,opt,name=displayText" json:"displayText,omitempty"`
	PhoneNumber   *Message_HighlyStructuredMessage `protobuf:"bytes,2,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateButton_CallButton) Reset() {
	*x = TemplateButton_CallButton{}
	mi := &file_WAProto_proto_msgTypes[308]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateButton_CallButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateButton_CallButton) ProtoMessage() {}

func (x *TemplateButton_CallButton) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[308]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateButton_CallButton.ProtoReflect.Descriptor instead.
func (*TemplateButton_CallButton) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{100, 0}
}

func (x *TemplateButton_CallButton) GetDisplayText() *Message_HighlyStructuredMessage {
	if x != nil {
		return x.DisplayText
	}
	return nil
}

func (x *TemplateButton_CallButton) GetPhoneNumber() *Message_HighlyStructuredMessage {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

type TemplateButton_QuickReplyButton struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	DisplayText   *Message_HighlyStructuredMessage `protobuf:"bytes,1,opt,name=displayText" json:"displayText,omitempty"`
	Id            *string                          `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateButton_QuickReplyButton) Reset() {
	*x = TemplateButton_QuickReplyButton{}
	mi := &file_WAProto_proto_msgTypes[309]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateButton_QuickReplyButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateButton_QuickReplyButton) ProtoMessage() {}

func (x *TemplateButton_QuickReplyButton) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[309]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateButton_QuickReplyButton.ProtoReflect.Descriptor instead.
func (*TemplateButton_QuickReplyButton) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{100, 1}
}

func (x *TemplateButton_QuickReplyButton) GetDisplayText() *Message_HighlyStructuredMessage {
	if x != nil {
		return x.DisplayText
	}
	return nil
}

func (x *TemplateButton_QuickReplyButton) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type TemplateButton_URLButton struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	DisplayText   *Message_HighlyStructuredMessage `protobuf:"bytes,1,opt,name=displayText" json:"displayText,omitempty"`
	Url           *Message_HighlyStructuredMessage `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateButton_URLButton) Reset() {
	*x = TemplateButton_URLButton{}
	mi := &file_WAProto_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateButton_URLButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateButton_URLButton) ProtoMessage() {}

func (x *TemplateButton_URLButton) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateButton_URLButton.ProtoReflect.Descriptor instead.
func (*TemplateButton_URLButton) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{100, 2}
}

func (x *TemplateButton_URLButton) GetDisplayText() *Message_HighlyStructuredMessage {
	if x != nil {
		return x.DisplayText
	}
	return nil
}

func (x *TemplateButton_URLButton) GetUrl() *Message_HighlyStructuredMessage {
	if x != nil {
		return x.Url
	}
	return nil
}

type VerifiedNameCertificate_Details struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Serial         *uint64                `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	Issuer         *string                `protobuf:"bytes,2,opt,name=issuer" json:"issuer,omitempty"`
	VerifiedName   *string                `protobuf:"bytes,4,opt,name=verifiedName" json:"verifiedName,omitempty"`
	LocalizedNames []*LocalizedName       `protobuf:"bytes,8,rep,name=localizedNames" json:"localizedNames,omitempty"`
	IssueTime      *uint64                `protobuf:"varint,10,opt,name=issueTime" json:"issueTime,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VerifiedNameCertificate_Details) Reset() {
	*x = VerifiedNameCertificate_Details{}
	mi := &file_WAProto_proto_msgTypes[311]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifiedNameCertificate_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiedNameCertificate_Details) ProtoMessage() {}

func (x *VerifiedNameCertificate_Details) ProtoReflect() protoreflect.Message {
	mi := &file_WAProto_proto_msgTypes[311]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiedNameCertificate_Details.ProtoReflect.Descriptor instead.
func (*VerifiedNameCertificate_Details) Descriptor() ([]byte, []int) {
	return file_WAProto_proto_rawDescGZIP(), []int{102, 0}
}

func (x *VerifiedNameCertificate_Details) GetSerial() uint64 {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return 0
}

func (x *VerifiedNameCertificate_Details) GetIssuer() string {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return ""
}

func (x *VerifiedNameCertificate_Details) GetVerifiedName() string {
	if x != nil && x.VerifiedName != nil {
		return *x.VerifiedName
	}
	return ""
}

func (x *VerifiedNameCertificate_Details) GetLocalizedNames() []*LocalizedName {
	if x != nil {
		return x.LocalizedNames
	}
	return nil
}

func (x *VerifiedNameCertificate_Details) GetIssueTime() uint64 {
	if x != nil && x.IssueTime != nil {
		return *x.IssueTime
	}
	return 0
}

var File_WAProto_proto protoreflect.FileDescriptor

var file_WAProto_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x57, 0x41, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x41, 0x44, 0x56, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x44, 0x56, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x44, 0x56, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x41, 0x44, 0x56, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x44, 0x56, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x41, 0x44, 0x56, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x1b, 0x41, 0x44, 0x56, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x4d, 0x41, 0x43,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6d,
	0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x12, 0x3a,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x44, 0x56, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x41,
	0x44, 0x56, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x40, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xb8,
	0x01, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x12, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0xfa, 0x02, 0x0a, 0x12, 0x42, 0x69, 0x7a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61,
	0x70, 0x70, 0x42, 0x69, 0x7a, 0x41, 0x63, 0x63, 0x74, 0x46, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x42, 0x69, 0x7a,
	0x41, 0x63, 0x63, 0x74, 0x46, 0x62, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x68, 0x61, 0x74,
	0x73, 0x61, 0x70, 0x70, 0x41, 0x63, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x41, 0x63,
	0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x7a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x69, 0x7a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1d, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x00, 0x22, 0x2f, 0x0a, 0x0f, 0x48,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x22, 0x7b, 0x0a, 0x11,
	0x42, 0x69, 0x7a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x62, 0x69, 0x7a, 0x41, 0x63, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x62, 0x69, 0x7a, 0x41, 0x63, 0x63,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb9, 0x04, 0x0a, 0x0f, 0x42, 0x69,
	0x7a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a,
	0x06, 0x76, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3c, 0x0a, 0x09, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x12, 0x48, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69,
	0x7a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x68,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x22, 0x25, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x45, 0x4c, 0x46, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x50, 0x10, 0x01, 0x22, 0x2f,
	0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x22,
	0x34, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x02, 0x22, 0xab, 0x01, 0x0a, 0x11, 0x42, 0x6f, 0x74, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x0b, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x17, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x4a, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x4a,
	0x69, 0x64, 0x22, 0xf0, 0x03, 0x0a, 0x11, 0x42, 0x6f, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x43,
	0x64, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x43, 0x64, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x64, 0x6e, 0x55,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x64, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x45, 0x4c, 0x53, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x02, 0x22, 0x26, 0x0a,
	0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x1a, 0x42, 0x6f, 0x74, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xa2, 0x08, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x6e, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x6e, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4a, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x6c, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xaf, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x45, 0x4c, 0x53, 0x45, 0x57, 0x48, 0x45, 0x52, 0x45, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x50, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10,
	0x0a, 0x22, 0x3b, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02, 0x22, 0x46,
	0x0a, 0x0d, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x43, 0x59, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x57, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x22, 0xea, 0x02, 0x0a, 0x09, 0x43, 0x65, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x45, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x1a, 0xde, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0x91, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x6f,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x22, 0xd9, 0x08, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x77, 0x4f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x77, 0x4f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0xf8, 0x07, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x6b, 0x0a, 0x13, 0x63, 0x74, 0x77,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x74,
	0x77, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x13, 0x63, 0x74, 0x77, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x0b, 0x63, 0x74, 0x77, 0x61, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x74, 0x77, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0b, 0x63, 0x74, 0x77, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xc9, 0x04,
	0x0a, 0x0f, 0x43, 0x74, 0x77, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x7b, 0x0a, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x74, 0x77, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f,
	0x75, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x49,
	0x0a, 0x27, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x1a, 0x83, 0x01, 0x0a, 0x13, 0x43, 0x74,
	0x77, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x63, 0x65,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x63, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22,
	0xa7, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x57, 0x65, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77, 0x65, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x62, 0x43, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x66, 0x62, 0x43, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x62, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x66, 0x62, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x6c,
	0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x63, 0x12, 0x4e, 0x0a, 0x0f, 0x69,
	0x6f, 0x73, 0x41, 0x70, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x4f, 0x53, 0x41, 0x70,
	0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6f, 0x73, 0x41,
	0x70, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x62, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x62,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x62, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x79, 0x65, 0x61, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x79, 0x65, 0x61, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xd5, 0x01, 0x0a, 0x09,
	0x44, 0x4e, 0x53, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x64, 0x6e, 0x73,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x4e, 0x53,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x09, 0x64, 0x6e, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x70, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x58, 0x0a, 0x13, 0x44, 0x4e, 0x53,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x52, 0x44,
	0x43, 0x4f, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56, 0x45, 0x52, 0x52,
	0x49, 0x44, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43,
	0x4b, 0x10, 0x04, 0x1a, 0xfd, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x52, 0x65, 0x67, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x52, 0x65, 0x67, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x4b, 0x65, 0x79, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x65, 0x4b, 0x65, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x53, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x65, 0x53, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x53, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65,
	0x53, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x53, 0x6b, 0x65, 0x79,
	0x53, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x53, 0x6b, 0x65, 0x79,
	0x53, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x1a, 0x41, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xe8, 0x0b, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x73, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x55, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x73, 0x6f, 0x36, 0x33,
	0x39, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x73, 0x6f, 0x36, 0x33, 0x39, 0x31, 0x12,
	0x40, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x73, 0x6f, 0x33, 0x31, 0x36, 0x36, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x33, 0x31, 0x36, 0x36, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x70,
	0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x78, 0x70, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0x9a, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x74, 0x69,
	0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x72, 0x74, 0x69,
	0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0x46, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x57, 0x45, 0x41, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x06, 0x0a,
	0x02, 0x56, 0x52, 0x10, 0x04, 0x22, 0x8a, 0x04, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x53, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x42, 0x45, 0x52, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x42, 0x45, 0x52, 0x52, 0x59, 0x58, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x34, 0x30, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x36, 0x30, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x07, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x5a, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x09, 0x0a,
	0x05, 0x4b, 0x41, 0x49, 0x4f, 0x53, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4d, 0x42, 0x5f,
	0x49, 0x4f, 0x53, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53,
	0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x4f, 0x52, 0x54, 0x41, 0x4c, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52,
	0x45, 0x45, 0x4e, 0x5f, 0x49, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x12, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x13, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x42, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49,
	0x44, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44,
	0x52, 0x4f, 0x49, 0x44, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x47, 0x4c, 0x49, 0x54, 0x45,
	0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41,
	0x47, 0x45, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x43, 0x4f, 0x53, 0x10, 0x18, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x43, 0x55, 0x4c, 0x55, 0x53, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x19, 0x12,
	0x0f, 0x0a, 0x0b, 0x4f, 0x43, 0x55, 0x4c, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x1a,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4c, 0x41, 0x4e, 0x10, 0x1b, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x41, 0x50, 0x49, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x41, 0x52, 0x4f, 0x53, 0x10,
	0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x1e, 0x12,
	0x0c, 0x0a, 0x08, 0x56, 0x52, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x1f, 0x12, 0x0c, 0x0a,
	0x08, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x50, 0x41, 0x44, 0x10, 0x21, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x22, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x47, 0x4c, 0x41, 0x53, 0x53, 0x45, 0x53,
	0x10, 0x23, 0x22, 0x3d, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x45, 0x54, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10,
	0x03, 0x1a, 0xcc, 0x06, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x66, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x66, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x57,
	0x65, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x53, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x53, 0x75, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x57, 0x65,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x75, 0x62, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x53, 0x75, 0x62, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x91, 0x04, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x64, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x32, 0x45, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x45, 0x32, 0x45, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x32, 0x45, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x45, 0x32, 0x45, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x45, 0x32, 0x45, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x32, 0x45, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x45, 0x32, 0x45, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x32, 0x45, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x53,
	0x75, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x45,
	0x42, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x50, 0x50, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49,
	0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x52,
	0x57, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x49, 0x4e, 0x33, 0x32, 0x10, 0x04,
	0x22, 0x86, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x55, 0x53, 0x48, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x22, 0xb0, 0x02, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x4c,
	0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x45, 0x44,
	0x47, 0x45, 0x10, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52,
	0x5f, 0x49, 0x44, 0x45, 0x4e, 0x10, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x45, 0x4c, 0x4c, 0x55,
	0x4c, 0x41, 0x52, 0x5f, 0x55, 0x4d, 0x54, 0x53, 0x10, 0x66, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x45,
	0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x45, 0x56, 0x44, 0x4f, 0x10, 0x67, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x47, 0x50, 0x52, 0x53, 0x10, 0x68,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x48, 0x53, 0x44,
	0x50, 0x41, 0x10, 0x69, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52,
	0x5f, 0x48, 0x53, 0x55, 0x50, 0x41, 0x10, 0x6a, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x45, 0x4c, 0x4c,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x48, 0x53, 0x50, 0x41, 0x10, 0x6b, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x43, 0x44, 0x4d, 0x41, 0x10, 0x6c, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x31, 0x58, 0x52, 0x54, 0x54,
	0x10, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x45,
	0x48, 0x52, 0x50, 0x44, 0x10, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c,
	0x41, 0x52, 0x5f, 0x4c, 0x54, 0x45, 0x10, 0x6f, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x4c, 0x4c,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x48, 0x53, 0x50, 0x41, 0x50, 0x10, 0x70, 0x22, 0x54, 0x0a, 0x0f,
	0x49, 0x4f, 0x53, 0x41, 0x70, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x22, 0x45, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0c, 0x0a,
	0x08, 0x57, 0x48, 0x41, 0x54, 0x53, 0x41, 0x50, 0x50, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x45, 0x53, 0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4f, 0x50, 0x5f, 0x4d, 0x53, 0x47, 0x52, 0x10, 0x03, 0x22, 0x70, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe6, 0x18, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x6e, 0x7a, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x6e, 0x7a, 0x61, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4a, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4a, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x64, 0x41, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x41, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x64, 0x41, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x19, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34,
	0x0a, 0x15, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x12, 0x4a, 0x0a, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x10,
	0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x10, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x74, 0x6d, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x55, 0x54, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x75, 0x74, 0x6d, 0x12,
	0x79, 0x0a, 0x1e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6d, 0x0a, 0x1a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6d, 0x62,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x6d, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x73,
	0x6d, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x49, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x6d, 0x62, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x55, 0x0a,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x1a, 0xea, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6a, 0x70, 0x65,
	0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10,
	0x02, 0x1a, 0x48, 0x0a, 0x1a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2a, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x4a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x1a, 0x40, 0x0a, 0x12, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x6c,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f,
	0x77, 0x4d, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x1a, 0xb4, 0x04,
	0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x4e, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x68, 0x6f, 0x77, 0x41, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x74, 0x77,
	0x61, 0x43, 0x6c, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x74, 0x77,
	0x61, 0x43, 0x6c, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x2b, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x02, 0x1a, 0xe2, 0x02, 0x0a, 0x1e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x5f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0x39,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x1a, 0x49, 0x0a, 0x07, 0x55, 0x54, 0x4d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x22, 0xd4, 0x0f, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x4a,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x4a, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6c, 0x64, 0x4a, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x6c, 0x64, 0x4a, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x65, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x68, 0x0a, 0x18, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e,
	0x64, 0x4f, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x18, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x41, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x41, 0x73, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x63, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x74, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65,
	0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x75,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6d, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x63, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x74, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x6e, 0x4a, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x6e, 0x4a, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4f,
	0x77, 0x6e, 0x50, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x4f, 0x77, 0x6e, 0x50, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6e, 0x68, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x6e, 0x68, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x69, 0x64, 0x4a, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69,
	0x64, 0x4a, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a,
	0x18, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d,
	0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x3a, 0x0a, 0x36, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4d,
	0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x02, 0x22, 0x5c, 0x0a, 0x1c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xba, 0x03, 0x0a, 0x12, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x44, 0x56, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x44,
	0x56, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0xcd, 0x09, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x52,
	0x0a, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x9a, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72,
	0x74, 0x69, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x72,
	0x74, 0x69, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x1a,
	0xd3, 0x03, 0x0a, 0x11, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x44, 0x61, 0x79, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x79, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x69, 0x7a, 0x65, 0x4d, 0x62, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x4d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4d, 0x62, 0x12, 0x44, 0x0a,
	0x1d, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x45, 0x32, 0x45, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x45, 0x32, 0x45, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x44, 0x61, 0x79, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x79, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x4c, 0x6f, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x1e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x67, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x6c,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x67, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64,
	0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x46, 0x49, 0x52, 0x45, 0x46, 0x4f, 0x58, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02,
	0x49, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x41, 0x46, 0x41, 0x52, 0x49, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x45,
	0x44, 0x47, 0x45, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50,
	0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x41, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x09,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x48, 0x41, 0x4e, 0x41, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x4c, 0x4f, 0x48, 0x41, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x49,
	0x4e, 0x41, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x43, 0x4c, 0x5f, 0x54, 0x56, 0x10, 0x0d,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4f, 0x53, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x0e, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x4f, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x59, 0x53, 0x54, 0x10,
	0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f,
	0x41, 0x4d, 0x42, 0x49, 0x47, 0x55, 0x4f, 0x55, 0x53, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x45, 0x41, 0x52, 0x5f, 0x4f, 0x53, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x5f, 0x57,
	0x52, 0x49, 0x53, 0x54, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x52, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x57, 0x50, 0x10, 0x15, 0x12, 0x06,
	0x0a, 0x02, 0x56, 0x52, 0x10, 0x16, 0x22, 0xbc, 0x03, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4a, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x22, 0x69, 0x0a,
	0x09, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x42, 0x49, 0x5a, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x46, 0x42, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x6b, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x55, 0x4c, 0x4b, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x5a, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x46, 0x42, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0x4c, 0x0a, 0x10, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xef, 0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x32, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x22, 0xc6, 0x09, 0x0a, 0x0e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x64, 0x61, 0x72, 0x6b, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x64, 0x61, 0x72, 0x6b,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x12, 0x47,
	0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x69,
	0x46, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x57, 0x69, 0x46, 0x69, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x4d, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x68, 0x6f, 0x77, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x73, 0x68, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a,
	0x18, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x69, 0x73,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x64, 0x69,
	0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x6e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x1e,
	0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x1e, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x59, 0x0a, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4e, 0x0a, 0x0c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8e, 0x01, 0x0a,
	0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x2e, 0x0a,
	0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x55, 0x50, 0x45, 0x52, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x22, 0xea, 0x03,
	0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x1a, 0x40, 0x0a, 0x0c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x5d, 0x0a, 0x0b,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x5d, 0x0a, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x95, 0x08, 0x0a, 0x0b, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x79,
	0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56,
	0x33, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x33,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x10,
	0x70, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52,
	0x10, 0x70, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x4f, 0x0a, 0x0f, 0x61, 0x69, 0x57, 0x61, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x42, 0x6f, 0x74,
	0x41, 0x49, 0x57, 0x61, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0f, 0x61, 0x69, 0x57, 0x61, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x5a, 0x0a, 0x18, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54,
	0x6f, 0x4c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4c, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x18, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54,
	0x6f, 0x4c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x37, 0x0a, 0x12,
	0x42, 0x6f, 0x74, 0x41, 0x49, 0x57, 0x61, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x49, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x56, 0x33, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x4e, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44,
	0x10, 0x06, 0x22, 0x61, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e,
	0x63, 0x4d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65,
	0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2, 0x06, 0x0a, 0x16, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x64, 0x0a, 0x10, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e,
	0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x09,
	0x75, 0x72, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x48,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x1a, 0x58, 0x0a, 0x12, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x4c, 0x0a, 0x18, 0x48,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0xac, 0x02, 0x0a, 0x11, 0x48, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x55, 0x72,
	0x6c, 0x12, 0x79, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x48, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e,
	0x57, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x17,
	0x57, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x03, 0x42, 0x10, 0x0a, 0x0e, 0x68, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x18, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x95, 0x02, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x53, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x6b,
	0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x0a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x02, 0x0a,
	0x0a, 0x4b, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x6b,
	0x65, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x6b, 0x65, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4a, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4a, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d,
	0x73, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x62, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x17, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x0d, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x74,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x73, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xb3, 0x07, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x62, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x62, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x15, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x15, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4a, 0x70, 0x65, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4a, 0x70, 0x65, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4a, 0x70,
	0x65, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xe3, 0x01, 0x0a, 0x15, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65,
	0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x1a,
	0x54, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4a, 0x70,
	0x65, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x61,
	0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xe9, 0x01, 0x0a, 0x16, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x51, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xf9, 0xaa, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x48, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x48, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x48,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x60, 0x0a, 0x17, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x17, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x2a, 0x66, 0x61, 0x73, 0x74, 0x52, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x2a, 0x66, 0x61, 0x73, 0x74, 0x52, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6f, 0x0a, 0x1c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6c, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x45, 0x0a, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x1a, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x65, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45,
	0x0a, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x16, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x48, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x6d, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x4d, 0x52, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x15, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x6d, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x13, 0x70, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x49,
	0x6e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x1a, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x19, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x11, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x56, 0x32, 0x12, 0x51, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x6e, 0x63, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x61, 0x0a, 0x1a, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x56, 0x32, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1a, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x15, 0x70, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x15, 0x70, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x12, 0x6f, 0x0a, 0x1c,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x1c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a,
	0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x69, 0x6e, 0x49, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x69, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x70, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x33, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x15, 0x70, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x33, 0x12, 0x63, 0x0a,
	0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x64, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x74, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x70, 0x74, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4d, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x62, 0x6f,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47,
	0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x4e, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x65,
	0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x62, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x55, 0x0a, 0x14, 0x6c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x14, 0x6c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x6f, 0x0a, 0x1c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x1c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x7b, 0x0a, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x20, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x51,
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x5a, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x45, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x6c, 0x0a,
	0x22, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x87, 0x01, 0x0a, 0x0f,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x9a, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x1a, 0x80, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x1a, 0x29, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x1a, 0x52, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52, 0x06, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x73, 0x1a, 0x4a, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x1a, 0xfa, 0x03, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x74, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45,
	0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a,
	0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x77, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x62, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x72, 0x67,
	0x62, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x1a, 0xd9, 0x01,
	0x0a, 0x0c, 0x42, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x1a, 0x8d, 0x09, 0x0a, 0x12, 0x42, 0x6f,
	0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x42, 0x6f, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6b, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6b, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6b, 0x69, 0x6e, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x0f, 0x42, 0x6f, 0x74, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f,
	0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45,
	0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x4f, 0x54, 0x5f,
	0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x46, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x42,
	0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x47, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41,
	0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x55,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45,
	0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x53, 0x41, 0x46, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45,
	0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x4f, 0x54, 0x5f, 0x46,
	0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x4f,
	0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x41, 0x50, 0x50, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a,
	0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x56, 0x41,
	0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x09, 0x22, 0xcb, 0x03, 0x0a,
	0x1f, 0x42, 0x6f, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x2a, 0x0a, 0x26, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26,
	0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48,
	0x45, 0x4c, 0x50, 0x46, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x4f, 0x54, 0x5f,
	0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c,
	0x45, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x4f, 0x54, 0x5f,
	0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c,
	0x45, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45,
	0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4e,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x10, 0x10, 0x12, 0x28,
	0x0a, 0x24, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x20, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x4f, 0x54, 0x5f,
	0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c,
	0x45, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x40, 0x12, 0x3a, 0x0a, 0x35, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4e, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x49, 0x53, 0x55, 0x41,
	0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x80, 0x01,
	0x12, 0x38, 0x0a, 0x33, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x56, 0x41, 0x4e, 0x54, 0x5f,
	0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x80, 0x02, 0x22, 0x4d, 0x0a, 0x1f, 0x42, 0x6f,
	0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a,
	0x26, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x01, 0x1a, 0xf0, 0x08, 0x0a, 0x0e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0xbb, 0x03, 0x0a, 0x06, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x2e, 0x0a, 0x0a, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x44, 0x0a, 0x0e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x02,
	0x22, 0x60, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x06, 0x42, 0x08, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0xa1, 0x02, 0x0a,
	0x16, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0x25, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x1a, 0xac, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6c,
	0x6c, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c,
	0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a,
	0xfd, 0x04, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x4b, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x42, 0x0a,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x1a, 0x70, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4c, 0x53, 0x45, 0x57, 0x48, 0x45, 0x52,
	0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f,
	0x44, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x43, 0x45,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x10, 0x07, 0x22, 0x3b, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02, 0x1a,
	0x42, 0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x1a, 0x38, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x79, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x28, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x7e, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x63, 0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xa9, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x43, 0x0a, 0x1c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x7b, 0x0a, 0x11, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x68, 0x1a, 0xd7, 0x05, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x56, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x56, 0x63, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x45,
	0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x70, 0x65, 0x67,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x88, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x76, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x76, 0x1a, 0x9a, 0x01, 0x0a, 0x15,
	0x45, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x76, 0x1a, 0x89, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x63,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3d, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x49, 0x76, 0x1a, 0x85, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x64, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x1a, 0x90, 0x02, 0x0a,
	0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0xc7, 0x01, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x22, 0x3a, 0x0a,
	0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x8a, 0x01, 0x0a, 0x12, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x1a, 0xe5, 0x0b, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x41, 0x72, 0x67, 0x62, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x41, 0x72, 0x67, 0x62, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x62, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x72, 0x67, 0x62, 0x12, 0x3f, 0x0a, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x66, 0x6f, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x6f,
	0x4e, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x68, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x46, 0x0a, 0x1e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56,
	0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x12, 0x4a, 0x0a, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x56, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x56, 0x32, 0x12, 0x6c, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x56, 0x32, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x32, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x22, 0xa4, 0x01,
	0x0a, 0x08, 0x46, 0x6f, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x42, 0x5f, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x42, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x42, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52,
	0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x41, 0x5f,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x4f,
	0x32, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x42, 0x4f, 0x4c, 0x44, 0x10, 0x09, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4f, 0x55, 0x52, 0x49, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x4f,
	0x4c, 0x44, 0x10, 0x0a, 0x22, 0x48, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x42, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x10, 0x03, 0x22, 0x3e,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x05, 0x1a, 0x9d,
	0x01, 0x0a, 0x20, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3e,
	0x0a, 0x12, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x81,
	0x03, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6a,
	0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x49, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x1a, 0xbe, 0x0d, 0x0a, 0x17, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x4c, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x4c, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x4c, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x4c, 0x63, 0x12, 0x6c, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x53, 0x4d, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x67, 0x12, 0x28,
	0x0a, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x63, 0x12, 0x40, 0x0a, 0x0b, 0x68, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x73, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x68,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x48, 0x73, 0x6d, 0x1a, 0x86, 0x0a, 0x0a, 0x17, 0x48,
	0x53, 0x4d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x68, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x53, 0x4d, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x2e, 0x48, 0x53, 0x4d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x68, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x53, 0x4d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x53, 0x4d,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0x51, 0x0a, 0x0b, 0x48, 0x53, 0x4d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x31, 0x30, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x30, 0x30, 0x30, 0x1a, 0x9b, 0x07, 0x0a, 0x0b, 0x48, 0x53, 0x4d, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x48, 0x53, 0x4d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x53, 0x4d, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x48, 0x53, 0x4d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x78,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x48, 0x53, 0x4d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x53, 0x4d, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x48, 0x53, 0x4d, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x09,
	0x75, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x1a, 0xc2, 0x04, 0x0a, 0x14, 0x48, 0x53,
	0x4d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48,
	0x53, 0x4d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x53, 0x4d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x2e, 0x48, 0x53, 0x4d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61,
	0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x79,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x48, 0x53, 0x4d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x53, 0x4d, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x48, 0x53, 0x4d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x22, 0x2e, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x52, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x41, 0x4e, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x5f, 0x48, 0x49, 0x4a, 0x52, 0x49, 0x10,
	0x02, 0x22, 0x6b, 0x0a, 0x0d, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57,
	0x45, 0x44, 0x4e, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x48,
	0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x49, 0x44,
	0x41, 0x59, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41, 0x54, 0x55, 0x52, 0x44, 0x41, 0x59,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x07, 0x1a, 0x34,
	0x0a, 0x14, 0x48, 0x53, 0x4d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x6e,
	0x65, 0x6f, 0x66, 0x1a, 0xd4, 0x05, 0x0a, 0x17, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x79, 0x6e, 0x63, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x52, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x42, 0x0a, 0x1c, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67,
	0x49, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x21, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x21,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8a, 0x01,
	0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x4f,
	0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x33, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x06, 0x1a, 0xc4, 0x08, 0x0a, 0x0c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x12, 0x54, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53,
	0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x73,
	0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73,
	0x63, 0x61, 0x6e, 0x73, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x6d, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x6d, 0x69, 0x64,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x17, 0x6d, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76,
	0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x12, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x55, 0x72, 0x6c,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x55, 0x72,
	0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x6a, 0x0a, 0x26, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x40, 0x0a, 0x1b, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xf0, 0x0e,
	0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x15, 0x73, 0x68,
	0x6f, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x68, 0x6f,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x70,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x63, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x63,
	0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x6f, 0x75,
	0x73, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x0a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x72, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x63, 0x0a, 0x11, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x69, 0x7a, 0x4a, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x1c, 0x0a, 0x06, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xb9, 0x03,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x61,
	0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6a, 0x70, 0x65,
	0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x9d, 0x02, 0x0a, 0x11, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x5e, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x52, 0x0a, 0x10, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x1a, 0xce, 0x01, 0x0a, 0x0b, 0x53, 0x68,
	0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x73, 0x75, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x68,
	0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x07, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x42, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x47,
	0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x57, 0x41, 0x10, 0x03, 0x42, 0x14, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0xba, 0x04, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x42, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x92, 0x01, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x27, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x31, 0x10, 0x01, 0x1a, 0x69, 0x0a, 0x19, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x1c, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xb4, 0x04,
	0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x54, 0x0a, 0x0e, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69,
	0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79,
	0x12, 0x40, 0x0a, 0x1b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x12, 0x32, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x4a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x4a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22, 0x24,
	0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x44, 0x46, 0x10, 0x01, 0x1a, 0x87, 0x01, 0x0a, 0x11, 0x4b, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x1a, 0xd3,
	0x08, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c,
	0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x27, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x5c, 0x0a, 0x16,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6a, 0x70, 0x65,
	0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x1a, 0xe7, 0x01, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x4a, 0x69, 0x64, 0x1a, 0x66, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x1a, 0x53, 0x0a, 0x03,
	0x52, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x77, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x77, 0x49,
	0x64, 0x1a, 0x53, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x6f, 0x77,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x3c, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x02, 0x1a, 0x97, 0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x11, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x11, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77,
	0x49, 0x64, 0x22, 0x2a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x01, 0x1a, 0xc3,
	0x03, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
	0x73, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x49, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x49, 0x6e, 0x4d, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x49, 0x6e, 0x4d, 0x70, 0x73, 0x12, 0x4c, 0x0a, 0x21, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x21, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x77, 0x69, 0x73, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x70, 0x65, 0x67,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xcf, 0x03, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x73, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x4d, 0x70, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x4d,
	0x70, 0x73, 0x12, 0x4c, 0x0a, 0x21, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x72, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x70,
	0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xbc, 0x02, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45,
	0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a,
	0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0xd8, 0x01, 0x0a, 0x1c, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6a, 0x70, 0x65,
	0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xab, 0x05, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x4a, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x4a, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x30, 0x30, 0x30, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x31, 0x30, 0x30, 0x30, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x0b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x51, 0x55,
	0x49, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x03, 0x22, 0x1b, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x1a, 0xcd,
	0x01, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x38, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x42, 0x50, 0x41, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x56, 0x49, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x50, 0x49, 0x10, 0x03, 0x1a, 0xf4,
	0x08, 0x0a, 0x1f, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x6f, 0x0a, 0x1c, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1c, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x7d, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x6e, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x89, 0x01, 0x0a, 0x1a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79,
	0x6e, 0x63, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x1a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x98,
	0x01, 0x0a, 0x1f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xe2, 0x01, 0x0a, 0x1a, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x4a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4a,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f,
	0x6c, 0x64, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74,
	0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x1a, 0x54,
	0x0a, 0x1f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x1a, 0x38, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x1a, 0x55,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x48, 0x71, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x71, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x1a, 0xc9, 0x0c, 0x0a, 0x27, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x6f, 0x0a, 0x1c, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x1c, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x49, 0x64, 0x12, 0x88,
	0x01, 0x0a, 0x17, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x17, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x85, 0x0a, 0x0a, 0x17, 0x50, 0x65,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a,
	0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x20,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x9f, 0x05, 0x0a, 0x13, 0x4c, 0x69,
	0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa5, 0x01,
	0x0a, 0x0b, 0x68, 0x71, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x67, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x68, 0x71, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x1a, 0x93, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x69, 0x67, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x6e, 0x63, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x54, 0x0a, 0x20, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x77, 0x65,
	0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x1a, 0xdd, 0x01, 0x0a, 0x10, 0x50, 0x69, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x49, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4d, 0x73, 0x22, 0x3c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x4e, 0x50, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x02, 0x1a, 0x87, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x2a, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45,
	0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x00, 0x1a, 0x9e, 0x02, 0x0a, 0x13,
	0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x28, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x44, 0x0a, 0x0c,
	0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x63, 0x49, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6e, 0x63,
	0x49, 0x76, 0x1a, 0x83, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x16, 0x70, 0x6f, 0x6c, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x16, 0x70, 0x6f, 0x6c,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x76, 0x6f, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x1a, 0x1b, 0x0a, 0x19, 0x50, 0x6f, 0x6c, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xec, 0x06, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4a,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x8a, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xac, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x31, 0x30, 0x30, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x30, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2c, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x61,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x30, 0x30,
	0x30, 0x1a, 0xe2, 0x0f, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x60, 0x0a, 0x17, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79,
	0x6e, 0x63, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x14, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x5d,
	0x0a, 0x16, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8d, 0x01,
	0x0a, 0x26, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x26, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x81, 0x01,
	0x0a, 0x22, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x61,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x65,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x78,
	0x0a, 0x1f, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1f, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x27, 0x70, 0x65, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x27, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x62,
	0x6f, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x62, 0x6f, 0x74, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x72,
	0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x6c, 0x63,
	0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x49, 0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf6, 0x03,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x50, 0x48,
	0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x53, 0x47, 0x5f, 0x46, 0x41, 0x4e, 0x4f, 0x55,
	0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x0e, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x10, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x57, 0x45, 0x4c, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41,
	0x43, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x14, 0x1a, 0x9a, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4d, 0x73, 0x1a, 0xc7, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x0b, 0x6e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x73, 0x6f, 0x34, 0x32, 0x31, 0x37, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x73, 0x6f, 0x34, 0x32, 0x31,
	0x37, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x30, 0x30, 0x30, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x30, 0x30,
	0x30, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x51, 0x0a,
	0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0xb0, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x6c, 0x63,
	0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x63, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x10, 0x01, 0x1a, 0xe9, 0x01, 0x0a, 0x1c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x2d, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x1a,
	0xb2, 0x01, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x4c, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x64, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x23, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x10, 0x01, 0x1a, 0xc1, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x6e,
	0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x8a, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x23, 0x61, 0x78, 0x6f, 0x6c, 0x6f, 0x74, 0x6c, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x23, 0x61, 0x78, 0x6f, 0x6c, 0x6f, 0x74, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x90, 0x05, 0x0a, 0x0e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6e, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x6e, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x41, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x41, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x4c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x4c, 0x6f, 0x74, 0x74, 0x69, 0x65, 0x1a, 0x7d, 0x0a, 0x15, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x4d, 0x52, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x6d, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x6d, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x88, 0x02, 0x0a, 0x1a, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x1a, 0xc8, 0x0d, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x62, 0x0a, 0x10,
	0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x6f, 0x75, 0x72, 0x52, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x10,
	0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x5a, 0x0a, 0x0f, 0x66, 0x6f, 0x75, 0x72, 0x52, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6f, 0x75, 0x72, 0x52, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6f, 0x75,
	0x72, 0x52, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a, 0x17,
	0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x72, 0x52, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x72, 0x52, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x6f, 0x75, 0x72, 0x52, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x63, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0xcf, 0x04, 0x0a, 0x0f, 0x46, 0x6f, 0x75, 0x72, 0x52, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x66,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x79,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x41, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0xe9, 0x04, 0x0a, 0x17, 0x48, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x72, 0x52, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0f, 0x68,
	0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x6d, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x68, 0x79, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a,
	0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0xf4, 0x07,
	0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x69, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x12, 0x54, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x70, 0x65, 0x67, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6a,
	0x70, 0x65, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x4f,
	0x0a, 0x0e, 0x67, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x67, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x12, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x45, 0x6e,
	0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x55, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2d, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x49, 0x50, 0x48, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x4e,
	0x4f, 0x52, 0x10, 0x02, 0x22, 0xac, 0x01, 0x0a, 0x1c, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52,
	0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x44, 0x10, 0x04, 0x22, 0x59, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e,
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x22, 0xbf,
	0x03, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3c, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x62,
	0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x74, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x4d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x76, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x59,
	0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc9, 0x09, 0x0a, 0x0d, 0x4d, 0x73,
	0x67, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x30, 0x30, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31,
	0x30, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x6f, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x70,
	0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e,
	0x0a, 0x1a, 0x70, 0x6f, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x70, 0x6f, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x6c, 0x66, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x70, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x50, 0x6f, 0x6c, 0x6c, 0x56,
	0x6f, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x65, 0x6e, 0x63, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x69,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x63,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x49, 0x76, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x63, 0x49, 0x76, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6e, 0x63, 0x49, 0x76, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6e,
	0x63, 0x49, 0x76, 0x1a, 0x20, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x77, 0x4f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x32, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x4f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64,
	0x4d, 0x73, 0x67, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x1a, 0x7f, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x75, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x56,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x50, 0x61,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x73, 0x22, 0x24, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x22, 0x72, 0x0a,
	0x10, 0x50, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x10, 0x70, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x10, 0x70, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x22, 0xdb, 0x04, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c,
	0x74, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4c, 0x74, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x4c, 0x74, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e,
	0x65, 0x77, 0x4c, 0x74, 0x68, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x27, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6f, 0x75,
	0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x48, 0x61, 0x73, 0x68, 0x4f,
	0x66, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x27, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x11, 0x6e, 0x65, 0x77, 0x4c, 0x74, 0x68, 0x61, 0x73, 0x68, 0x53, 0x75, 0x62, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x4c, 0x74,
	0x68, 0x61, 0x73, 0x68, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x55, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4d, 0x42, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4d, 0x42, 0x49, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x57,
	0x50, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x52, 0x57, 0x49, 0x4e, 0x10, 0x06, 0x22,
	0xca, 0x04, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x72,
	0x67, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x72, 0x67, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x78,
	0x74, 0x41, 0x72, 0x67, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x74, 0x65, 0x78,
	0x74, 0x41, 0x72, 0x67, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x65, 0x78, 0x74,
	0x41, 0x72, 0x67, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x74,
	0x65, 0x78, 0x74, 0x41, 0x72, 0x67, 0x62, 0x12, 0x40, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xbb, 0x01, 0x0a,
	0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x20, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x22, 0x9a, 0x0c, 0x0a,
	0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x30, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x30, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3a, 0x0a, 0x09, 0x74, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x74, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x4e, 0x6f, 0x76, 0x69, 0x46, 0x69, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x76, 0x69, 0x46,
	0x69, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x52, 0x10, 0x01, 0x22, 0xcc,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x45, 0x44, 0x5f,
	0x54, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x55,
	0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x41, 0x49,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x45, 0x52, 0x10, 0x0a,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x22, 0x99, 0x05,
	0x0a, 0x09, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x09, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x10, 0x0a,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x5f, 0x46, 0x49,
	0x4e, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x54, 0x58, 0x4e, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x46, 0x55, 0x4e,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45,
	0x46, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x46, 0x55,
	0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x10, 0x0f, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x54, 0x58, 0x4e, 0x10, 0x10, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x13, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x14, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10,
	0x17, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x56,
	0x45, 0x52, 0x53, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x1d, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x1f, 0x22, 0x47, 0x0a, 0x17, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4c, 0x49, 0x44, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6e, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6e, 0x4a, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69,
	0x64, 0x4a, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x64, 0x4a,
	0x69, 0x64, 0x22, 0x65, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x65, 0x77, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x77,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e,
	0x65, 0x77, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x22, 0xcf, 0x02, 0x0a, 0x09, 0x50, 0x69,
	0x6e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x69,
	0x6e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4d, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64,
	0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3c, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49, 0x4e, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x50, 0x49,
	0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x67, 0x0a, 0x05, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x78, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x78, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x79, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x79, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x79, 0x22, 0x42, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x6c,
	0x45, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e,
	0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x49,
	0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x49, 0x76, 0x22, 0xfb,
	0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a,
	0x14, 0x70, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x14,
	0x70, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x65, 0x0a, 0x15,
	0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x22, 0xd7, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a,
	0x12, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x22,
	0x36, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x75, 0x73, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x75, 0x73, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x05, 0x0a, 0x02, 0x51, 0x50, 0x1a, 0x86,
	0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x50, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x50, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x64, 0x0a, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x50, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x18, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xa2, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x50, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x50, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x50, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x10,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x52, 0x10, 0x03,
	0x22, 0x4a, 0x0a, 0x1e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c, 0x5f,
	0x42, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x22, 0x30, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x22, 0xab,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x41, 0x0a, 0x11,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x97, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x38, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x60,
	0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x64, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x0f,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x9e, 0x04, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x5b, 0x0a, 0x10, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x42, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x1a, 0x44, 0x0a, 0x10, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x1a, 0x44, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x49, 0x64, 0x22, 0xa1, 0x0c, 0x0a, 0x10, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72,
	0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x6c, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x1a,
	0x9b, 0x03, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x1a,
	0x32, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x1a, 0x68, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x1a, 0xce, 0x02,
	0x0a, 0x12, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73,
	0x65, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x36, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x6d,
	0x0a, 0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x93, 0x01,
	0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x6d, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x53, 0x41, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x2c, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd5, 0x02, 0x0a,
	0x0f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45,
	0x6e, 0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x6e, 0x74, 0x54, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xe2, 0x41, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x0a, 0x6d, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x75, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50,
	0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x0f, 0x70, 0x75, 0x73,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x75, 0x73, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x10, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6b, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x65, 0x0a, 0x16, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x56, 0x0a, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x18, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x4d,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x41,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x68,
	0x61, 0x74, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x6d, 0x61, 0x72, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x15, 0x75,
	0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x75, 0x6e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x4d, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x6e,
	0x0a, 0x19, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x19, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44,
	0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5f, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x75, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x53, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x75, 0x78, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x4e, 0x75, 0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6e, 0x75, 0x78, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x63, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x59, 0x0a, 0x12, 0x70, 0x6e, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x6e, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x6e, 0x46, 0x6f, 0x72, 0x4c, 0x69,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x16, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x1f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x57, 0x65, 0x62, 0x42, 0x65, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x65, 0x62, 0x42, 0x65, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x65, 0x62, 0x42,
	0x65, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x1b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x4a, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x61,
	0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x68, 0x0a,
	0x17, 0x62, 0x6f, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x42, 0x6f, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17,
	0x62, 0x6f, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x6f, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x62, 0x0a, 0x15, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x11, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5b, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x1a, 0x35, 0x0a, 0x19, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x55, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a, 0x82, 0x01, 0x0a, 0x11, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0x31, 0x0a, 0x17, 0x42, 0x6f, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x1a, 0x4b, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x3c, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x42, 0x0a,
	0x20, 0x43, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65,
	0x64, 0x1a, 0x64, 0x0a, 0x0f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x9d, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x64, 0x4a, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x64, 0x4a, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x73,
	0x61, 0x76, 0x65, 0x4f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73,
	0x61, 0x76, 0x65, 0x4f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x62, 0x6f, 0x6f, 0x6b, 0x1a, 0xb7, 0x01, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x45, 0x0a, 0x1b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x7c, 0x0a, 0x1a, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x1a, 0x65, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x59, 0x0a,
	0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x1a, 0x68, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x1a, 0x31, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x65,
	0x62, 0x42, 0x65, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x4f, 0x70, 0x74, 0x49, 0x6e, 0x1a, 0x39, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x1a, 0x32, 0x0a, 0x16, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x1a, 0x99, 0x01, 0x0a, 0x0f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x64,
	0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0x3f, 0x0a, 0x15, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64,
	0x73, 0x1a, 0x27, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x1a, 0x7d, 0x0a, 0x14, 0x4d, 0x61,
	0x72, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x51, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xd0, 0x02, 0x0a, 0x16, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x5f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x1d, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x45,
	0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x45, 0x0a, 0x1f,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x6c, 0x0a, 0x0a, 0x4d, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6d, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x75, 0x74, 0x65,
	0x64, 0x1a, 0x2f, 0x0a, 0x09, 0x4e, 0x75, 0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x64, 0x1a, 0x25, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x69, 0x1a, 0x23, 0x0a, 0x09, 0x50, 0x69, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x1a, 0x2a,
	0x0a, 0x12, 0x50, 0x6e, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6e, 0x4a, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6e, 0x4a, 0x69, 0x64, 0x1a, 0x26, 0x0a, 0x0e, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x1a, 0x30, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3b, 0x0a, 0x1b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x1a, 0x25, 0x0a, 0x0f, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x94, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x69,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a,
	0x4e, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a,
	0x49, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x54,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f,
	0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x26, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x1a, 0xcd, 0x01,
	0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4e, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x53, 0x10, 0x02, 0x1a, 0xb1, 0x02,
	0x0a, 0x0d, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x53, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e,
	0x63, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x48, 0x69, 0x6e,
	0x74, 0x1a, 0x8a, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x56,
	0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xd2, 0x01, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x10, 0x54,
	0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x1d, 0x69, 0x73, 0x54, 0x77, 0x65, 0x6e, 0x74, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x48,
	0x6f, 0x75, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x73, 0x54, 0x77, 0x65, 0x6e, 0x74, 0x79,
	0x46, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x3f, 0x0a, 0x15, 0x55, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x75, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x73, 0x1a, 0x2c, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d,
	0x75, 0x74, 0x65, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x64,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x25, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x22, 0x44,
	0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x32, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x03, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x64, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4d, 0x61, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x63,
	0x12, 0x22, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x83, 0x01,
	0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6d, 0x61, 0x63, 0x12, 0x22, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x28, 0x0a, 0x0c, 0x53, 0x79,
	0x6e, 0x63, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x05, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x54, 0x0a,
	0x10, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x75, 0x72, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x55, 0x52,
	0x4c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61,
	0x6c, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x1a, 0xa0, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x6c, 0x0a, 0x10, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x8f, 0x01, 0x0a, 0x09, 0x55, 0x52,
	0x4c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x38, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48,
	0x69, 0x67, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0xff, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4a, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4a, 0x69, 0x64, 0x22, 0xb7, 0x02, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0xb9, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x49, 0x0a, 0x11, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x8f, 0x19, 0x0a,
	0x0b, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x4f, 0x0a, 0x16, 0x76,
	0x6f, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x52, 0x16, 0x76, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x56, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x56,
	0x33, 0x12, 0x3f, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x56, 0x33, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x56, 0x33, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x56, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x56, 0x32, 0x12, 0x4f, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x33, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x16, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x33, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x12, 0x3d, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x16,
	0x76, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x16, 0x76, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a,
	0x11, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x11, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x10, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x47,
	0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x64, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x64, 0x69, 0x74,
	0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65,
	0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0b,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x59, 0x0a, 0x1b, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x63, 0x68, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x1b, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x63, 0x68, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x56,
	0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x07, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x32, 0x12, 0x43, 0x0a, 0x10, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x10, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x3d,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65,
	0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a,
	0x13, 0x76, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x13, 0x76, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x47, 0x0a, 0x12, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x12, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x57, 0x0a, 0x1a, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65,
	0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x1a,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x16, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x56, 0x34, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x56, 0x34, 0x4a, 0x6f, 0x69,
	0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x07,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x41, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x0d, 0x76, 0x6f, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x41, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x1c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x1c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x45, 0x0a, 0x11, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x11, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x65, 0x32, 0x45, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65,
	0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x13,
	0x65, 0x32, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x56, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x56, 0x32, 0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x56, 0x33, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x56, 0x33, 0x12, 0x37, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x69, 0x69, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x69, 0x69, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x59, 0x0a, 0x1b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x6f, 0x67, 0x66, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x1b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x6f, 0x67, 0x66, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56,
	0x32, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x09, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x32, 0x12, 0x57, 0x0a, 0x1a, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x1a, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x32, 0x34, 0x48, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x14, 0x65, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x32, 0x34, 0x48, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x64, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x0e, 0x6d, 0x64, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x64, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x64, 0x4f, 0x70,
	0x74, 0x49, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x18,
	0x6e, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x18, 0x6e, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x4b, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4f,
	0x52, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0x81,
	0x4b, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x32, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x32, 0x53, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x72, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x65, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53,
	0x74, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x75, 0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x75, 0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x11, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x17,
	0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x4f, 0x66, 0x66, 0x54, 0x6f, 0x4f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x54, 0x6f, 0x4f, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x75, 0x74,
	0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x52, 0x0a, 0x10, 0x62, 0x69, 0x7a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x10, 0x62, 0x69, 0x7a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x69, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x69, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34,
	0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x11, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x73, 0x61,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x53, 0x41, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x73, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x6c,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x70, 0x6f, 0x6c, 0x6c,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x16, 0x70, 0x6f, 0x6c, 0x6c, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x31, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x65, 0x70, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x49, 0x6e,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x6c, 0x66, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36,
	0x0a, 0x16, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x49, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x69, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x09, 0x70, 0x69, 0x6e,
	0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x31, 0x50, 0x42, 0x69, 0x7a, 0x42, 0x6f, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73,
	0x31, 0x50, 0x42, 0x69, 0x7a, 0x42, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x3d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x10, 0x42, 0x69, 0x7a, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x32, 0x45, 0x45,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x42, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53,
	0x50, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x53, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x46,
	0x42, 0x10, 0x03, 0x22, 0x58, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x05, 0x22, 0xd2, 0x35,
	0x0a, 0x08, 0x53, 0x74, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x4f, 0x4b,
	0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x50, 0x52, 0x4f,
	0x4f, 0x46, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x12,
	0x11, 0x0a, 0x0d, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x09,
	0x12, 0x18, 0x0a, 0x14, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x59,
	0x5f, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x0d, 0x12,
	0x23, 0x0a, 0x1f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x54, 0x4f, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x0e, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0f, 0x12, 0x26, 0x0a,
	0x22, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x4f, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x57,
	0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x11, 0x12, 0x23, 0x0a,
	0x1f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x12, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x14, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x1c,
	0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x10, 0x1a,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x1c, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x1d, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x44, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10,
	0x20, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x23, 0x12,
	0x14, 0x0a, 0x10, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x25, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x32, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x32, 0x45,
	0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x10, 0x27, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x45, 0x44, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x29, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e,
	0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x2a, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x2b, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45,
	0x10, 0x2c, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x45,
	0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x2d, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x2e, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x2f, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x10, 0x30, 0x12, 0x2c, 0x0a,
	0x28, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x31, 0x12, 0x2e, 0x0a, 0x2a, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x32, 0x12, 0x33, 0x0a, 0x2f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x33,
	0x12, 0x35, 0x0a, 0x31, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x34, 0x12, 0x3c, 0x0a, 0x38, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x43,
	0x43, 0x55, 0x50, 0x10, 0x35, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x36,
	0x12, 0x28, 0x0a, 0x24, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x37, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x38, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x39, 0x12, 0x22, 0x0a, 0x1e, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x3a, 0x12,
	0x24, 0x0a, 0x20, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x3b, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x49, 0x5a, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x3c,
	0x12, 0x29, 0x0a, 0x25, 0x42, 0x49, 0x5a, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x54, 0x54,
	0x4f, 0x4d, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x3d, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x49, 0x5a, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x3e, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x49, 0x5a, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x5f, 0x42, 0x4f, 0x54, 0x54,
	0x4f, 0x4d, 0x10, 0x3f, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x49, 0x5a, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x40, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x49, 0x5a,
	0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45,
	0x52, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x41, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x49, 0x5a, 0x5f, 0x54,
	0x57, 0x4f, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x42, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x49, 0x5a, 0x5f, 0x54,
	0x57, 0x4f, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x43, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x45,
	0x44, 0x10, 0x45, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x56, 0x34, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10,
	0x46, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x47, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x45, 0x50, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x48, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x32, 0x45, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x49, 0x12,
	0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x4a,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x32, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45,
	0x44, 0x5f, 0x4e, 0x4f, 0x57, 0x10, 0x4b, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x4c, 0x55, 0x45, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x53,
	0x50, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x4c, 0x12, 0x1e, 0x0a, 0x1a, 0x42,
	0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x54,
	0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x46, 0x42, 0x10, 0x4d, 0x12, 0x23, 0x0a, 0x1f, 0x42,
	0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x54,
	0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x4e,
	0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50,
	0x5f, 0x46, 0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x4f,
	0x12, 0x37, 0x0a, 0x33, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50,
	0x5f, 0x46, 0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x50, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4c, 0x55,
	0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x51, 0x12, 0x37, 0x0a, 0x33, 0x42, 0x4c, 0x55, 0x45, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d,
	0x49, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x52,
	0x12, 0x28, 0x0a, 0x24, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50,
	0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46,
	0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x53, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x4c,
	0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49,
	0x53, 0x45, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x54, 0x12,
	0x3c, 0x0a, 0x38, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f,
	0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49,
	0x53, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x55, 0x12, 0x21, 0x0a,
	0x1d, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x50, 0x52,
	0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x56,
	0x12, 0x3c, 0x0a, 0x38, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50,
	0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53,
	0x45, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x57, 0x12, 0x2a,
	0x0a, 0x26, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55,
	0x4d, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x55, 0x4e,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x58, 0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x4c,
	0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f,
	0x54, 0x4f, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x55,
	0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x59, 0x12, 0x2b, 0x0a, 0x27, 0x42,
	0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52,
	0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x46, 0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x5a, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x4c, 0x55, 0x45,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x4f,
	0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x5b, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x4c,
	0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x46, 0x42, 0x5f, 0x54,
	0x4f, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x5c, 0x12,
	0x24, 0x0a, 0x20, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x45, 0x4c, 0x46,
	0x5f, 0x46, 0x42, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d,
	0x49, 0x53, 0x45, 0x10, 0x5d, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x46, 0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x5e, 0x12, 0x38, 0x0a, 0x34, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x46, 0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52,
	0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x5f,
	0x12, 0x1d, 0x0a, 0x19, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x45, 0x4c,
	0x46, 0x5f, 0x46, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x60, 0x12,
	0x38, 0x0a, 0x34, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x45, 0x4c, 0x46,
	0x5f, 0x46, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x61, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x4c, 0x55,
	0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49,
	0x53, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53,
	0x45, 0x10, 0x62, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x63, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x4c, 0x55,
	0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49,
	0x53, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x64, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x53, 0x50,
	0x5f, 0x46, 0x42, 0x10, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x66, 0x12,
	0x17, 0x0a, 0x13, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x53,
	0x45, 0x4c, 0x46, 0x5f, 0x46, 0x42, 0x10, 0x67, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x4c, 0x55, 0x45,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x54, 0x4f, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x68, 0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x42,
	0x53, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x69, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x46, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x6a, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x55,
	0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x6b, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x4c, 0x55, 0x45, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x42, 0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x6c, 0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x53, 0x50, 0x5f,
	0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x6d, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c,
	0x46, 0x5f, 0x46, 0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x6f, 0x12, 0x36, 0x0a, 0x32, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x4d,
	0x49, 0x53, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x70, 0x12, 0x32,
	0x0a, 0x2e, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x46,
	0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x46, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x71, 0x12, 0x36, 0x0a, 0x32, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42,
	0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x72, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x4c,
	0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x46, 0x42, 0x5f, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x46,
	0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x73, 0x12, 0x37,
	0x0a, 0x33, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f,
	0x46, 0x42, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f,
	0x5f, 0x42, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x74, 0x12, 0x37, 0x0a, 0x33, 0x42, 0x4c, 0x55, 0x45, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x46, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x4d,
	0x49, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x75,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x32, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x76, 0x12, 0x12,
	0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x77, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x78, 0x12, 0x11, 0x0a, 0x0d, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x79, 0x12, 0x11,
	0x0a, 0x0d, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10,
	0x7a, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x50, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x45, 0x44, 0x10, 0x7b, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x7c, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x59, 0x4e, 0x43, 0x49, 0x4e, 0x47,
	0x10, 0x7d, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x49, 0x5a, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43,
	0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x42, 0x10, 0x7e,
	0x12, 0x1d, 0x0a, 0x19, 0x42, 0x49, 0x5a, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x42, 0x53, 0x50, 0x10, 0x7f, 0x12,
	0x1b, 0x0a, 0x16, 0x42, 0x49, 0x5a, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x42, 0x10, 0x80, 0x01, 0x12, 0x1c, 0x0a, 0x17,
	0x42, 0x49, 0x5a, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x53, 0x50, 0x10, 0x81, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x49,
	0x53, 0x41, 0x50, 0x50, 0x45, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x82, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x32, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x83, 0x01,
	0x12, 0x11, 0x0a, 0x0c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45,
	0x10, 0x84, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x85, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x86, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x43,
	0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x49,
	0x42, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x87, 0x01, 0x12, 0x1d,
	0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x88, 0x01, 0x12, 0x22, 0x0a,
	0x1d, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x89,
	0x01, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x49, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x8a, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x8b, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x10, 0x8c, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x45, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x8d, 0x01,
	0x12, 0x15, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x8e, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x50, 0x48, 0x45, 0x4d,
	0x45, 0x52, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x10, 0x8f, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x90,
	0x01, 0x12, 0x28, 0x0a, 0x23, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x91, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x92, 0x01, 0x12,
	0x22, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45,
	0x10, 0x93, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x10, 0x94, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x95, 0x01, 0x12, 0x34, 0x0a, 0x2f, 0x43,
	0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x41,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x96,
	0x01, 0x12, 0x34, 0x0a, 0x2f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x97, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x41, 0x53, 0x4b, 0x45,
	0x44, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x98, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x10, 0x99, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x9a, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x50, 0x53, 0x41, 0x10, 0x9b, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x41,
	0x47, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x9d, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x43, 0x4f,
	0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x44, 0x10, 0x9e, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x41, 0x47, 0x5f, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x9f,
	0x01, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47,
	0x4e, 0x10, 0xa0, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0xa1,
	0x01, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0xa2, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x10, 0xa3, 0x01,
	0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x49,
	0x43, 0x48, 0x10, 0xa4, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x55, 0x42, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x10, 0xa5,
	0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x55, 0x42, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52,
	0x49, 0x43, 0x48, 0x10, 0xa6, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x10, 0xa7, 0x01, 0x12, 0x23, 0x0a,
	0x1e, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x10,
	0xa8, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x10, 0xa9, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x43,
	0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0xaa, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0xab, 0x01, 0x12, 0x39, 0x0a, 0x34, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10, 0xac,
	0x01, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xad, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0xae, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0xaf, 0x01, 0x12, 0x28,
	0x0a, 0x23, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0xb0, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x49, 0x4e, 0x4e,
	0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x10, 0xb1, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x52, 0x10, 0xb2, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xb3, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0xb4, 0x01, 0x12, 0x1c, 0x0a, 0x17,
	0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xb5, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xb6, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xb7, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0xb8, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x53, 0x55, 0x42, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x49, 0x43,
	0x48, 0x10, 0xb9, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0xba, 0x01, 0x12, 0x24,
	0x0a, 0x1f, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xbb, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xbc, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41,
	0x44, 0x44, 0x10, 0xbd, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xbe, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x55,
	0x47, 0x47, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x10, 0xbf, 0x01, 0x12, 0x21, 0x0a, 0x1c,
	0x42, 0x49, 0x5a, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x31, 0x50, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xc0, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0xc1, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x45,
	0x58, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53,
	0x45, 0x4c, 0x46, 0x10, 0xc2, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f,
	0x45, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0xc3, 0x01, 0x12, 0x19, 0x0a,
	0x14, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x49, 0x5f, 0x45, 0x44, 0x55, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc4, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x49, 0x5a, 0x5f,
	0x42, 0x4f, 0x54, 0x5f, 0x33, 0x50, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xc5, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x52,
	0x45, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0xc6, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x45, 0x4d, 0x49,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0xc7, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0xc8, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2a, 0x29, 0x0a, 0x11, 0x41, 0x44,
	0x56, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x45, 0x32, 0x45, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x4f, 0x53,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x40, 0x0a, 0x08, 0x4b, 0x65, 0x65, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x44, 0x4f, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x2f, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x02,
})

var (
	file_WAProto_proto_rawDescOnce sync.Once
	file_WAProto_proto_rawDescData []byte
)

func file_WAProto_proto_rawDescGZIP() []byte {
	file_WAProto_proto_rawDescOnce.Do(func() {
		file_WAProto_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_WAProto_proto_rawDesc), len(file_WAProto_proto_rawDesc)))
	})
	return file_WAProto_proto_rawDescData
}

var file_WAProto_proto_enumTypes = make([]protoimpl.EnumInfo, 85)
var file_WAProto_proto_msgTypes = make([]protoimpl.MessageInfo, 312)
var file_WAProto_proto_goTypes = []any{
	(ADVEncryptionType)(0),                  // 0: proto.ADVEncryptionType
	(KeepType)(0),                           // 1: proto.KeepType
	(MediaVisibility)(0),                    // 2: proto.MediaVisibility
	(BizAccountLinkInfo_AccountType)(0),     // 3: proto.BizAccountLinkInfo.AccountType
	(BizAccountLinkInfo_HostStorageType)(0), // 4: proto.BizAccountLinkInfo.HostStorageType
	(BizIdentityInfo_ActualActorsType)(0),   // 5: proto.BizIdentityInfo.ActualActorsType
	(BizIdentityInfo_HostStorageType)(0),    // 6: proto.BizIdentityInfo.HostStorageType
	(BizIdentityInfo_VerifiedLevelValue)(0), // 7: proto.BizIdentityInfo.VerifiedLevelValue
	(BotPluginMetadata_PluginType)(0),       // 8: proto.BotPluginMetadata.PluginType
	(BotPluginMetadata_SearchProvider)(0),   // 9: proto.BotPluginMetadata.SearchProvider
	(CallLogRecord_CallResult)(0),           // 10: proto.CallLogRecord.CallResult
	(CallLogRecord_CallType)(0),             // 11: proto.CallLogRecord.CallType
	(CallLogRecord_SilenceReason)(0),        // 12: proto.CallLogRecord.SilenceReason
	(ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType)(0), // 13: proto.ChatRowOpaqueData.DraftMessage.CtwaContextData.ContextInfoExternalAdReplyInfoMediaType
	(ClientPayload_ConnectReason)(0),                                      // 14: proto.ClientPayload.ConnectReason
	(ClientPayload_ConnectType)(0),                                        // 15: proto.ClientPayload.ConnectType
	(ClientPayload_IOSAppExtension)(0),                                    // 16: proto.ClientPayload.IOSAppExtension
	(ClientPayload_Product)(0),                                            // 17: proto.ClientPayload.Product
	(ClientPayload_DNSSource_DNSResolutionMethod)(0),                      // 18: proto.ClientPayload.DNSSource.DNSResolutionMethod
	(ClientPayload_UserAgent_DeviceType)(0),                               // 19: proto.ClientPayload.UserAgent.DeviceType
	(ClientPayload_UserAgent_Platform)(0),                                 // 20: proto.ClientPayload.UserAgent.Platform
	(ClientPayload_UserAgent_ReleaseChannel)(0),                           // 21: proto.ClientPayload.UserAgent.ReleaseChannel
	(ClientPayload_WebInfo_WebSubPlatform)(0),                             // 22: proto.ClientPayload.WebInfo.WebSubPlatform
	(ContextInfo_AdReplyInfo_MediaType)(0),                                // 23: proto.ContextInfo.AdReplyInfo.MediaType
	(ContextInfo_ExternalAdReplyInfo_MediaType)(0),                        // 24: proto.ContextInfo.ExternalAdReplyInfo.MediaType
	(ContextInfo_ForwardedNewsletterMessageInfo_ContentType)(0),           // 25: proto.ContextInfo.ForwardedNewsletterMessageInfo.ContentType
	(Conversation_EndOfHistoryTransferType)(0),                            // 26: proto.Conversation.EndOfHistoryTransferType
	(DeviceProps_PlatformType)(0),                                         // 27: proto.DeviceProps.PlatformType
	(DisappearingMode_Initiator)(0),                                       // 28: proto.DisappearingMode.Initiator
	(DisappearingMode_Trigger)(0),                                         // 29: proto.DisappearingMode.Trigger
	(GroupParticipant_Rank)(0),                                            // 30: proto.GroupParticipant.Rank
	(HistorySync_BotAIWaitListState)(0),                                   // 31: proto.HistorySync.BotAIWaitListState
	(HistorySync_HistorySyncType)(0),                                      // 32: proto.HistorySync.HistorySyncType
	(HydratedTemplateButton_HydratedURLButton_WebviewPresentationType)(0), // 33: proto.HydratedTemplateButton.HydratedURLButton.WebviewPresentationType
	(MediaRetryNotification_ResultType)(0),                                // 34: proto.MediaRetryNotification.ResultType
	(Message_PeerDataOperationRequestType)(0),                             // 35: proto.Message.PeerDataOperationRequestType
	(Message_BCallMessage_MediaType)(0),                                   // 36: proto.Message.BCallMessage.MediaType
	(Message_BotFeedbackMessage_BotFeedbackKind)(0),                       // 37: proto.Message.BotFeedbackMessage.BotFeedbackKind
	(Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative)(0),       // 38: proto.Message.BotFeedbackMessage.BotFeedbackKindMultipleNegative
	(Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive)(0),       // 39: proto.Message.BotFeedbackMessage.BotFeedbackKindMultiplePositive
	(Message_ButtonsMessage_HeaderType)(0),                                // 40: proto.Message.ButtonsMessage.HeaderType
	(Message_ButtonsMessage_Button_Type)(0),                               // 41: proto.Message.ButtonsMessage.Button.Type
	(Message_ButtonsResponseMessage_Type)(0),                              // 42: proto.Message.ButtonsResponseMessage.Type
	(Message_CallLogMessage_CallOutcome)(0),                               // 43: proto.Message.CallLogMessage.CallOutcome
	(Message_CallLogMessage_CallType)(0),                                  // 44: proto.Message.CallLogMessage.CallType
	(Message_EventResponseMessage_EventResponseType)(0),                   // 45: proto.Message.EventResponseMessage.EventResponseType
	(Message_ExtendedTextMessage_FontType)(0),                             // 46: proto.Message.ExtendedTextMessage.FontType
	(Message_ExtendedTextMessage_InviteLinkGroupType)(0),                  // 47: proto.Message.ExtendedTextMessage.InviteLinkGroupType
	(Message_ExtendedTextMessage_PreviewType)(0),                          // 48: proto.Message.ExtendedTextMessage.PreviewType
	(Message_GroupInviteMessage_GroupType)(0),                             // 49: proto.Message.GroupInviteMessage.GroupType
	(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType)(0),  // 50: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.CalendarType
	(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType)(0), // 51: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.DayOfWeekType
	(Message_HistorySyncNotification_HistorySyncType)(0),                                                        // 52: proto.Message.HistorySyncNotification.HistorySyncType
	(Message_InteractiveMessage_ShopMessage_Surface)(0),                                                         // 53: proto.Message.InteractiveMessage.ShopMessage.Surface
	(Message_InteractiveResponseMessage_Body_Format)(0),                                                         // 54: proto.Message.InteractiveResponseMessage.Body.Format
	(Message_InvoiceMessage_AttachmentType)(0),                                                                  // 55: proto.Message.InvoiceMessage.AttachmentType
	(Message_ListMessage_ListType)(0),                                                                           // 56: proto.Message.ListMessage.ListType
	(Message_ListResponseMessage_ListType)(0),                                                                   // 57: proto.Message.ListResponseMessage.ListType
	(Message_OrderMessage_OrderStatus)(0),                                                                       // 58: proto.Message.OrderMessage.OrderStatus
	(Message_OrderMessage_OrderSurface)(0),                                                                      // 59: proto.Message.OrderMessage.OrderSurface
	(Message_PaymentInviteMessage_ServiceType)(0),                                                               // 60: proto.Message.PaymentInviteMessage.ServiceType
	(Message_PinInChatMessage_Type)(0),                                                                          // 61: proto.Message.PinInChatMessage.Type
	(Message_PlaceholderMessage_PlaceholderType)(0),                                                             // 62: proto.Message.PlaceholderMessage.PlaceholderType
	(Message_ProtocolMessage_Type)(0),                                                                           // 63: proto.Message.ProtocolMessage.Type
	(Message_RequestWelcomeMessageMetadata_LocalChatState)(0),                                                   // 64: proto.Message.RequestWelcomeMessageMetadata.LocalChatState
	(Message_ScheduledCallCreationMessage_CallType)(0),                                                          // 65: proto.Message.ScheduledCallCreationMessage.CallType
	(Message_ScheduledCallEditMessage_EditType)(0),                                                              // 66: proto.Message.ScheduledCallEditMessage.EditType
	(Message_VideoMessage_Attribution)(0),                                                                       // 67: proto.Message.VideoMessage.Attribution
	(PastParticipant_LeaveReason)(0),                                                                            // 68: proto.PastParticipant.LeaveReason
	(PatchDebugData_Platform)(0),                                                                                // 69: proto.PatchDebugData.Platform
	(PaymentBackground_Type)(0),                                                                                 // 70: proto.PaymentBackground.Type
	(PaymentInfo_Currency)(0),                                                                                   // 71: proto.PaymentInfo.Currency
	(PaymentInfo_Status)(0),                                                                                     // 72: proto.PaymentInfo.Status
	(PaymentInfo_TxnStatus)(0),                                                                                  // 73: proto.PaymentInfo.TxnStatus
	(PinInChat_Type)(0),                                                                                         // 74: proto.PinInChat.Type
	(QP_ClauseType)(0),                                                                                          // 75: proto.QP.ClauseType
	(QP_FilterClientNotSupportedConfig)(0),                                                                      // 76: proto.QP.FilterClientNotSupportedConfig
	(QP_FilterResult)(0),                                                                                        // 77: proto.QP.FilterResult
	(SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType)(0),                                   // 78: proto.SyncActionValue.MarketingMessageAction.MarketingMessagePrototypeType
	(SyncActionValue_StatusPrivacyAction_StatusDistributionMode)(0),                                             // 79: proto.SyncActionValue.StatusPrivacyAction.StatusDistributionMode
	(SyncdMutation_SyncdOperation)(0),                                                                           // 80: proto.SyncdMutation.SyncdOperation
	(WebFeatures_Flag)(0),                                                                                       // 81: proto.WebFeatures.Flag
	(WebMessageInfo_BizPrivacyStatus)(0),                                                                        // 82: proto.WebMessageInfo.BizPrivacyStatus
	(WebMessageInfo_Status)(0),                                                                                  // 83: proto.WebMessageInfo.Status
	(WebMessageInfo_StubType)(0),                                                                                // 84: proto.WebMessageInfo.StubType
	(*ADVDeviceIdentity)(nil),                                                                                   // 85: proto.ADVDeviceIdentity
	(*ADVKeyIndexList)(nil),                                                                                     // 86: proto.ADVKeyIndexList
	(*ADVSignedDeviceIdentity)(nil),                                                                             // 87: proto.ADVSignedDeviceIdentity
	(*ADVSignedDeviceIdentityHMAC)(nil),                                                                         // 88: proto.ADVSignedDeviceIdentityHMAC
	(*ADVSignedKeyIndexList)(nil),                                                                               // 89: proto.ADVSignedKeyIndexList
	(*ActionLink)(nil),                                                                                          // 90: proto.ActionLink
	(*AutoDownloadSettings)(nil),                                                                                // 91: proto.AutoDownloadSettings
	(*AvatarUserSettings)(nil),                                                                                  // 92: proto.AvatarUserSettings
	(*BizAccountLinkInfo)(nil),                                                                                  // 93: proto.BizAccountLinkInfo
	(*BizAccountPayload)(nil),                                                                                   // 94: proto.BizAccountPayload
	(*BizIdentityInfo)(nil),                                                                                     // 95: proto.BizIdentityInfo
	(*BotAvatarMetadata)(nil),                                                                                   // 96: proto.BotAvatarMetadata
	(*BotMetadata)(nil),                                                                                         // 97: proto.BotMetadata
	(*BotPluginMetadata)(nil),                                                                                   // 98: proto.BotPluginMetadata
	(*BotSuggestedPromptMetadata)(nil),                                                                          // 99: proto.BotSuggestedPromptMetadata
	(*CallLogRecord)(nil),                                                                                       // 100: proto.CallLogRecord
	(*CertChain)(nil),                                                                                           // 101: proto.CertChain
	(*ChatRowOpaqueData)(nil),                                                                                   // 102: proto.ChatRowOpaqueData
	(*ClientPayload)(nil),                                                                                       // 103: proto.ClientPayload
	(*CommentMetadata)(nil),                                                                                     // 104: proto.CommentMetadata
	(*ContextInfo)(nil),                                                                                         // 105: proto.ContextInfo
	(*Conversation)(nil),                                                                                        // 106: proto.Conversation
	(*DeviceConsistencyCodeMessage)(nil),                                                                        // 107: proto.DeviceConsistencyCodeMessage
	(*DeviceListMetadata)(nil),                                                                                  // 108: proto.DeviceListMetadata
	(*DeviceProps)(nil),                                                                                         // 109: proto.DeviceProps
	(*DisappearingMode)(nil),                                                                                    // 110: proto.DisappearingMode
	(*EphemeralSetting)(nil),                                                                                    // 111: proto.EphemeralSetting
	(*EventResponse)(nil),                                                                                       // 112: proto.EventResponse
	(*ExitCode)(nil),                                                                                            // 113: proto.ExitCode
	(*ExternalBlobReference)(nil),                                                                               // 114: proto.ExternalBlobReference
	(*GlobalSettings)(nil),                                                                                      // 115: proto.GlobalSettings
	(*GroupMention)(nil),                                                                                        // 116: proto.GroupMention
	(*GroupParticipant)(nil),                                                                                    // 117: proto.GroupParticipant
	(*HandshakeMessage)(nil),                                                                                    // 118: proto.HandshakeMessage
	(*HistorySync)(nil),                                                                                         // 119: proto.HistorySync
	(*HistorySyncMsg)(nil),                                                                                      // 120: proto.HistorySyncMsg
	(*HydratedTemplateButton)(nil),                                                                              // 121: proto.HydratedTemplateButton
	(*IdentityKeyPairStructure)(nil),                                                                            // 122: proto.IdentityKeyPairStructure
	(*InteractiveAnnotation)(nil),                                                                               // 123: proto.InteractiveAnnotation
	(*KeepInChat)(nil),                                                                                          // 124: proto.KeepInChat
	(*KeyExchangeMessage)(nil),                                                                                  // 125: proto.KeyExchangeMessage
	(*KeyId)(nil),                                                                                               // 126: proto.KeyId
	(*LocalizedName)(nil),                                                                                       // 127: proto.LocalizedName
	(*Location)(nil),                                                                                            // 128: proto.Location
	(*MediaData)(nil),                                                                                           // 129: proto.MediaData
	(*MediaEntry)(nil),                                                                                          // 130: proto.MediaEntry
	(*MediaNotifyMessage)(nil),                                                                                  // 131: proto.MediaNotifyMessage
	(*MediaRetryNotification)(nil),                                                                              // 132: proto.MediaRetryNotification
	(*Message)(nil),                                                                                             // 133: proto.Message
	(*MessageAddOnContextInfo)(nil),                                                                             // 134: proto.MessageAddOnContextInfo
	(*MessageContextInfo)(nil),                                                                                  // 135: proto.MessageContextInfo
	(*MessageKey)(nil),                                                                                          // 136: proto.MessageKey
	(*MessageSecretMessage)(nil),                                                                                // 137: proto.MessageSecretMessage
	(*Money)(nil),                                                                                               // 138: proto.Money
	(*MsgOpaqueData)(nil),                                                                                       // 139: proto.MsgOpaqueData
	(*MsgRowOpaqueData)(nil),                                                                                    // 140: proto.MsgRowOpaqueData
	(*NoiseCertificate)(nil),                                                                                    // 141: proto.NoiseCertificate
	(*NotificationMessageInfo)(nil),                                                                             // 142: proto.NotificationMessageInfo
	(*NotificationSettings)(nil),                                                                                // 143: proto.NotificationSettings
	(*PastParticipant)(nil),                                                                                     // 144: proto.PastParticipant
	(*PastParticipants)(nil),                                                                                    // 145: proto.PastParticipants
	(*PatchDebugData)(nil),                                                                                      // 146: proto.PatchDebugData
	(*PaymentBackground)(nil),                                                                                   // 147: proto.PaymentBackground
	(*PaymentInfo)(nil),                                                                                         // 148: proto.PaymentInfo
	(*PhoneNumberToLIDMapping)(nil),                                                                             // 149: proto.PhoneNumberToLIDMapping
	(*PhotoChange)(nil),                                                                                         // 150: proto.PhotoChange
	(*PinInChat)(nil),                                                                                           // 151: proto.PinInChat
	(*Point)(nil),                                                                                               // 152: proto.Point
	(*PollAdditionalMetadata)(nil),                                                                              // 153: proto.PollAdditionalMetadata
	(*PollEncValue)(nil),                                                                                        // 154: proto.PollEncValue
	(*PollUpdate)(nil),                                                                                          // 155: proto.PollUpdate
	(*PreKeyRecordStructure)(nil),                                                                               // 156: proto.PreKeyRecordStructure
	(*PreKeySignalMessage)(nil),                                                                                 // 157: proto.PreKeySignalMessage
	(*PremiumMessageInfo)(nil),                                                                                  // 158: proto.PremiumMessageInfo
	(*Pushname)(nil),                                                                                            // 159: proto.Pushname
	(*QP)(nil),                                                                                                  // 160: proto.QP
	(*Reaction)(nil),                                                                                            // 161: proto.Reaction
	(*RecentEmojiWeight)(nil),                                                                                   // 162: proto.RecentEmojiWeight
	(*RecordStructure)(nil),                                                                                     // 163: proto.RecordStructure
	(*ReportingTokenInfo)(nil),                                                                                  // 164: proto.ReportingTokenInfo
	(*SenderKeyDistributionMessage)(nil),                                                                        // 165: proto.SenderKeyDistributionMessage
	(*SenderKeyMessage)(nil),                                                                                    // 166: proto.SenderKeyMessage
	(*SenderKeyRecordStructure)(nil),                                                                            // 167: proto.SenderKeyRecordStructure
	(*SenderKeyStateStructure)(nil),                                                                             // 168: proto.SenderKeyStateStructure
	(*ServerErrorReceipt)(nil),                                                                                  // 169: proto.ServerErrorReceipt
	(*SessionStructure)(nil),                                                                                    // 170: proto.SessionStructure
	(*SignalMessage)(nil),                                                                                       // 171: proto.SignalMessage
	(*SignedPreKeyRecordStructure)(nil),                                                                         // 172: proto.SignedPreKeyRecordStructure
	(*StatusPSA)(nil),                                                                                           // 173: proto.StatusPSA
	(*StickerMetadata)(nil),                                                                                     // 174: proto.StickerMetadata
	(*SyncActionData)(nil),                                                                                      // 175: proto.SyncActionData
	(*SyncActionValue)(nil),                                                                                     // 176: proto.SyncActionValue
	(*SyncdIndex)(nil),                                                                                          // 177: proto.SyncdIndex
	(*SyncdMutation)(nil),                                                                                       // 178: proto.SyncdMutation
	(*SyncdMutations)(nil),                                                                                      // 179: proto.SyncdMutations
	(*SyncdPatch)(nil),                                                                                          // 180: proto.SyncdPatch
	(*SyncdRecord)(nil),                                                                                         // 181: proto.SyncdRecord
	(*SyncdSnapshot)(nil),                                                                                       // 182: proto.SyncdSnapshot
	(*SyncdValue)(nil),                                                                                          // 183: proto.SyncdValue
	(*SyncdVersion)(nil),                                                                                        // 184: proto.SyncdVersion
	(*TemplateButton)(nil),                                                                                      // 185: proto.TemplateButton
	(*UserReceipt)(nil),                                                                                         // 186: proto.UserReceipt
	(*VerifiedNameCertificate)(nil),                                                                             // 187: proto.VerifiedNameCertificate
	(*WallpaperSettings)(nil),                                                                                   // 188: proto.WallpaperSettings
	(*WebFeatures)(nil),                                                                                         // 189: proto.WebFeatures
	(*WebMessageInfo)(nil),                                                                                      // 190: proto.WebMessageInfo
	(*WebNotificationsInfo)(nil),                                                                                // 191: proto.WebNotificationsInfo
	(*CallLogRecord_ParticipantInfo)(nil),                                                                       // 192: proto.CallLogRecord.ParticipantInfo
	(*CertChain_NoiseCertificate)(nil),                                                                          // 193: proto.CertChain.NoiseCertificate
	(*CertChain_NoiseCertificate_Details)(nil),                                                                  // 194: proto.CertChain.NoiseCertificate.Details
	(*ChatRowOpaqueData_DraftMessage)(nil),                                                                      // 195: proto.ChatRowOpaqueData.DraftMessage
	(*ChatRowOpaqueData_DraftMessage_CtwaContextData)(nil),                                                      // 196: proto.ChatRowOpaqueData.DraftMessage.CtwaContextData
	(*ChatRowOpaqueData_DraftMessage_CtwaContextLinkData)(nil),                                                  // 197: proto.ChatRowOpaqueData.DraftMessage.CtwaContextLinkData
	(*ClientPayload_DNSSource)(nil),                                                                             // 198: proto.ClientPayload.DNSSource
	(*ClientPayload_DevicePairingRegistrationData)(nil),                                                         // 199: proto.ClientPayload.DevicePairingRegistrationData
	(*ClientPayload_InteropData)(nil),                                                                           // 200: proto.ClientPayload.InteropData
	(*ClientPayload_UserAgent)(nil),                                                                             // 201: proto.ClientPayload.UserAgent
	(*ClientPayload_WebInfo)(nil),                                                                               // 202: proto.ClientPayload.WebInfo
	(*ClientPayload_UserAgent_AppVersion)(nil),                                                                  // 203: proto.ClientPayload.UserAgent.AppVersion
	(*ClientPayload_WebInfo_WebdPayload)(nil),                                                                   // 204: proto.ClientPayload.WebInfo.WebdPayload
	(*ContextInfo_AdReplyInfo)(nil),                                                                             // 205: proto.ContextInfo.AdReplyInfo
	(*ContextInfo_BusinessMessageForwardInfo)(nil),                                                              // 206: proto.ContextInfo.BusinessMessageForwardInfo
	(*ContextInfo_DataSharingContext)(nil),                                                                      // 207: proto.ContextInfo.DataSharingContext
	(*ContextInfo_ExternalAdReplyInfo)(nil),                                                                     // 208: proto.ContextInfo.ExternalAdReplyInfo
	(*ContextInfo_ForwardedNewsletterMessageInfo)(nil),                                                          // 209: proto.ContextInfo.ForwardedNewsletterMessageInfo
	(*ContextInfo_UTMInfo)(nil),                                                                                 // 210: proto.ContextInfo.UTMInfo
	(*DeviceProps_AppVersion)(nil),                                                                              // 211: proto.DeviceProps.AppVersion
	(*DeviceProps_HistorySyncConfig)(nil),                                                                       // 212: proto.DeviceProps.HistorySyncConfig
	(*HandshakeMessage_ClientFinish)(nil),                                                                       // 213: proto.HandshakeMessage.ClientFinish
	(*HandshakeMessage_ClientHello)(nil),                                                                        // 214: proto.HandshakeMessage.ClientHello
	(*HandshakeMessage_ServerHello)(nil),                                                                        // 215: proto.HandshakeMessage.ServerHello
	(*HydratedTemplateButton_HydratedCallButton)(nil),                                                           // 216: proto.HydratedTemplateButton.HydratedCallButton
	(*HydratedTemplateButton_HydratedQuickReplyButton)(nil),                                                     // 217: proto.HydratedTemplateButton.HydratedQuickReplyButton
	(*HydratedTemplateButton_HydratedURLButton)(nil),                                                            // 218: proto.HydratedTemplateButton.HydratedURLButton
	(*MediaEntry_DownloadableThumbnail)(nil),                                                                    // 219: proto.MediaEntry.DownloadableThumbnail
	(*MediaEntry_ProgressiveJpegDetails)(nil),                                                                   // 220: proto.MediaEntry.ProgressiveJpegDetails
	(*Message_AppStateFatalExceptionNotification)(nil),                                                          // 221: proto.Message.AppStateFatalExceptionNotification
	(*Message_AppStateSyncKey)(nil),                                                                             // 222: proto.Message.AppStateSyncKey
	(*Message_AppStateSyncKeyData)(nil),                                                                         // 223: proto.Message.AppStateSyncKeyData
	(*Message_AppStateSyncKeyFingerprint)(nil),                                                                  // 224: proto.Message.AppStateSyncKeyFingerprint
	(*Message_AppStateSyncKeyId)(nil),                                                                           // 225: proto.Message.AppStateSyncKeyId
	(*Message_AppStateSyncKeyRequest)(nil),                                                                      // 226: proto.Message.AppStateSyncKeyRequest
	(*Message_AppStateSyncKeyShare)(nil),                                                                        // 227: proto.Message.AppStateSyncKeyShare
	(*Message_AudioMessage)(nil),                                                                                // 228: proto.Message.AudioMessage
	(*Message_BCallMessage)(nil),                                                                                // 229: proto.Message.BCallMessage
	(*Message_BotFeedbackMessage)(nil),                                                                          // 230: proto.Message.BotFeedbackMessage
	(*Message_ButtonsMessage)(nil),                                                                              // 231: proto.Message.ButtonsMessage
	(*Message_ButtonsResponseMessage)(nil),                                                                      // 232: proto.Message.ButtonsResponseMessage
	(*Message_Call)(nil),                                                                                        // 233: proto.Message.Call
	(*Message_CallLogMessage)(nil),                                                                              // 234: proto.Message.CallLogMessage
	(*Message_CancelPaymentRequestMessage)(nil),                                                                 // 235: proto.Message.CancelPaymentRequestMessage
	(*Message_Chat)(nil),                                                                                        // 236: proto.Message.Chat
	(*Message_CommentMessage)(nil),                                                                              // 237: proto.Message.CommentMessage
	(*Message_ContactMessage)(nil),                                                                              // 238: proto.Message.ContactMessage
	(*Message_ContactsArrayMessage)(nil),                                                                        // 239: proto.Message.ContactsArrayMessage
	(*Message_DeclinePaymentRequestMessage)(nil),                                                                // 240: proto.Message.DeclinePaymentRequestMessage
	(*Message_DeviceSentMessage)(nil),                                                                           // 241: proto.Message.DeviceSentMessage
	(*Message_DocumentMessage)(nil),                                                                             // 242: proto.Message.DocumentMessage
	(*Message_EncCommentMessage)(nil),                                                                           // 243: proto.Message.EncCommentMessage
	(*Message_EncEventUpdateMessage)(nil),                                                                       // 244: proto.Message.EncEventUpdateMessage
	(*Message_EncReactionMessage)(nil),                                                                          // 245: proto.Message.EncReactionMessage
	(*Message_EventEditMessage)(nil),                                                                            // 246: proto.Message.EventEditMessage
	(*Message_EventMessage)(nil),                                                                                // 247: proto.Message.EventMessage
	(*Message_EventResponseMessage)(nil),                                                                        // 248: proto.Message.EventResponseMessage
	(*Message_EventUpdateMessage)(nil),                                                                          // 249: proto.Message.EventUpdateMessage
	(*Message_ExtendedTextMessage)(nil),                                                                         // 250: proto.Message.ExtendedTextMessage
	(*Message_ExtendedTextMessageWithParentKey)(nil),                                                            // 251: proto.Message.ExtendedTextMessageWithParentKey
	(*Message_FutureProofMessage)(nil),                                                                          // 252: proto.Message.FutureProofMessage
	(*Message_GroupInviteMessage)(nil),                                                                          // 253: proto.Message.GroupInviteMessage
	(*Message_HighlyStructuredMessage)(nil),                                                                     // 254: proto.Message.HighlyStructuredMessage
	(*Message_HistorySyncNotification)(nil),                                                                     // 255: proto.Message.HistorySyncNotification
	(*Message_ImageMessage)(nil),                                                                                // 256: proto.Message.ImageMessage
	(*Message_InitialSecurityNotificationSettingSync)(nil),                                                      // 257: proto.Message.InitialSecurityNotificationSettingSync
	(*Message_InteractiveMessage)(nil),                                                                          // 258: proto.Message.InteractiveMessage
	(*Message_InteractiveResponseMessage)(nil),                                                                  // 259: proto.Message.InteractiveResponseMessage
	(*Message_InvoiceMessage)(nil),                                                                              // 260: proto.Message.InvoiceMessage
	(*Message_KeepInChatMessage)(nil),                                                                           // 261: proto.Message.KeepInChatMessage
	(*Message_ListMessage)(nil),                                                                                 // 262: proto.Message.ListMessage
	(*Message_ListResponseMessage)(nil),                                                                         // 263: proto.Message.ListResponseMessage
	(*Message_LiveLocationMessage)(nil),                                                                         // 264: proto.Message.LiveLocationMessage
	(*Message_LocationMessage)(nil),                                                                             // 265: proto.Message.LocationMessage
	(*Message_MessageHistoryBundle)(nil),                                                                        // 266: proto.Message.MessageHistoryBundle
	(*Message_NewsletterAdminInviteMessage)(nil),                                                                // 267: proto.Message.NewsletterAdminInviteMessage
	(*Message_OrderMessage)(nil),                                                                                // 268: proto.Message.OrderMessage
	(*Message_PaymentInviteMessage)(nil),                                                                        // 269: proto.Message.PaymentInviteMessage
	(*Message_PeerDataOperationRequestMessage)(nil),                                                             // 270: proto.Message.PeerDataOperationRequestMessage
	(*Message_PeerDataOperationRequestResponseMessage)(nil),                                                     // 271: proto.Message.PeerDataOperationRequestResponseMessage
	(*Message_PinInChatMessage)(nil),                                                                            // 272: proto.Message.PinInChatMessage
	(*Message_PlaceholderMessage)(nil),                                                                          // 273: proto.Message.PlaceholderMessage
	(*Message_PollCreationMessage)(nil),                                                                         // 274: proto.Message.PollCreationMessage
	(*Message_PollEncValue)(nil),                                                                                // 275: proto.Message.PollEncValue
	(*Message_PollUpdateMessage)(nil),                                                                           // 276: proto.Message.PollUpdateMessage
	(*Message_PollUpdateMessageMetadata)(nil),                                                                   // 277: proto.Message.PollUpdateMessageMetadata
	(*Message_PollVoteMessage)(nil),                                                                             // 278: proto.Message.PollVoteMessage
	(*Message_ProductMessage)(nil),                                                                              // 279: proto.Message.ProductMessage
	(*Message_ProtocolMessage)(nil),                                                                             // 280: proto.Message.ProtocolMessage
	(*Message_ReactionMessage)(nil),                                                                             // 281: proto.Message.ReactionMessage
	(*Message_RequestPaymentMessage)(nil),                                                                       // 282: proto.Message.RequestPaymentMessage
	(*Message_RequestPhoneNumberMessage)(nil),                                                                   // 283: proto.Message.RequestPhoneNumberMessage
	(*Message_RequestWelcomeMessageMetadata)(nil),                                                               // 284: proto.Message.RequestWelcomeMessageMetadata
	(*Message_ScheduledCallCreationMessage)(nil),                                                                // 285: proto.Message.ScheduledCallCreationMessage
	(*Message_ScheduledCallEditMessage)(nil),                                                                    // 286: proto.Message.ScheduledCallEditMessage
	(*Message_SendPaymentMessage)(nil),                                                                          // 287: proto.Message.SendPaymentMessage
	(*Message_SenderKeyDistributionMessage)(nil),                                                                // 288: proto.Message.SenderKeyDistributionMessage
	(*Message_StickerMessage)(nil),                                                                              // 289: proto.Message.StickerMessage
	(*Message_StickerSyncRMRMessage)(nil),                                                                       // 290: proto.Message.StickerSyncRMRMessage
	(*Message_TemplateButtonReplyMessage)(nil),                                                                  // 291: proto.Message.TemplateButtonReplyMessage
	(*Message_TemplateMessage)(nil),                                                                             // 292: proto.Message.TemplateMessage
	(*Message_VideoMessage)(nil),                                                                                // 293: proto.Message.VideoMessage
	(*Message_ButtonsMessage_Button)(nil),                                                                       // 294: proto.Message.ButtonsMessage.Button
	(*Message_ButtonsMessage_Button_ButtonText)(nil),                                                            // 295: proto.Message.ButtonsMessage.Button.ButtonText
	(*Message_ButtonsMessage_Button_NativeFlowInfo)(nil),                                                        // 296: proto.Message.ButtonsMessage.Button.NativeFlowInfo
	(*Message_CallLogMessage_CallParticipant)(nil),                                                              // 297: proto.Message.CallLogMessage.CallParticipant
	(*Message_HighlyStructuredMessage_HSMLocalizableParameter)(nil),                                             // 298: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter
	(*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency)(nil),                                                         // 299: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
	(*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime)(nil),                                                         // 300: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
	(*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent)(nil),                                    // 301: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
	(*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch)(nil),                                    // 302: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
	(*Message_InteractiveMessage_Body)(nil),                                                                                             // 303: proto.Message.InteractiveMessage.Body
	(*Message_InteractiveMessage_CarouselMessage)(nil),                                                                                  // 304: proto.Message.InteractiveMessage.CarouselMessage
	(*Message_InteractiveMessage_CollectionMessage)(nil),                                                                                // 305: proto.Message.InteractiveMessage.CollectionMessage
	(*Message_InteractiveMessage_Footer)(nil),                                                                                           // 306: proto.Message.InteractiveMessage.Footer
	(*Message_InteractiveMessage_Header)(nil),                                                                                           // 307: proto.Message.InteractiveMessage.Header
	(*Message_InteractiveMessage_NativeFlowMessage)(nil),                                                                                // 308: proto.Message.InteractiveMessage.NativeFlowMessage
	(*Message_InteractiveMessage_ShopMessage)(nil),                                                                                      // 309: proto.Message.InteractiveMessage.ShopMessage
	(*Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton)(nil),                                                               // 310: proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
	(*Message_InteractiveResponseMessage_Body)(nil),                                                                                     // 311: proto.Message.InteractiveResponseMessage.Body
	(*Message_InteractiveResponseMessage_NativeFlowResponseMessage)(nil),                                                                // 312: proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage
	(*Message_ListMessage_Product)(nil),                                                                                                 // 313: proto.Message.ListMessage.Product
	(*Message_ListMessage_ProductListHeaderImage)(nil),                                                                                  // 314: proto.Message.ListMessage.ProductListHeaderImage
	(*Message_ListMessage_ProductListInfo)(nil),                                                                                         // 315: proto.Message.ListMessage.ProductListInfo
	(*Message_ListMessage_ProductSection)(nil),                                                                                          // 316: proto.Message.ListMessage.ProductSection
	(*Message_ListMessage_Row)(nil),                                                                                                     // 317: proto.Message.ListMessage.Row
	(*Message_ListMessage_Section)(nil),                                                                                                 // 318: proto.Message.ListMessage.Section
	(*Message_ListResponseMessage_SingleSelectReply)(nil),                                                                               // 319: proto.Message.ListResponseMessage.SingleSelectReply
	(*Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest)(nil),                                                          // 320: proto.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
	(*Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest)(nil),                                                     // 321: proto.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
	(*Message_PeerDataOperationRequestMessage_RequestStickerReupload)(nil),                                                              // 322: proto.Message.PeerDataOperationRequestMessage.RequestStickerReupload
	(*Message_PeerDataOperationRequestMessage_RequestUrlPreview)(nil),                                                                   // 323: proto.Message.PeerDataOperationRequestMessage.RequestUrlPreview
	(*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult)(nil),                                                     // 324: proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
	(*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse)(nil),                                 // 325: proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
	(*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse)(nil),                    // 326: proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
	(*Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail)(nil), // 327: proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
	(*Message_PollCreationMessage_Option)(nil),                                                                                          // 328: proto.Message.PollCreationMessage.Option
	(*Message_ProductMessage_CatalogSnapshot)(nil),                                                                                      // 329: proto.Message.ProductMessage.CatalogSnapshot
	(*Message_ProductMessage_ProductSnapshot)(nil),                                                                                      // 330: proto.Message.ProductMessage.ProductSnapshot
	(*Message_TemplateMessage_FourRowTemplate)(nil),                                                                                     // 331: proto.Message.TemplateMessage.FourRowTemplate
	(*Message_TemplateMessage_HydratedFourRowTemplate)(nil),                                                                             // 332: proto.Message.TemplateMessage.HydratedFourRowTemplate
	(*MsgOpaqueData_PollOption)(nil),                                                                                                    // 333: proto.MsgOpaqueData.PollOption
	(*NoiseCertificate_Details)(nil),                                                                                                    // 334: proto.NoiseCertificate.Details
	(*PaymentBackground_MediaData)(nil),                                                                                                 // 335: proto.PaymentBackground.MediaData
	(*QP_Filter)(nil),                                                                                                                   // 336: proto.QP.Filter
	(*QP_FilterClause)(nil),                                                                                                             // 337: proto.QP.FilterClause
	(*QP_FilterParameters)(nil),                                                                                                         // 338: proto.QP.FilterParameters
	(*SenderKeyStateStructure_SenderChainKey)(nil),                                                                                      // 339: proto.SenderKeyStateStructure.SenderChainKey
	(*SenderKeyStateStructure_SenderMessageKey)(nil),                                                                                    // 340: proto.SenderKeyStateStructure.SenderMessageKey
	(*SenderKeyStateStructure_SenderSigningKey)(nil),                                                                                    // 341: proto.SenderKeyStateStructure.SenderSigningKey
	(*SessionStructure_Chain)(nil),                                                                                                      // 342: proto.SessionStructure.Chain
	(*SessionStructure_PendingKeyExchange)(nil),                                                                                         // 343: proto.SessionStructure.PendingKeyExchange
	(*SessionStructure_PendingPreKey)(nil),                                                                                              // 344: proto.SessionStructure.PendingPreKey
	(*SessionStructure_Chain_ChainKey)(nil),                                                                                             // 345: proto.SessionStructure.Chain.ChainKey
	(*SessionStructure_Chain_MessageKey)(nil),                                                                                           // 346: proto.SessionStructure.Chain.MessageKey
	(*SyncActionValue_AgentAction)(nil),                                                                                                 // 347: proto.SyncActionValue.AgentAction
	(*SyncActionValue_AndroidUnsupportedActions)(nil),                                                                                   // 348: proto.SyncActionValue.AndroidUnsupportedActions
	(*SyncActionValue_ArchiveChatAction)(nil),                                                                                           // 349: proto.SyncActionValue.ArchiveChatAction
	(*SyncActionValue_BotWelcomeRequestAction)(nil),                                                                                     // 350: proto.SyncActionValue.BotWelcomeRequestAction
	(*SyncActionValue_CallLogAction)(nil),                                                                                               // 351: proto.SyncActionValue.CallLogAction
	(*SyncActionValue_ChatAssignmentAction)(nil),                                                                                        // 352: proto.SyncActionValue.ChatAssignmentAction
	(*SyncActionValue_ChatAssignmentOpenedStatusAction)(nil),                                                                            // 353: proto.SyncActionValue.ChatAssignmentOpenedStatusAction
	(*SyncActionValue_ClearChatAction)(nil),                                                                                             // 354: proto.SyncActionValue.ClearChatAction
	(*SyncActionValue_ContactAction)(nil),                                                                                               // 355: proto.SyncActionValue.ContactAction
	(*SyncActionValue_CustomPaymentMethod)(nil),                                                                                         // 356: proto.SyncActionValue.CustomPaymentMethod
	(*SyncActionValue_CustomPaymentMethodMetadata)(nil),                                                                                 // 357: proto.SyncActionValue.CustomPaymentMethodMetadata
	(*SyncActionValue_CustomPaymentMethodsAction)(nil),                                                                                  // 358: proto.SyncActionValue.CustomPaymentMethodsAction
	(*SyncActionValue_DeleteChatAction)(nil),                                                                                            // 359: proto.SyncActionValue.DeleteChatAction
	(*SyncActionValue_DeleteIndividualCallLogAction)(nil),                                                                               // 360: proto.SyncActionValue.DeleteIndividualCallLogAction
	(*SyncActionValue_DeleteMessageForMeAction)(nil),                                                                                    // 361: proto.SyncActionValue.DeleteMessageForMeAction
	(*SyncActionValue_ExternalWebBetaAction)(nil),                                                                                       // 362: proto.SyncActionValue.ExternalWebBetaAction
	(*SyncActionValue_KeyExpiration)(nil),                                                                                               // 363: proto.SyncActionValue.KeyExpiration
	(*SyncActionValue_LabelAssociationAction)(nil),                                                                                      // 364: proto.SyncActionValue.LabelAssociationAction
	(*SyncActionValue_LabelEditAction)(nil),                                                                                             // 365: proto.SyncActionValue.LabelEditAction
	(*SyncActionValue_LabelReorderingAction)(nil),                                                                                       // 366: proto.SyncActionValue.LabelReorderingAction
	(*SyncActionValue_LocaleSetting)(nil),                                                                                               // 367: proto.SyncActionValue.LocaleSetting
	(*SyncActionValue_MarkChatAsReadAction)(nil),                                                                                        // 368: proto.SyncActionValue.MarkChatAsReadAction
	(*SyncActionValue_MarketingMessageAction)(nil),                                                                                      // 369: proto.SyncActionValue.MarketingMessageAction
	(*SyncActionValue_MarketingMessageBroadcastAction)(nil),                                                                             // 370: proto.SyncActionValue.MarketingMessageBroadcastAction
	(*SyncActionValue_MuteAction)(nil),                                                                                                  // 371: proto.SyncActionValue.MuteAction
	(*SyncActionValue_NuxAction)(nil),                                                                                                   // 372: proto.SyncActionValue.NuxAction
	(*SyncActionValue_PaymentInfoAction)(nil),                                                                                           // 373: proto.SyncActionValue.PaymentInfoAction
	(*SyncActionValue_PinAction)(nil),                                                                                                   // 374: proto.SyncActionValue.PinAction
	(*SyncActionValue_PnForLidChatAction)(nil),                                                                                          // 375: proto.SyncActionValue.PnForLidChatAction
	(*SyncActionValue_PrimaryFeature)(nil),                                                                                              // 376: proto.SyncActionValue.PrimaryFeature
	(*SyncActionValue_PrimaryVersionAction)(nil),                                                                                        // 377: proto.SyncActionValue.PrimaryVersionAction
	(*SyncActionValue_PrivacySettingRelayAllCalls)(nil),                                                                                 // 378: proto.SyncActionValue.PrivacySettingRelayAllCalls
	(*SyncActionValue_PushNameSetting)(nil),                                                                                             // 379: proto.SyncActionValue.PushNameSetting
	(*SyncActionValue_QuickReplyAction)(nil),                                                                                            // 380: proto.SyncActionValue.QuickReplyAction
	(*SyncActionValue_RecentEmojiWeightsAction)(nil),                                                                                    // 381: proto.SyncActionValue.RecentEmojiWeightsAction
	(*SyncActionValue_RemoveRecentStickerAction)(nil),                                                                                   // 382: proto.SyncActionValue.RemoveRecentStickerAction
	(*SyncActionValue_SecurityNotificationSetting)(nil),                                                                                 // 383: proto.SyncActionValue.SecurityNotificationSetting
	(*SyncActionValue_StarAction)(nil),                                                                                                  // 384: proto.SyncActionValue.StarAction
	(*SyncActionValue_StatusPrivacyAction)(nil),                                                                                         // 385: proto.SyncActionValue.StatusPrivacyAction
	(*SyncActionValue_StickerAction)(nil),                                                                                               // 386: proto.SyncActionValue.StickerAction
	(*SyncActionValue_SubscriptionAction)(nil),                                                                                          // 387: proto.SyncActionValue.SubscriptionAction
	(*SyncActionValue_SyncActionMessage)(nil),                                                                                           // 388: proto.SyncActionValue.SyncActionMessage
	(*SyncActionValue_SyncActionMessageRange)(nil),                                                                                      // 389: proto.SyncActionValue.SyncActionMessageRange
	(*SyncActionValue_TimeFormatAction)(nil),                                                                                            // 390: proto.SyncActionValue.TimeFormatAction
	(*SyncActionValue_UnarchiveChatsSetting)(nil),                                                                                       // 391: proto.SyncActionValue.UnarchiveChatsSetting
	(*SyncActionValue_UserStatusMuteAction)(nil),                                                                                        // 392: proto.SyncActionValue.UserStatusMuteAction
	(*TemplateButton_CallButton)(nil),                                                                                                   // 393: proto.TemplateButton.CallButton
	(*TemplateButton_QuickReplyButton)(nil),                                                                                             // 394: proto.TemplateButton.QuickReplyButton
	(*TemplateButton_URLButton)(nil),                                                                                                    // 395: proto.TemplateButton.URLButton
	(*VerifiedNameCertificate_Details)(nil),                                                                                             // 396: proto.VerifiedNameCertificate.Details
}
var file_WAProto_proto_depIdxs = []int32{
	0,   // 0: proto.ADVDeviceIdentity.accountType:type_name -> proto.ADVEncryptionType
	0,   // 1: proto.ADVDeviceIdentity.deviceType:type_name -> proto.ADVEncryptionType
	0,   // 2: proto.ADVKeyIndexList.accountType:type_name -> proto.ADVEncryptionType
	0,   // 3: proto.ADVSignedDeviceIdentityHMAC.accountType:type_name -> proto.ADVEncryptionType
	4,   // 4: proto.BizAccountLinkInfo.hostStorage:type_name -> proto.BizAccountLinkInfo.HostStorageType
	3,   // 5: proto.BizAccountLinkInfo.accountType:type_name -> proto.BizAccountLinkInfo.AccountType
	187, // 6: proto.BizAccountPayload.vnameCert:type_name -> proto.VerifiedNameCertificate
	7,   // 7: proto.BizIdentityInfo.vlevel:type_name -> proto.BizIdentityInfo.VerifiedLevelValue
	187, // 8: proto.BizIdentityInfo.vnameCert:type_name -> proto.VerifiedNameCertificate
	6,   // 9: proto.BizIdentityInfo.hostStorage:type_name -> proto.BizIdentityInfo.HostStorageType
	5,   // 10: proto.BizIdentityInfo.actualActors:type_name -> proto.BizIdentityInfo.ActualActorsType
	96,  // 11: proto.BotMetadata.avatarMetadata:type_name -> proto.BotAvatarMetadata
	98,  // 12: proto.BotMetadata.pluginMetadata:type_name -> proto.BotPluginMetadata
	99,  // 13: proto.BotMetadata.suggestedPromptMetadata:type_name -> proto.BotSuggestedPromptMetadata
	9,   // 14: proto.BotPluginMetadata.provider:type_name -> proto.BotPluginMetadata.SearchProvider
	8,   // 15: proto.BotPluginMetadata.pluginType:type_name -> proto.BotPluginMetadata.PluginType
	10,  // 16: proto.CallLogRecord.callResult:type_name -> proto.CallLogRecord.CallResult
	12,  // 17: proto.CallLogRecord.silenceReason:type_name -> proto.CallLogRecord.SilenceReason
	192, // 18: proto.CallLogRecord.participants:type_name -> proto.CallLogRecord.ParticipantInfo
	11,  // 19: proto.CallLogRecord.callType:type_name -> proto.CallLogRecord.CallType
	193, // 20: proto.CertChain.leaf:type_name -> proto.CertChain.NoiseCertificate
	193, // 21: proto.CertChain.intermediate:type_name -> proto.CertChain.NoiseCertificate
	195, // 22: proto.ChatRowOpaqueData.draftMessage:type_name -> proto.ChatRowOpaqueData.DraftMessage
	201, // 23: proto.ClientPayload.userAgent:type_name -> proto.ClientPayload.UserAgent
	202, // 24: proto.ClientPayload.webInfo:type_name -> proto.ClientPayload.WebInfo
	15,  // 25: proto.ClientPayload.connectType:type_name -> proto.ClientPayload.ConnectType
	14,  // 26: proto.ClientPayload.connectReason:type_name -> proto.ClientPayload.ConnectReason
	198, // 27: proto.ClientPayload.dnsSource:type_name -> proto.ClientPayload.DNSSource
	199, // 28: proto.ClientPayload.devicePairingData:type_name -> proto.ClientPayload.DevicePairingRegistrationData
	17,  // 29: proto.ClientPayload.product:type_name -> proto.ClientPayload.Product
	16,  // 30: proto.ClientPayload.iosAppExtension:type_name -> proto.ClientPayload.IOSAppExtension
	200, // 31: proto.ClientPayload.interopData:type_name -> proto.ClientPayload.InteropData
	136, // 32: proto.CommentMetadata.commentParentKey:type_name -> proto.MessageKey
	133, // 33: proto.ContextInfo.quotedMessage:type_name -> proto.Message
	205, // 34: proto.ContextInfo.quotedAd:type_name -> proto.ContextInfo.AdReplyInfo
	136, // 35: proto.ContextInfo.placeholderKey:type_name -> proto.MessageKey
	208, // 36: proto.ContextInfo.externalAdReply:type_name -> proto.ContextInfo.ExternalAdReplyInfo
	110, // 37: proto.ContextInfo.disappearingMode:type_name -> proto.DisappearingMode
	90,  // 38: proto.ContextInfo.actionLink:type_name -> proto.ActionLink
	116, // 39: proto.ContextInfo.groupMentions:type_name -> proto.GroupMention
	210, // 40: proto.ContextInfo.utm:type_name -> proto.ContextInfo.UTMInfo
	209, // 41: proto.ContextInfo.forwardedNewsletterMessageInfo:type_name -> proto.ContextInfo.ForwardedNewsletterMessageInfo
	206, // 42: proto.ContextInfo.businessMessageForwardInfo:type_name -> proto.ContextInfo.BusinessMessageForwardInfo
	207, // 43: proto.ContextInfo.dataSharingContext:type_name -> proto.ContextInfo.DataSharingContext
	120, // 44: proto.Conversation.messages:type_name -> proto.HistorySyncMsg
	26,  // 45: proto.Conversation.endOfHistoryTransferType:type_name -> proto.Conversation.EndOfHistoryTransferType
	110, // 46: proto.Conversation.disappearingMode:type_name -> proto.DisappearingMode
	117, // 47: proto.Conversation.participant:type_name -> proto.GroupParticipant
	188, // 48: proto.Conversation.wallpaper:type_name -> proto.WallpaperSettings
	2,   // 49: proto.Conversation.mediaVisibility:type_name -> proto.MediaVisibility
	0,   // 50: proto.DeviceListMetadata.senderAccountType:type_name -> proto.ADVEncryptionType
	0,   // 51: proto.DeviceListMetadata.receiverAccountType:type_name -> proto.ADVEncryptionType
	211, // 52: proto.DeviceProps.version:type_name -> proto.DeviceProps.AppVersion
	27,  // 53: proto.DeviceProps.platformType:type_name -> proto.DeviceProps.PlatformType
	212, // 54: proto.DeviceProps.historySyncConfig:type_name -> proto.DeviceProps.HistorySyncConfig
	28,  // 55: proto.DisappearingMode.initiator:type_name -> proto.DisappearingMode.Initiator
	29,  // 56: proto.DisappearingMode.trigger:type_name -> proto.DisappearingMode.Trigger
	136, // 57: proto.EventResponse.eventResponseMessageKey:type_name -> proto.MessageKey
	248, // 58: proto.EventResponse.eventResponseMessage:type_name -> proto.Message.EventResponseMessage
	188, // 59: proto.GlobalSettings.lightThemeWallpaper:type_name -> proto.WallpaperSettings
	2,   // 60: proto.GlobalSettings.mediaVisibility:type_name -> proto.MediaVisibility
	188, // 61: proto.GlobalSettings.darkThemeWallpaper:type_name -> proto.WallpaperSettings
	91,  // 62: proto.GlobalSettings.autoDownloadWiFi:type_name -> proto.AutoDownloadSettings
	91,  // 63: proto.GlobalSettings.autoDownloadCellular:type_name -> proto.AutoDownloadSettings
	91,  // 64: proto.GlobalSettings.autoDownloadRoaming:type_name -> proto.AutoDownloadSettings
	92,  // 65: proto.GlobalSettings.avatarUserSettings:type_name -> proto.AvatarUserSettings
	143, // 66: proto.GlobalSettings.individualNotificationSettings:type_name -> proto.NotificationSettings
	143, // 67: proto.GlobalSettings.groupNotificationSettings:type_name -> proto.NotificationSettings
	30,  // 68: proto.GroupParticipant.rank:type_name -> proto.GroupParticipant.Rank
	214, // 69: proto.HandshakeMessage.clientHello:type_name -> proto.HandshakeMessage.ClientHello
	215, // 70: proto.HandshakeMessage.serverHello:type_name -> proto.HandshakeMessage.ServerHello
	213, // 71: proto.HandshakeMessage.clientFinish:type_name -> proto.HandshakeMessage.ClientFinish
	32,  // 72: proto.HistorySync.syncType:type_name -> proto.HistorySync.HistorySyncType
	106, // 73: proto.HistorySync.conversations:type_name -> proto.Conversation
	190, // 74: proto.HistorySync.statusV3Messages:type_name -> proto.WebMessageInfo
	159, // 75: proto.HistorySync.pushnames:type_name -> proto.Pushname
	115, // 76: proto.HistorySync.globalSettings:type_name -> proto.GlobalSettings
	174, // 77: proto.HistorySync.recentStickers:type_name -> proto.StickerMetadata
	145, // 78: proto.HistorySync.pastParticipants:type_name -> proto.PastParticipants
	100, // 79: proto.HistorySync.callLogRecords:type_name -> proto.CallLogRecord
	31,  // 80: proto.HistorySync.aiWaitListState:type_name -> proto.HistorySync.BotAIWaitListState
	149, // 81: proto.HistorySync.phoneNumberToLidMappings:type_name -> proto.PhoneNumberToLIDMapping
	190, // 82: proto.HistorySyncMsg.message:type_name -> proto.WebMessageInfo
	217, // 83: proto.HydratedTemplateButton.quickReplyButton:type_name -> proto.HydratedTemplateButton.HydratedQuickReplyButton
	218, // 84: proto.HydratedTemplateButton.urlButton:type_name -> proto.HydratedTemplateButton.HydratedURLButton
	216, // 85: proto.HydratedTemplateButton.callButton:type_name -> proto.HydratedTemplateButton.HydratedCallButton
	152, // 86: proto.InteractiveAnnotation.polygonVertices:type_name -> proto.Point
	128, // 87: proto.InteractiveAnnotation.location:type_name -> proto.Location
	209, // 88: proto.InteractiveAnnotation.newsletter:type_name -> proto.ContextInfo.ForwardedNewsletterMessageInfo
	1,   // 89: proto.KeepInChat.keepType:type_name -> proto.KeepType
	136, // 90: proto.KeepInChat.key:type_name -> proto.MessageKey
	219, // 91: proto.MediaEntry.downloadableThumbnail:type_name -> proto.MediaEntry.DownloadableThumbnail
	220, // 92: proto.MediaEntry.progressiveJpegDetails:type_name -> proto.MediaEntry.ProgressiveJpegDetails
	34,  // 93: proto.MediaRetryNotification.result:type_name -> proto.MediaRetryNotification.ResultType
	288, // 94: proto.Message.senderKeyDistributionMessage:type_name -> proto.Message.SenderKeyDistributionMessage
	256, // 95: proto.Message.imageMessage:type_name -> proto.Message.ImageMessage
	238, // 96: proto.Message.contactMessage:type_name -> proto.Message.ContactMessage
	265, // 97: proto.Message.locationMessage:type_name -> proto.Message.LocationMessage
	250, // 98: proto.Message.extendedTextMessage:type_name -> proto.Message.ExtendedTextMessage
	242, // 99: proto.Message.documentMessage:type_name -> proto.Message.DocumentMessage
	228, // 100: proto.Message.audioMessage:type_name -> proto.Message.AudioMessage
	293, // 101: proto.Message.videoMessage:type_name -> proto.Message.VideoMessage
	233, // 102: proto.Message.call:type_name -> proto.Message.Call
	236, // 103: proto.Message.chat:type_name -> proto.Message.Chat
	280, // 104: proto.Message.protocolMessage:type_name -> proto.Message.ProtocolMessage
	239, // 105: proto.Message.contactsArrayMessage:type_name -> proto.Message.ContactsArrayMessage
	254, // 106: proto.Message.highlyStructuredMessage:type_name -> proto.Message.HighlyStructuredMessage
	288, // 107: proto.Message.fastRatchetKeySenderKeyDistributionMessage:type_name -> proto.Message.SenderKeyDistributionMessage
	287, // 108: proto.Message.sendPaymentMessage:type_name -> proto.Message.SendPaymentMessage
	264, // 109: proto.Message.liveLocationMessage:type_name -> proto.Message.LiveLocationMessage
	282, // 110: proto.Message.requestPaymentMessage:type_name -> proto.Message.RequestPaymentMessage
	240, // 111: proto.Message.declinePaymentRequestMessage:type_name -> proto.Message.DeclinePaymentRequestMessage
	235, // 112: proto.Message.cancelPaymentRequestMessage:type_name -> proto.Message.CancelPaymentRequestMessage
	292, // 113: proto.Message.templateMessage:type_name -> proto.Message.TemplateMessage
	289, // 114: proto.Message.stickerMessage:type_name -> proto.Message.StickerMessage
	253, // 115: proto.Message.groupInviteMessage:type_name -> proto.Message.GroupInviteMessage
	291, // 116: proto.Message.templateButtonReplyMessage:type_name -> proto.Message.TemplateButtonReplyMessage
	279, // 117: proto.Message.productMessage:type_name -> proto.Message.ProductMessage
	241, // 118: proto.Message.deviceSentMessage:type_name -> proto.Message.DeviceSentMessage
	135, // 119: proto.Message.messageContextInfo:type_name -> proto.MessageContextInfo
	262, // 120: proto.Message.listMessage:type_name -> proto.Message.ListMessage
	252, // 121: proto.Message.viewOnceMessage:type_name -> proto.Message.FutureProofMessage
	268, // 122: proto.Message.orderMessage:type_name -> proto.Message.OrderMessage
	263, // 123: proto.Message.listResponseMessage:type_name -> proto.Message.ListResponseMessage
	252, // 124: proto.Message.ephemeralMessage:type_name -> proto.Message.FutureProofMessage
	260, // 125: proto.Message.invoiceMessage:type_name -> proto.Message.InvoiceMessage
	231, // 126: proto.Message.buttonsMessage:type_name -> proto.Message.ButtonsMessage
	232, // 127: proto.Message.buttonsResponseMessage:type_name -> proto.Message.ButtonsResponseMessage
	269, // 128: proto.Message.paymentInviteMessage:type_name -> proto.Message.PaymentInviteMessage
	258, // 129: proto.Message.interactiveMessage:type_name -> proto.Message.InteractiveMessage
	281, // 130: proto.Message.reactionMessage:type_name -> proto.Message.ReactionMessage
	290, // 131: proto.Message.stickerSyncRmrMessage:type_name -> proto.Message.StickerSyncRMRMessage
	259, // 132: proto.Message.interactiveResponseMessage:type_name -> proto.Message.InteractiveResponseMessage
	274, // 133: proto.Message.pollCreationMessage:type_name -> proto.Message.PollCreationMessage
	276, // 134: proto.Message.pollUpdateMessage:type_name -> proto.Message.PollUpdateMessage
	261, // 135: proto.Message.keepInChatMessage:type_name -> proto.Message.KeepInChatMessage
	252, // 136: proto.Message.documentWithCaptionMessage:type_name -> proto.Message.FutureProofMessage
	283, // 137: proto.Message.requestPhoneNumberMessage:type_name -> proto.Message.RequestPhoneNumberMessage
	252, // 138: proto.Message.viewOnceMessageV2:type_name -> proto.Message.FutureProofMessage
	245, // 139: proto.Message.encReactionMessage:type_name -> proto.Message.EncReactionMessage
	252, // 140: proto.Message.editedMessage:type_name -> proto.Message.FutureProofMessage
	252, // 141: proto.Message.viewOnceMessageV2Extension:type_name -> proto.Message.FutureProofMessage
	274, // 142: proto.Message.pollCreationMessageV2:type_name -> proto.Message.PollCreationMessage
	285, // 143: proto.Message.scheduledCallCreationMessage:type_name -> proto.Message.ScheduledCallCreationMessage
	252, // 144: proto.Message.groupMentionedMessage:type_name -> proto.Message.FutureProofMessage
	272, // 145: proto.Message.pinInChatMessage:type_name -> proto.Message.PinInChatMessage
	274, // 146: proto.Message.pollCreationMessageV3:type_name -> proto.Message.PollCreationMessage
	286, // 147: proto.Message.scheduledCallEditMessage:type_name -> proto.Message.ScheduledCallEditMessage
	293, // 148: proto.Message.ptvMessage:type_name -> proto.Message.VideoMessage
	252, // 149: proto.Message.botInvokeMessage:type_name -> proto.Message.FutureProofMessage
	234, // 150: proto.Message.callLogMesssage:type_name -> proto.Message.CallLogMessage
	266, // 151: proto.Message.messageHistoryBundle:type_name -> proto.Message.MessageHistoryBundle
	243, // 152: proto.Message.encCommentMessage:type_name -> proto.Message.EncCommentMessage
	229, // 153: proto.Message.bcallMessage:type_name -> proto.Message.BCallMessage
	252, // 154: proto.Message.lottieStickerMessage:type_name -> proto.Message.FutureProofMessage
	247, // 155: proto.Message.eventMessage:type_name -> proto.Message.EventMessage
	237, // 156: proto.Message.commentMessage:type_name -> proto.Message.CommentMessage
	267, // 157: proto.Message.newsletterAdminInviteMessage:type_name -> proto.Message.NewsletterAdminInviteMessage
	251, // 158: proto.Message.extendedTextMessageWithParentKey:type_name -> proto.Message.ExtendedTextMessageWithParentKey
	273, // 159: proto.Message.placeholderMessage:type_name -> proto.Message.PlaceholderMessage
	244, // 160: proto.Message.encEventUpdateMessage:type_name -> proto.Message.EncEventUpdateMessage
	108, // 161: proto.MessageContextInfo.deviceListMetadata:type_name -> proto.DeviceListMetadata
	97,  // 162: proto.MessageContextInfo.botMetadata:type_name -> proto.BotMetadata
	333, // 163: proto.MsgOpaqueData.pollOptions:type_name -> proto.MsgOpaqueData.PollOption
	154, // 164: proto.MsgOpaqueData.encPollVote:type_name -> proto.PollEncValue
	139, // 165: proto.MsgRowOpaqueData.currentMsg:type_name -> proto.MsgOpaqueData
	139, // 166: proto.MsgRowOpaqueData.quotedMsg:type_name -> proto.MsgOpaqueData
	136, // 167: proto.NotificationMessageInfo.key:type_name -> proto.MessageKey
	133, // 168: proto.NotificationMessageInfo.message:type_name -> proto.Message
	68,  // 169: proto.PastParticipant.leaveReason:type_name -> proto.PastParticipant.LeaveReason
	144, // 170: proto.PastParticipants.pastParticipants:type_name -> proto.PastParticipant
	69,  // 171: proto.PatchDebugData.senderPlatform:type_name -> proto.PatchDebugData.Platform
	335, // 172: proto.PaymentBackground.mediaData:type_name -> proto.PaymentBackground.MediaData
	70,  // 173: proto.PaymentBackground.type:type_name -> proto.PaymentBackground.Type
	71,  // 174: proto.PaymentInfo.currencyDeprecated:type_name -> proto.PaymentInfo.Currency
	72,  // 175: proto.PaymentInfo.status:type_name -> proto.PaymentInfo.Status
	136, // 176: proto.PaymentInfo.requestMessageKey:type_name -> proto.MessageKey
	73,  // 177: proto.PaymentInfo.txnStatus:type_name -> proto.PaymentInfo.TxnStatus
	138, // 178: proto.PaymentInfo.primaryAmount:type_name -> proto.Money
	138, // 179: proto.PaymentInfo.exchangeAmount:type_name -> proto.Money
	74,  // 180: proto.PinInChat.type:type_name -> proto.PinInChat.Type
	136, // 181: proto.PinInChat.key:type_name -> proto.MessageKey
	134, // 182: proto.PinInChat.messageAddOnContextInfo:type_name -> proto.MessageAddOnContextInfo
	136, // 183: proto.PollUpdate.pollUpdateMessageKey:type_name -> proto.MessageKey
	278, // 184: proto.PollUpdate.vote:type_name -> proto.Message.PollVoteMessage
	136, // 185: proto.Reaction.key:type_name -> proto.MessageKey
	170, // 186: proto.RecordStructure.currentSession:type_name -> proto.SessionStructure
	170, // 187: proto.RecordStructure.previousSessions:type_name -> proto.SessionStructure
	168, // 188: proto.SenderKeyRecordStructure.senderKeyStates:type_name -> proto.SenderKeyStateStructure
	339, // 189: proto.SenderKeyStateStructure.senderChainKey:type_name -> proto.SenderKeyStateStructure.SenderChainKey
	341, // 190: proto.SenderKeyStateStructure.senderSigningKey:type_name -> proto.SenderKeyStateStructure.SenderSigningKey
	340, // 191: proto.SenderKeyStateStructure.senderMessageKeys:type_name -> proto.SenderKeyStateStructure.SenderMessageKey
	342, // 192: proto.SessionStructure.senderChain:type_name -> proto.SessionStructure.Chain
	342, // 193: proto.SessionStructure.receiverChains:type_name -> proto.SessionStructure.Chain
	343, // 194: proto.SessionStructure.pendingKeyExchange:type_name -> proto.SessionStructure.PendingKeyExchange
	344, // 195: proto.SessionStructure.pendingPreKey:type_name -> proto.SessionStructure.PendingPreKey
	176, // 196: proto.SyncActionData.value:type_name -> proto.SyncActionValue
	384, // 197: proto.SyncActionValue.starAction:type_name -> proto.SyncActionValue.StarAction
	355, // 198: proto.SyncActionValue.contactAction:type_name -> proto.SyncActionValue.ContactAction
	371, // 199: proto.SyncActionValue.muteAction:type_name -> proto.SyncActionValue.MuteAction
	374, // 200: proto.SyncActionValue.pinAction:type_name -> proto.SyncActionValue.PinAction
	383, // 201: proto.SyncActionValue.securityNotificationSetting:type_name -> proto.SyncActionValue.SecurityNotificationSetting
	379, // 202: proto.SyncActionValue.pushNameSetting:type_name -> proto.SyncActionValue.PushNameSetting
	380, // 203: proto.SyncActionValue.quickReplyAction:type_name -> proto.SyncActionValue.QuickReplyAction
	381, // 204: proto.SyncActionValue.recentEmojiWeightsAction:type_name -> proto.SyncActionValue.RecentEmojiWeightsAction
	365, // 205: proto.SyncActionValue.labelEditAction:type_name -> proto.SyncActionValue.LabelEditAction
	364, // 206: proto.SyncActionValue.labelAssociationAction:type_name -> proto.SyncActionValue.LabelAssociationAction
	367, // 207: proto.SyncActionValue.localeSetting:type_name -> proto.SyncActionValue.LocaleSetting
	349, // 208: proto.SyncActionValue.archiveChatAction:type_name -> proto.SyncActionValue.ArchiveChatAction
	361, // 209: proto.SyncActionValue.deleteMessageForMeAction:type_name -> proto.SyncActionValue.DeleteMessageForMeAction
	363, // 210: proto.SyncActionValue.keyExpiration:type_name -> proto.SyncActionValue.KeyExpiration
	368, // 211: proto.SyncActionValue.markChatAsReadAction:type_name -> proto.SyncActionValue.MarkChatAsReadAction
	354, // 212: proto.SyncActionValue.clearChatAction:type_name -> proto.SyncActionValue.ClearChatAction
	359, // 213: proto.SyncActionValue.deleteChatAction:type_name -> proto.SyncActionValue.DeleteChatAction
	391, // 214: proto.SyncActionValue.unarchiveChatsSetting:type_name -> proto.SyncActionValue.UnarchiveChatsSetting
	376, // 215: proto.SyncActionValue.primaryFeature:type_name -> proto.SyncActionValue.PrimaryFeature
	348, // 216: proto.SyncActionValue.androidUnsupportedActions:type_name -> proto.SyncActionValue.AndroidUnsupportedActions
	347, // 217: proto.SyncActionValue.agentAction:type_name -> proto.SyncActionValue.AgentAction
	387, // 218: proto.SyncActionValue.subscriptionAction:type_name -> proto.SyncActionValue.SubscriptionAction
	392, // 219: proto.SyncActionValue.userStatusMuteAction:type_name -> proto.SyncActionValue.UserStatusMuteAction
	390, // 220: proto.SyncActionValue.timeFormatAction:type_name -> proto.SyncActionValue.TimeFormatAction
	372, // 221: proto.SyncActionValue.nuxAction:type_name -> proto.SyncActionValue.NuxAction
	377, // 222: proto.SyncActionValue.primaryVersionAction:type_name -> proto.SyncActionValue.PrimaryVersionAction
	386, // 223: proto.SyncActionValue.stickerAction:type_name -> proto.SyncActionValue.StickerAction
	382, // 224: proto.SyncActionValue.removeRecentStickerAction:type_name -> proto.SyncActionValue.RemoveRecentStickerAction
	352, // 225: proto.SyncActionValue.chatAssignment:type_name -> proto.SyncActionValue.ChatAssignmentAction
	353, // 226: proto.SyncActionValue.chatAssignmentOpenedStatus:type_name -> proto.SyncActionValue.ChatAssignmentOpenedStatusAction
	375, // 227: proto.SyncActionValue.pnForLidChatAction:type_name -> proto.SyncActionValue.PnForLidChatAction
	369, // 228: proto.SyncActionValue.marketingMessageAction:type_name -> proto.SyncActionValue.MarketingMessageAction
	370, // 229: proto.SyncActionValue.marketingMessageBroadcastAction:type_name -> proto.SyncActionValue.MarketingMessageBroadcastAction
	362, // 230: proto.SyncActionValue.externalWebBetaAction:type_name -> proto.SyncActionValue.ExternalWebBetaAction
	378, // 231: proto.SyncActionValue.privacySettingRelayAllCalls:type_name -> proto.SyncActionValue.PrivacySettingRelayAllCalls
	351, // 232: proto.SyncActionValue.callLogAction:type_name -> proto.SyncActionValue.CallLogAction
	385, // 233: proto.SyncActionValue.statusPrivacy:type_name -> proto.SyncActionValue.StatusPrivacyAction
	350, // 234: proto.SyncActionValue.botWelcomeRequestAction:type_name -> proto.SyncActionValue.BotWelcomeRequestAction
	360, // 235: proto.SyncActionValue.deleteIndividualCallLog:type_name -> proto.SyncActionValue.DeleteIndividualCallLogAction
	366, // 236: proto.SyncActionValue.labelReorderingAction:type_name -> proto.SyncActionValue.LabelReorderingAction
	373, // 237: proto.SyncActionValue.paymentInfoAction:type_name -> proto.SyncActionValue.PaymentInfoAction
	358, // 238: proto.SyncActionValue.customPaymentMethodsAction:type_name -> proto.SyncActionValue.CustomPaymentMethodsAction
	80,  // 239: proto.SyncdMutation.operation:type_name -> proto.SyncdMutation.SyncdOperation
	181, // 240: proto.SyncdMutation.record:type_name -> proto.SyncdRecord
	178, // 241: proto.SyncdMutations.mutations:type_name -> proto.SyncdMutation
	184, // 242: proto.SyncdPatch.version:type_name -> proto.SyncdVersion
	178, // 243: proto.SyncdPatch.mutations:type_name -> proto.SyncdMutation
	114, // 244: proto.SyncdPatch.externalMutations:type_name -> proto.ExternalBlobReference
	126, // 245: proto.SyncdPatch.keyId:type_name -> proto.KeyId
	113, // 246: proto.SyncdPatch.exitCode:type_name -> proto.ExitCode
	177, // 247: proto.SyncdRecord.index:type_name -> proto.SyncdIndex
	183, // 248: proto.SyncdRecord.value:type_name -> proto.SyncdValue
	126, // 249: proto.SyncdRecord.keyId:type_name -> proto.KeyId
	184, // 250: proto.SyncdSnapshot.version:type_name -> proto.SyncdVersion
	181, // 251: proto.SyncdSnapshot.records:type_name -> proto.SyncdRecord
	126, // 252: proto.SyncdSnapshot.keyId:type_name -> proto.KeyId
	394, // 253: proto.TemplateButton.quickReplyButton:type_name -> proto.TemplateButton.QuickReplyButton
	395, // 254: proto.TemplateButton.urlButton:type_name -> proto.TemplateButton.URLButton
	393, // 255: proto.TemplateButton.callButton:type_name -> proto.TemplateButton.CallButton
	81,  // 256: proto.WebFeatures.labelsDisplay:type_name -> proto.WebFeatures.Flag
	81,  // 257: proto.WebFeatures.voipIndividualOutgoing:type_name -> proto.WebFeatures.Flag
	81,  // 258: proto.WebFeatures.groupsV3:type_name -> proto.WebFeatures.Flag
	81,  // 259: proto.WebFeatures.groupsV3Create:type_name -> proto.WebFeatures.Flag
	81,  // 260: proto.WebFeatures.changeNumberV2:type_name -> proto.WebFeatures.Flag
	81,  // 261: proto.WebFeatures.queryStatusV3Thumbnail:type_name -> proto.WebFeatures.Flag
	81,  // 262: proto.WebFeatures.liveLocations:type_name -> proto.WebFeatures.Flag
	81,  // 263: proto.WebFeatures.queryVname:type_name -> proto.WebFeatures.Flag
	81,  // 264: proto.WebFeatures.voipIndividualIncoming:type_name -> proto.WebFeatures.Flag
	81,  // 265: proto.WebFeatures.quickRepliesQuery:type_name -> proto.WebFeatures.Flag
	81,  // 266: proto.WebFeatures.payments:type_name -> proto.WebFeatures.Flag
	81,  // 267: proto.WebFeatures.stickerPackQuery:type_name -> proto.WebFeatures.Flag
	81,  // 268: proto.WebFeatures.liveLocationsFinal:type_name -> proto.WebFeatures.Flag
	81,  // 269: proto.WebFeatures.labelsEdit:type_name -> proto.WebFeatures.Flag
	81,  // 270: proto.WebFeatures.mediaUpload:type_name -> proto.WebFeatures.Flag
	81,  // 271: proto.WebFeatures.mediaUploadRichQuickReplies:type_name -> proto.WebFeatures.Flag
	81,  // 272: proto.WebFeatures.vnameV2:type_name -> proto.WebFeatures.Flag
	81,  // 273: proto.WebFeatures.videoPlaybackUrl:type_name -> proto.WebFeatures.Flag
	81,  // 274: proto.WebFeatures.statusRanking:type_name -> proto.WebFeatures.Flag
	81,  // 275: proto.WebFeatures.voipIndividualVideo:type_name -> proto.WebFeatures.Flag
	81,  // 276: proto.WebFeatures.thirdPartyStickers:type_name -> proto.WebFeatures.Flag
	81,  // 277: proto.WebFeatures.frequentlyForwardedSetting:type_name -> proto.WebFeatures.Flag
	81,  // 278: proto.WebFeatures.groupsV4JoinPermission:type_name -> proto.WebFeatures.Flag
	81,  // 279: proto.WebFeatures.recentStickers:type_name -> proto.WebFeatures.Flag
	81,  // 280: proto.WebFeatures.catalog:type_name -> proto.WebFeatures.Flag
	81,  // 281: proto.WebFeatures.starredStickers:type_name -> proto.WebFeatures.Flag
	81,  // 282: proto.WebFeatures.voipGroupCall:type_name -> proto.WebFeatures.Flag
	81,  // 283: proto.WebFeatures.templateMessage:type_name -> proto.WebFeatures.Flag
	81,  // 284: proto.WebFeatures.templateMessageInteractivity:type_name -> proto.WebFeatures.Flag
	81,  // 285: proto.WebFeatures.ephemeralMessages:type_name -> proto.WebFeatures.Flag
	81,  // 286: proto.WebFeatures.e2ENotificationSync:type_name -> proto.WebFeatures.Flag
	81,  // 287: proto.WebFeatures.recentStickersV2:type_name -> proto.WebFeatures.Flag
	81,  // 288: proto.WebFeatures.recentStickersV3:type_name -> proto.WebFeatures.Flag
	81,  // 289: proto.WebFeatures.userNotice:type_name -> proto.WebFeatures.Flag
	81,  // 290: proto.WebFeatures.support:type_name -> proto.WebFeatures.Flag
	81,  // 291: proto.WebFeatures.groupUiiCleanup:type_name -> proto.WebFeatures.Flag
	81,  // 292: proto.WebFeatures.groupDogfoodingInternalOnly:type_name -> proto.WebFeatures.Flag
	81,  // 293: proto.WebFeatures.settingsSync:type_name -> proto.WebFeatures.Flag
	81,  // 294: proto.WebFeatures.archiveV2:type_name -> proto.WebFeatures.Flag
	81,  // 295: proto.WebFeatures.ephemeralAllowGroupMembers:type_name -> proto.WebFeatures.Flag
	81,  // 296: proto.WebFeatures.ephemeral24HDuration:type_name -> proto.WebFeatures.Flag
	81,  // 297: proto.WebFeatures.mdForceUpgrade:type_name -> proto.WebFeatures.Flag
	81,  // 298: proto.WebFeatures.disappearingMode:type_name -> proto.WebFeatures.Flag
	81,  // 299: proto.WebFeatures.externalMdOptInAvailable:type_name -> proto.WebFeatures.Flag
	81,  // 300: proto.WebFeatures.noDeleteMessageTimeLimit:type_name -> proto.WebFeatures.Flag
	136, // 301: proto.WebMessageInfo.key:type_name -> proto.MessageKey
	133, // 302: proto.WebMessageInfo.message:type_name -> proto.Message
	83,  // 303: proto.WebMessageInfo.status:type_name -> proto.WebMessageInfo.Status
	84,  // 304: proto.WebMessageInfo.messageStubType:type_name -> proto.WebMessageInfo.StubType
	148, // 305: proto.WebMessageInfo.paymentInfo:type_name -> proto.PaymentInfo
	264, // 306: proto.WebMessageInfo.finalLiveLocation:type_name -> proto.Message.LiveLocationMessage
	148, // 307: proto.WebMessageInfo.quotedPaymentInfo:type_name -> proto.PaymentInfo
	82,  // 308: proto.WebMessageInfo.bizPrivacyStatus:type_name -> proto.WebMessageInfo.BizPrivacyStatus
	129, // 309: proto.WebMessageInfo.mediaData:type_name -> proto.MediaData
	150, // 310: proto.WebMessageInfo.photoChange:type_name -> proto.PhotoChange
	186, // 311: proto.WebMessageInfo.userReceipt:type_name -> proto.UserReceipt
	161, // 312: proto.WebMessageInfo.reactions:type_name -> proto.Reaction
	129, // 313: proto.WebMessageInfo.quotedStickerData:type_name -> proto.MediaData
	173, // 314: proto.WebMessageInfo.statusPsa:type_name -> proto.StatusPSA
	155, // 315: proto.WebMessageInfo.pollUpdates:type_name -> proto.PollUpdate
	153, // 316: proto.WebMessageInfo.pollAdditionalMetadata:type_name -> proto.PollAdditionalMetadata
	124, // 317: proto.WebMessageInfo.keepInChat:type_name -> proto.KeepInChat
	151, // 318: proto.WebMessageInfo.pinInChat:type_name -> proto.PinInChat
	158, // 319: proto.WebMessageInfo.premiumMessageInfo:type_name -> proto.PremiumMessageInfo
	104, // 320: proto.WebMessageInfo.commentMetadata:type_name -> proto.CommentMetadata
	112, // 321: proto.WebMessageInfo.eventResponses:type_name -> proto.EventResponse
	164, // 322: proto.WebMessageInfo.reportingTokenInfo:type_name -> proto.ReportingTokenInfo
	190, // 323: proto.WebNotificationsInfo.notifyMessages:type_name -> proto.WebMessageInfo
	10,  // 324: proto.CallLogRecord.ParticipantInfo.callResult:type_name -> proto.CallLogRecord.CallResult
	197, // 325: proto.ChatRowOpaqueData.DraftMessage.ctwaContextLinkData:type_name -> proto.ChatRowOpaqueData.DraftMessage.CtwaContextLinkData
	196, // 326: proto.ChatRowOpaqueData.DraftMessage.ctwaContext:type_name -> proto.ChatRowOpaqueData.DraftMessage.CtwaContextData
	13,  // 327: proto.ChatRowOpaqueData.DraftMessage.CtwaContextData.mediaType:type_name -> proto.ChatRowOpaqueData.DraftMessage.CtwaContextData.ContextInfoExternalAdReplyInfoMediaType
	18,  // 328: proto.ClientPayload.DNSSource.dnsMethod:type_name -> proto.ClientPayload.DNSSource.DNSResolutionMethod
	20,  // 329: proto.ClientPayload.UserAgent.platform:type_name -> proto.ClientPayload.UserAgent.Platform
	203, // 330: proto.ClientPayload.UserAgent.appVersion:type_name -> proto.ClientPayload.UserAgent.AppVersion
	21,  // 331: proto.ClientPayload.UserAgent.releaseChannel:type_name -> proto.ClientPayload.UserAgent.ReleaseChannel
	19,  // 332: proto.ClientPayload.UserAgent.deviceType:type_name -> proto.ClientPayload.UserAgent.DeviceType
	204, // 333: proto.ClientPayload.WebInfo.webdPayload:type_name -> proto.ClientPayload.WebInfo.WebdPayload
	22,  // 334: proto.ClientPayload.WebInfo.webSubPlatform:type_name -> proto.ClientPayload.WebInfo.WebSubPlatform
	23,  // 335: proto.ContextInfo.AdReplyInfo.mediaType:type_name -> proto.ContextInfo.AdReplyInfo.MediaType
	24,  // 336: proto.ContextInfo.ExternalAdReplyInfo.mediaType:type_name -> proto.ContextInfo.ExternalAdReplyInfo.MediaType
	25,  // 337: proto.ContextInfo.ForwardedNewsletterMessageInfo.contentType:type_name -> proto.ContextInfo.ForwardedNewsletterMessageInfo.ContentType
	33,  // 338: proto.HydratedTemplateButton.HydratedURLButton.webviewPresentation:type_name -> proto.HydratedTemplateButton.HydratedURLButton.WebviewPresentationType
	225, // 339: proto.Message.AppStateSyncKey.keyId:type_name -> proto.Message.AppStateSyncKeyId
	223, // 340: proto.Message.AppStateSyncKey.keyData:type_name -> proto.Message.AppStateSyncKeyData
	224, // 341: proto.Message.AppStateSyncKeyData.fingerprint:type_name -> proto.Message.AppStateSyncKeyFingerprint
	225, // 342: proto.Message.AppStateSyncKeyRequest.keyIds:type_name -> proto.Message.AppStateSyncKeyId
	222, // 343: proto.Message.AppStateSyncKeyShare.keys:type_name -> proto.Message.AppStateSyncKey
	105, // 344: proto.Message.AudioMessage.contextInfo:type_name -> proto.ContextInfo
	36,  // 345: proto.Message.BCallMessage.mediaType:type_name -> proto.Message.BCallMessage.MediaType
	136, // 346: proto.Message.BotFeedbackMessage.messageKey:type_name -> proto.MessageKey
	37,  // 347: proto.Message.BotFeedbackMessage.kind:type_name -> proto.Message.BotFeedbackMessage.BotFeedbackKind
	105, // 348: proto.Message.ButtonsMessage.contextInfo:type_name -> proto.ContextInfo
	294, // 349: proto.Message.ButtonsMessage.buttons:type_name -> proto.Message.ButtonsMessage.Button
	40,  // 350: proto.Message.ButtonsMessage.headerType:type_name -> proto.Message.ButtonsMessage.HeaderType
	242, // 351: proto.Message.ButtonsMessage.documentMessage:type_name -> proto.Message.DocumentMessage
	256, // 352: proto.Message.ButtonsMessage.imageMessage:type_name -> proto.Message.ImageMessage
	293, // 353: proto.Message.ButtonsMessage.videoMessage:type_name -> proto.Message.VideoMessage
	265, // 354: proto.Message.ButtonsMessage.locationMessage:type_name -> proto.Message.LocationMessage
	105, // 355: proto.Message.ButtonsResponseMessage.contextInfo:type_name -> proto.ContextInfo
	42,  // 356: proto.Message.ButtonsResponseMessage.type:type_name -> proto.Message.ButtonsResponseMessage.Type
	43,  // 357: proto.Message.CallLogMessage.callOutcome:type_name -> proto.Message.CallLogMessage.CallOutcome
	44,  // 358: proto.Message.CallLogMessage.callType:type_name -> proto.Message.CallLogMessage.CallType
	297, // 359: proto.Message.CallLogMessage.participants:type_name -> proto.Message.CallLogMessage.CallParticipant
	136, // 360: proto.Message.CancelPaymentRequestMessage.key:type_name -> proto.MessageKey
	133, // 361: proto.Message.CommentMessage.message:type_name -> proto.Message
	136, // 362: proto.Message.CommentMessage.targetMessageKey:type_name -> proto.MessageKey
	105, // 363: proto.Message.ContactMessage.contextInfo:type_name -> proto.ContextInfo
	238, // 364: proto.Message.ContactsArrayMessage.contacts:type_name -> proto.Message.ContactMessage
	105, // 365: proto.Message.ContactsArrayMessage.contextInfo:type_name -> proto.ContextInfo
	136, // 366: proto.Message.DeclinePaymentRequestMessage.key:type_name -> proto.MessageKey
	133, // 367: proto.Message.DeviceSentMessage.message:type_name -> proto.Message
	105, // 368: proto.Message.DocumentMessage.contextInfo:type_name -> proto.ContextInfo
	136, // 369: proto.Message.EncCommentMessage.targetMessageKey:type_name -> proto.MessageKey
	136, // 370: proto.Message.EncEventUpdateMessage.eventCreationMessageKey:type_name -> proto.MessageKey
	136, // 371: proto.Message.EncReactionMessage.targetMessageKey:type_name -> proto.MessageKey
	247, // 372: proto.Message.EventEditMessage.eventEditMessage:type_name -> proto.Message.EventMessage
	105, // 373: proto.Message.EventMessage.contextInfo:type_name -> proto.ContextInfo
	265, // 374: proto.Message.EventMessage.location:type_name -> proto.Message.LocationMessage
	45,  // 375: proto.Message.EventResponseMessage.response:type_name -> proto.Message.EventResponseMessage.EventResponseType
	248, // 376: proto.Message.EventUpdateMessage.response:type_name -> proto.Message.EventResponseMessage
	246, // 377: proto.Message.EventUpdateMessage.edit:type_name -> proto.Message.EventEditMessage
	46,  // 378: proto.Message.ExtendedTextMessage.font:type_name -> proto.Message.ExtendedTextMessage.FontType
	48,  // 379: proto.Message.ExtendedTextMessage.previewType:type_name -> proto.Message.ExtendedTextMessage.PreviewType
	105, // 380: proto.Message.ExtendedTextMessage.contextInfo:type_name -> proto.ContextInfo
	47,  // 381: proto.Message.ExtendedTextMessage.inviteLinkGroupType:type_name -> proto.Message.ExtendedTextMessage.InviteLinkGroupType
	47,  // 382: proto.Message.ExtendedTextMessage.inviteLinkGroupTypeV2:type_name -> proto.Message.ExtendedTextMessage.InviteLinkGroupType
	136, // 383: proto.Message.ExtendedTextMessageWithParentKey.key:type_name -> proto.MessageKey
	250, // 384: proto.Message.ExtendedTextMessageWithParentKey.extendedTextMessage:type_name -> proto.Message.ExtendedTextMessage
	133, // 385: proto.Message.FutureProofMessage.message:type_name -> proto.Message
	105, // 386: proto.Message.GroupInviteMessage.contextInfo:type_name -> proto.ContextInfo
	49,  // 387: proto.Message.GroupInviteMessage.groupType:type_name -> proto.Message.GroupInviteMessage.GroupType
	298, // 388: proto.Message.HighlyStructuredMessage.localizableParams:type_name -> proto.Message.HighlyStructuredMessage.HSMLocalizableParameter
	292, // 389: proto.Message.HighlyStructuredMessage.hydratedHsm:type_name -> proto.Message.TemplateMessage
	52,  // 390: proto.Message.HistorySyncNotification.syncType:type_name -> proto.Message.HistorySyncNotification.HistorySyncType
	123, // 391: proto.Message.ImageMessage.interactiveAnnotations:type_name -> proto.InteractiveAnnotation
	105, // 392: proto.Message.ImageMessage.contextInfo:type_name -> proto.ContextInfo
	123, // 393: proto.Message.ImageMessage.annotations:type_name -> proto.InteractiveAnnotation
	307, // 394: proto.Message.InteractiveMessage.header:type_name -> proto.Message.InteractiveMessage.Header
	303, // 395: proto.Message.InteractiveMessage.body:type_name -> proto.Message.InteractiveMessage.Body
	306, // 396: proto.Message.InteractiveMessage.footer:type_name -> proto.Message.InteractiveMessage.Footer
	105, // 397: proto.Message.InteractiveMessage.contextInfo:type_name -> proto.ContextInfo
	309, // 398: proto.Message.InteractiveMessage.shopStorefrontMessage:type_name -> proto.Message.InteractiveMessage.ShopMessage
	305, // 399: proto.Message.InteractiveMessage.collectionMessage:type_name -> proto.Message.InteractiveMessage.CollectionMessage
	308, // 400: proto.Message.InteractiveMessage.nativeFlowMessage:type_name -> proto.Message.InteractiveMessage.NativeFlowMessage
	304, // 401: proto.Message.InteractiveMessage.carouselMessage:type_name -> proto.Message.InteractiveMessage.CarouselMessage
	311, // 402: proto.Message.InteractiveResponseMessage.body:type_name -> proto.Message.InteractiveResponseMessage.Body
	105, // 403: proto.Message.InteractiveResponseMessage.contextInfo:type_name -> proto.ContextInfo
	312, // 404: proto.Message.InteractiveResponseMessage.nativeFlowResponseMessage:type_name -> proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage
	55,  // 405: proto.Message.InvoiceMessage.attachmentType:type_name -> proto.Message.InvoiceMessage.AttachmentType
	136, // 406: proto.Message.KeepInChatMessage.key:type_name -> proto.MessageKey
	1,   // 407: proto.Message.KeepInChatMessage.keepType:type_name -> proto.KeepType
	56,  // 408: proto.Message.ListMessage.listType:type_name -> proto.Message.ListMessage.ListType
	318, // 409: proto.Message.ListMessage.sections:type_name -> proto.Message.ListMessage.Section
	315, // 410: proto.Message.ListMessage.productListInfo:type_name -> proto.Message.ListMessage.ProductListInfo
	105, // 411: proto.Message.ListMessage.contextInfo:type_name -> proto.ContextInfo
	57,  // 412: proto.Message.ListResponseMessage.listType:type_name -> proto.Message.ListResponseMessage.ListType
	319, // 413: proto.Message.ListResponseMessage.singleSelectReply:type_name -> proto.Message.ListResponseMessage.SingleSelectReply
	105, // 414: proto.Message.ListResponseMessage.contextInfo:type_name -> proto.ContextInfo
	105, // 415: proto.Message.LiveLocationMessage.contextInfo:type_name -> proto.ContextInfo
	105, // 416: proto.Message.LocationMessage.contextInfo:type_name -> proto.ContextInfo
	105, // 417: proto.Message.MessageHistoryBundle.contextInfo:type_name -> proto.ContextInfo
	58,  // 418: proto.Message.OrderMessage.status:type_name -> proto.Message.OrderMessage.OrderStatus
	59,  // 419: proto.Message.OrderMessage.surface:type_name -> proto.Message.OrderMessage.OrderSurface
	105, // 420: proto.Message.OrderMessage.contextInfo:type_name -> proto.ContextInfo
	136, // 421: proto.Message.OrderMessage.orderRequestMessageId:type_name -> proto.MessageKey
	60,  // 422: proto.Message.PaymentInviteMessage.serviceType:type_name -> proto.Message.PaymentInviteMessage.ServiceType
	35,  // 423: proto.Message.PeerDataOperationRequestMessage.peerDataOperationRequestType:type_name -> proto.Message.PeerDataOperationRequestType
	322, // 424: proto.Message.PeerDataOperationRequestMessage.requestStickerReupload:type_name -> proto.Message.PeerDataOperationRequestMessage.RequestStickerReupload
	323, // 425: proto.Message.PeerDataOperationRequestMessage.requestUrlPreview:type_name -> proto.Message.PeerDataOperationRequestMessage.RequestUrlPreview
	320, // 426: proto.Message.PeerDataOperationRequestMessage.historySyncOnDemandRequest:type_name -> proto.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
	321, // 427: proto.Message.PeerDataOperationRequestMessage.placeholderMessageResendRequest:type_name -> proto.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
	35,  // 428: proto.Message.PeerDataOperationRequestResponseMessage.peerDataOperationRequestType:type_name -> proto.Message.PeerDataOperationRequestType
	324, // 429: proto.Message.PeerDataOperationRequestResponseMessage.peerDataOperationResult:type_name -> proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
	136, // 430: proto.Message.PinInChatMessage.key:type_name -> proto.MessageKey
	61,  // 431: proto.Message.PinInChatMessage.type:type_name -> proto.Message.PinInChatMessage.Type
	62,  // 432: proto.Message.PlaceholderMessage.type:type_name -> proto.Message.PlaceholderMessage.PlaceholderType
	328, // 433: proto.Message.PollCreationMessage.options:type_name -> proto.Message.PollCreationMessage.Option
	105, // 434: proto.Message.PollCreationMessage.contextInfo:type_name -> proto.ContextInfo
	136, // 435: proto.Message.PollUpdateMessage.pollCreationMessageKey:type_name -> proto.MessageKey
	275, // 436: proto.Message.PollUpdateMessage.vote:type_name -> proto.Message.PollEncValue
	277, // 437: proto.Message.PollUpdateMessage.metadata:type_name -> proto.Message.PollUpdateMessageMetadata
	330, // 438: proto.Message.ProductMessage.product:type_name -> proto.Message.ProductMessage.ProductSnapshot
	329, // 439: proto.Message.ProductMessage.catalog:type_name -> proto.Message.ProductMessage.CatalogSnapshot
	105, // 440: proto.Message.ProductMessage.contextInfo:type_name -> proto.ContextInfo
	136, // 441: proto.Message.ProtocolMessage.key:type_name -> proto.MessageKey
	63,  // 442: proto.Message.ProtocolMessage.type:type_name -> proto.Message.ProtocolMessage.Type
	255, // 443: proto.Message.ProtocolMessage.historySyncNotification:type_name -> proto.Message.HistorySyncNotification
	227, // 444: proto.Message.ProtocolMessage.appStateSyncKeyShare:type_name -> proto.Message.AppStateSyncKeyShare
	226, // 445: proto.Message.ProtocolMessage.appStateSyncKeyRequest:type_name -> proto.Message.AppStateSyncKeyRequest
	257, // 446: proto.Message.ProtocolMessage.initialSecurityNotificationSettingSync:type_name -> proto.Message.InitialSecurityNotificationSettingSync
	221, // 447: proto.Message.ProtocolMessage.appStateFatalExceptionNotification:type_name -> proto.Message.AppStateFatalExceptionNotification
	110, // 448: proto.Message.ProtocolMessage.disappearingMode:type_name -> proto.DisappearingMode
	133, // 449: proto.Message.ProtocolMessage.editedMessage:type_name -> proto.Message
	270, // 450: proto.Message.ProtocolMessage.peerDataOperationRequestMessage:type_name -> proto.Message.PeerDataOperationRequestMessage
	271, // 451: proto.Message.ProtocolMessage.peerDataOperationRequestResponseMessage:type_name -> proto.Message.PeerDataOperationRequestResponseMessage
	230, // 452: proto.Message.ProtocolMessage.botFeedbackMessage:type_name -> proto.Message.BotFeedbackMessage
	284, // 453: proto.Message.ProtocolMessage.requestWelcomeMessageMetadata:type_name -> proto.Message.RequestWelcomeMessageMetadata
	131, // 454: proto.Message.ProtocolMessage.mediaNotifyMessage:type_name -> proto.MediaNotifyMessage
	136, // 455: proto.Message.ReactionMessage.key:type_name -> proto.MessageKey
	133, // 456: proto.Message.RequestPaymentMessage.noteMessage:type_name -> proto.Message
	138, // 457: proto.Message.RequestPaymentMessage.amount:type_name -> proto.Money
	147, // 458: proto.Message.RequestPaymentMessage.background:type_name -> proto.PaymentBackground
	105, // 459: proto.Message.RequestPhoneNumberMessage.contextInfo:type_name -> proto.ContextInfo
	64,  // 460: proto.Message.RequestWelcomeMessageMetadata.localChatState:type_name -> proto.Message.RequestWelcomeMessageMetadata.LocalChatState
	65,  // 461: proto.Message.ScheduledCallCreationMessage.callType:type_name -> proto.Message.ScheduledCallCreationMessage.CallType
	136, // 462: proto.Message.ScheduledCallEditMessage.key:type_name -> proto.MessageKey
	66,  // 463: proto.Message.ScheduledCallEditMessage.editType:type_name -> proto.Message.ScheduledCallEditMessage.EditType
	133, // 464: proto.Message.SendPaymentMessage.noteMessage:type_name -> proto.Message
	136, // 465: proto.Message.SendPaymentMessage.requestMessageKey:type_name -> proto.MessageKey
	147, // 466: proto.Message.SendPaymentMessage.background:type_name -> proto.PaymentBackground
	105, // 467: proto.Message.StickerMessage.contextInfo:type_name -> proto.ContextInfo
	105, // 468: proto.Message.TemplateButtonReplyMessage.contextInfo:type_name -> proto.ContextInfo
	105, // 469: proto.Message.TemplateMessage.contextInfo:type_name -> proto.ContextInfo
	332, // 470: proto.Message.TemplateMessage.hydratedTemplate:type_name -> proto.Message.TemplateMessage.HydratedFourRowTemplate
	331, // 471: proto.Message.TemplateMessage.fourRowTemplate:type_name -> proto.Message.TemplateMessage.FourRowTemplate
	332, // 472: proto.Message.TemplateMessage.hydratedFourRowTemplate:type_name -> proto.Message.TemplateMessage.HydratedFourRowTemplate
	258, // 473: proto.Message.TemplateMessage.interactiveMessageTemplate:type_name -> proto.Message.InteractiveMessage
	123, // 474: proto.Message.VideoMessage.interactiveAnnotations:type_name -> proto.InteractiveAnnotation
	105, // 475: proto.Message.VideoMessage.contextInfo:type_name -> proto.ContextInfo
	67,  // 476: proto.Message.VideoMessage.gifAttribution:type_name -> proto.Message.VideoMessage.Attribution
	123, // 477: proto.Message.VideoMessage.annotations:type_name -> proto.InteractiveAnnotation
	295, // 478: proto.Message.ButtonsMessage.Button.buttonText:type_name -> proto.Message.ButtonsMessage.Button.ButtonText
	41,  // 479: proto.Message.ButtonsMessage.Button.type:type_name -> proto.Message.ButtonsMessage.Button.Type
	296, // 480: proto.Message.ButtonsMessage.Button.nativeFlowInfo:type_name -> proto.Message.ButtonsMessage.Button.NativeFlowInfo
	43,  // 481: proto.Message.CallLogMessage.CallParticipant.callOutcome:type_name -> proto.Message.CallLogMessage.CallOutcome
	299, // 482: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.currency:type_name -> proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
	300, // 483: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.dateTime:type_name -> proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
	301, // 484: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.component:type_name -> proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
	302, // 485: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.unixEpoch:type_name -> proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
	51,  // 486: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.dayOfWeek:type_name -> proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.DayOfWeekType
	50,  // 487: proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.calendar:type_name -> proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.CalendarType
	258, // 488: proto.Message.InteractiveMessage.CarouselMessage.cards:type_name -> proto.Message.InteractiveMessage
	242, // 489: proto.Message.InteractiveMessage.Header.documentMessage:type_name -> proto.Message.DocumentMessage
	256, // 490: proto.Message.InteractiveMessage.Header.imageMessage:type_name -> proto.Message.ImageMessage
	293, // 491: proto.Message.InteractiveMessage.Header.videoMessage:type_name -> proto.Message.VideoMessage
	265, // 492: proto.Message.InteractiveMessage.Header.locationMessage:type_name -> proto.Message.LocationMessage
	310, // 493: proto.Message.InteractiveMessage.NativeFlowMessage.buttons:type_name -> proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
	53,  // 494: proto.Message.InteractiveMessage.ShopMessage.surface:type_name -> proto.Message.InteractiveMessage.ShopMessage.Surface
	54,  // 495: proto.Message.InteractiveResponseMessage.Body.format:type_name -> proto.Message.InteractiveResponseMessage.Body.Format
	316, // 496: proto.Message.ListMessage.ProductListInfo.productSections:type_name -> proto.Message.ListMessage.ProductSection
	314, // 497: proto.Message.ListMessage.ProductListInfo.headerImage:type_name -> proto.Message.ListMessage.ProductListHeaderImage
	313, // 498: proto.Message.ListMessage.ProductSection.products:type_name -> proto.Message.ListMessage.Product
	317, // 499: proto.Message.ListMessage.Section.rows:type_name -> proto.Message.ListMessage.Row
	136, // 500: proto.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest.messageKey:type_name -> proto.MessageKey
	34,  // 501: proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.mediaUploadResult:type_name -> proto.MediaRetryNotification.ResultType
	289, // 502: proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.stickerMessage:type_name -> proto.Message.StickerMessage
	325, // 503: proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.linkPreviewResponse:type_name -> proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
	326, // 504: proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.placeholderMessageResendResponse:type_name -> proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
	327, // 505: proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.hqThumbnail:type_name -> proto.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
	256, // 506: proto.Message.ProductMessage.CatalogSnapshot.catalogImage:type_name -> proto.Message.ImageMessage
	256, // 507: proto.Message.ProductMessage.ProductSnapshot.productImage:type_name -> proto.Message.ImageMessage
	254, // 508: proto.Message.TemplateMessage.FourRowTemplate.content:type_name -> proto.Message.HighlyStructuredMessage
	254, // 509: proto.Message.TemplateMessage.FourRowTemplate.footer:type_name -> proto.Message.HighlyStructuredMessage
	185, // 510: proto.Message.TemplateMessage.FourRowTemplate.buttons:type_name -> proto.TemplateButton
	242, // 511: proto.Message.TemplateMessage.FourRowTemplate.documentMessage:type_name -> proto.Message.DocumentMessage
	254, // 512: proto.Message.TemplateMessage.FourRowTemplate.highlyStructuredMessage:type_name -> proto.Message.HighlyStructuredMessage
	256, // 513: proto.Message.TemplateMessage.FourRowTemplate.imageMessage:type_name -> proto.Message.ImageMessage
	293, // 514: proto.Message.TemplateMessage.FourRowTemplate.videoMessage:type_name -> proto.Message.VideoMessage
	265, // 515: proto.Message.TemplateMessage.FourRowTemplate.locationMessage:type_name -> proto.Message.LocationMessage
	121, // 516: proto.Message.TemplateMessage.HydratedFourRowTemplate.hydratedButtons:type_name -> proto.HydratedTemplateButton
	242, // 517: proto.Message.TemplateMessage.HydratedFourRowTemplate.documentMessage:type_name -> proto.Message.DocumentMessage
	256, // 518: proto.Message.TemplateMessage.HydratedFourRowTemplate.imageMessage:type_name -> proto.Message.ImageMessage
	293, // 519: proto.Message.TemplateMessage.HydratedFourRowTemplate.videoMessage:type_name -> proto.Message.VideoMessage
	265, // 520: proto.Message.TemplateMessage.HydratedFourRowTemplate.locationMessage:type_name -> proto.Message.LocationMessage
	338, // 521: proto.QP.Filter.parameters:type_name -> proto.QP.FilterParameters
	77,  // 522: proto.QP.Filter.filterResult:type_name -> proto.QP.FilterResult
	76,  // 523: proto.QP.Filter.clientNotSupportedConfig:type_name -> proto.QP.FilterClientNotSupportedConfig
	75,  // 524: proto.QP.FilterClause.clauseType:type_name -> proto.QP.ClauseType
	337, // 525: proto.QP.FilterClause.clauses:type_name -> proto.QP.FilterClause
	336, // 526: proto.QP.FilterClause.filters:type_name -> proto.QP.Filter
	345, // 527: proto.SessionStructure.Chain.chainKey:type_name -> proto.SessionStructure.Chain.ChainKey
	346, // 528: proto.SessionStructure.Chain.messageKeys:type_name -> proto.SessionStructure.Chain.MessageKey
	389, // 529: proto.SyncActionValue.ArchiveChatAction.messageRange:type_name -> proto.SyncActionValue.SyncActionMessageRange
	100, // 530: proto.SyncActionValue.CallLogAction.callLogRecord:type_name -> proto.CallLogRecord
	389, // 531: proto.SyncActionValue.ClearChatAction.messageRange:type_name -> proto.SyncActionValue.SyncActionMessageRange
	357, // 532: proto.SyncActionValue.CustomPaymentMethod.metadata:type_name -> proto.SyncActionValue.CustomPaymentMethodMetadata
	356, // 533: proto.SyncActionValue.CustomPaymentMethodsAction.customPaymentMethods:type_name -> proto.SyncActionValue.CustomPaymentMethod
	389, // 534: proto.SyncActionValue.DeleteChatAction.messageRange:type_name -> proto.SyncActionValue.SyncActionMessageRange
	389, // 535: proto.SyncActionValue.MarkChatAsReadAction.messageRange:type_name -> proto.SyncActionValue.SyncActionMessageRange
	78,  // 536: proto.SyncActionValue.MarketingMessageAction.type:type_name -> proto.SyncActionValue.MarketingMessageAction.MarketingMessagePrototypeType
	162, // 537: proto.SyncActionValue.RecentEmojiWeightsAction.weights:type_name -> proto.RecentEmojiWeight
	79,  // 538: proto.SyncActionValue.StatusPrivacyAction.mode:type_name -> proto.SyncActionValue.StatusPrivacyAction.StatusDistributionMode
	136, // 539: proto.SyncActionValue.SyncActionMessage.key:type_name -> proto.MessageKey
	388, // 540: proto.SyncActionValue.SyncActionMessageRange.messages:type_name -> proto.SyncActionValue.SyncActionMessage
	254, // 541: proto.TemplateButton.CallButton.displayText:type_name -> proto.Message.HighlyStructuredMessage
	254, // 542: proto.TemplateButton.CallButton.phoneNumber:type_name -> proto.Message.HighlyStructuredMessage
	254, // 543: proto.TemplateButton.QuickReplyButton.displayText:type_name -> proto.Message.HighlyStructuredMessage
	254, // 544: proto.TemplateButton.URLButton.displayText:type_name -> proto.Message.HighlyStructuredMessage
	254, // 545: proto.TemplateButton.URLButton.url:type_name -> proto.Message.HighlyStructuredMessage
	127, // 546: proto.VerifiedNameCertificate.Details.localizedNames:type_name -> proto.LocalizedName
	547, // [547:547] is the sub-list for method output_type
	547, // [547:547] is the sub-list for method input_type
	547, // [547:547] is the sub-list for extension type_name
	547, // [547:547] is the sub-list for extension extendee
	0,   // [0:547] is the sub-list for field type_name
}

func init() { file_WAProto_proto_init() }
func file_WAProto_proto_init() {
	if File_WAProto_proto != nil {
		return
	}
	file_WAProto_proto_msgTypes[36].OneofWrappers = []any{
		(*HydratedTemplateButton_QuickReplyButton)(nil),
		(*HydratedTemplateButton_UrlButton)(nil),
		(*HydratedTemplateButton_CallButton)(nil),
	}
	file_WAProto_proto_msgTypes[38].OneofWrappers = []any{
		(*InteractiveAnnotation_Location)(nil),
		(*InteractiveAnnotation_Newsletter)(nil),
	}
	file_WAProto_proto_msgTypes[100].OneofWrappers = []any{
		(*TemplateButton_QuickReplyButton_)(nil),
		(*TemplateButton_UrlButton)(nil),
		(*TemplateButton_CallButton_)(nil),
	}
	file_WAProto_proto_msgTypes[146].OneofWrappers = []any{
		(*Message_ButtonsMessage_Text)(nil),
		(*Message_ButtonsMessage_DocumentMessage)(nil),
		(*Message_ButtonsMessage_ImageMessage)(nil),
		(*Message_ButtonsMessage_VideoMessage)(nil),
		(*Message_ButtonsMessage_LocationMessage)(nil),
	}
	file_WAProto_proto_msgTypes[147].OneofWrappers = []any{
		(*Message_ButtonsResponseMessage_SelectedDisplayText)(nil),
	}
	file_WAProto_proto_msgTypes[173].OneofWrappers = []any{
		(*Message_InteractiveMessage_ShopStorefrontMessage)(nil),
		(*Message_InteractiveMessage_CollectionMessage_)(nil),
		(*Message_InteractiveMessage_NativeFlowMessage_)(nil),
		(*Message_InteractiveMessage_CarouselMessage_)(nil),
	}
	file_WAProto_proto_msgTypes[174].OneofWrappers = []any{
		(*Message_InteractiveResponseMessage_NativeFlowResponseMessage_)(nil),
	}
	file_WAProto_proto_msgTypes[207].OneofWrappers = []any{
		(*Message_TemplateMessage_FourRowTemplate_)(nil),
		(*Message_TemplateMessage_HydratedFourRowTemplate_)(nil),
		(*Message_TemplateMessage_InteractiveMessageTemplate)(nil),
	}
	file_WAProto_proto_msgTypes[213].OneofWrappers = []any{
		(*Message_HighlyStructuredMessage_HSMLocalizableParameter_Currency)(nil),
		(*Message_HighlyStructuredMessage_HSMLocalizableParameter_DateTime)(nil),
	}
	file_WAProto_proto_msgTypes[215].OneofWrappers = []any{
		(*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_Component)(nil),
		(*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_UnixEpoch)(nil),
	}
	file_WAProto_proto_msgTypes[222].OneofWrappers = []any{
		(*Message_InteractiveMessage_Header_DocumentMessage)(nil),
		(*Message_InteractiveMessage_Header_ImageMessage)(nil),
		(*Message_InteractiveMessage_Header_JpegThumbnail)(nil),
		(*Message_InteractiveMessage_Header_VideoMessage)(nil),
		(*Message_InteractiveMessage_Header_LocationMessage)(nil),
	}
	file_WAProto_proto_msgTypes[246].OneofWrappers = []any{
		(*Message_TemplateMessage_FourRowTemplate_DocumentMessage)(nil),
		(*Message_TemplateMessage_FourRowTemplate_HighlyStructuredMessage)(nil),
		(*Message_TemplateMessage_FourRowTemplate_ImageMessage)(nil),
		(*Message_TemplateMessage_FourRowTemplate_VideoMessage)(nil),
		(*Message_TemplateMessage_FourRowTemplate_LocationMessage)(nil),
	}
	file_WAProto_proto_msgTypes[247].OneofWrappers = []any{
		(*Message_TemplateMessage_HydratedFourRowTemplate_DocumentMessage)(nil),
		(*Message_TemplateMessage_HydratedFourRowTemplate_HydratedTitleText)(nil),
		(*Message_TemplateMessage_HydratedFourRowTemplate_ImageMessage)(nil),
		(*Message_TemplateMessage_HydratedFourRowTemplate_VideoMessage)(nil),
		(*Message_TemplateMessage_HydratedFourRowTemplate_LocationMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_WAProto_proto_rawDesc), len(file_WAProto_proto_rawDesc)),
			NumEnums:      85,
			NumMessages:   312,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_WAProto_proto_goTypes,
		DependencyIndexes: file_WAProto_proto_depIdxs,
		EnumInfos:         file_WAProto_proto_enumTypes,
		MessageInfos:      file_WAProto_proto_msgTypes,
	}.Build()
	File_WAProto_proto = out.File
	file_WAProto_proto_goTypes = nil
	file_WAProto_proto_depIdxs = nil
}
